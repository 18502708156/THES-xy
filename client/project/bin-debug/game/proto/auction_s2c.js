// Generated by sprotodump. DO NOT EDIT!
var __reflect = (this && this.__reflect) || function (p, c, t) {
    p.__class__ = c, t ? t.push(c) : t = [c], p.__types__ = p.__types__ ? t.concat(p.__types__) : t;
};
var Sproto;
(function (Sproto) {
    var auction_item = (function () {
        function auction_item() {
        }
        return auction_item;
    }());
    Sproto.auction_item = auction_item;
    __reflect(auction_item.prototype, "Sproto.auction_item");
    function _decode_auction_item(d) {
        var o = new auction_item;
        var t = -1;
        while (-1 != (t = d.rt())) {
            switch (t) {
                case 0:
                    o.id = d.ri();
                    break;
                case 1:
                    o.itemid = d.ri();
                    break;
                case 2:
                    o.count = d.ri();
                    break;
                case 3:
                    o.price = d.ri();
                    break;
                case 4:
                    o.playername = d.rs();
                    break;
                case 5:
                    o.offername = d.rs();
                    break;
                case 6:
                    o.status = d.ri();
                    break;
                case 7:
                    o.createtime = d.ri();
                    break;
                case 8:
                    o.dealtime = d.ri();
                    break;
                case 9:
                    o.isbuy = d.ri();
                    break;
                case 10:
                    o.dealprice = d.ri();
                    break;
                case 11:
                    o.addprice = d.ri();
                    break;
                case 12:
                    o.numerictype = d.ri();
                    break;
                default:
                    d.nod();
                    break;
            }
        }
        return o;
    }
    function _encode_auction_item(self, st) {
        var se = Sproto.SprotoCore.GetSerialize(st, 13);
        if (self.id != undefined) {
            se.wi(self.id, 0);
        }
        if (self.itemid != undefined) {
            se.wi(self.itemid, 1);
        }
        if (self.count != undefined) {
            se.wi(self.count, 2);
        }
        if (self.price != undefined) {
            se.wi(self.price, 3);
        }
        if (self.playername != undefined) {
            se.ws(self.playername, 4);
        }
        if (self.offername != undefined) {
            se.ws(self.offername, 5);
        }
        if (self.status != undefined) {
            se.wi(self.status, 6);
        }
        if (self.createtime != undefined) {
            se.wi(self.createtime, 7);
        }
        if (self.dealtime != undefined) {
            se.wi(self.dealtime, 8);
        }
        if (self.isbuy != undefined) {
            se.wi(self.isbuy, 9);
        }
        if (self.dealprice != undefined) {
            se.wi(self.dealprice, 10);
        }
        if (self.addprice != undefined) {
            se.wi(self.addprice, 11);
        }
        if (self.numerictype != undefined) {
            se.wi(self.numerictype, 12);
        }
        return Sproto.SprotoCore.CloseSerialize(se);
    }
    Sproto.ALL_DICT["auction_item"] = { en: _encode_auction_item, de: _decode_auction_item };
    var sc_auction_list_request = (function () {
        function sc_auction_list_request() {
        }
        return sc_auction_list_request;
    }());
    Sproto.sc_auction_list_request = sc_auction_list_request;
    __reflect(sc_auction_list_request.prototype, "Sproto.sc_auction_list_request");
    function _decode_sc_auction_list_request(d) {
        var o = new sc_auction_list_request;
        var t = -1;
        while (-1 != (t = d.rt())) {
            switch (t) {
                case 0:
                    o.ratio = d.ri();
                    break;
                case 1:
                    o.ratioAct = d.ri();
                    break;
                case 2:
                    o.lockratio = d.ri();
                    break;
                case 3:
                    o.guildid = d.ri();
                    break;
                case 4:
                    o.items = d.roa("auction_item");
                    break;
                default:
                    d.nod();
                    break;
            }
        }
        return o;
    }
    function _encode_sc_auction_list_request(self, st) {
        var se = Sproto.SprotoCore.GetSerialize(st, 5);
        if (self.ratio != undefined) {
            se.wi(self.ratio, 0);
        }
        if (self.ratioAct != undefined) {
            se.wi(self.ratioAct, 1);
        }
        if (self.lockratio != undefined) {
            se.wi(self.lockratio, 2);
        }
        if (self.guildid != undefined) {
            se.wi(self.guildid, 3);
        }
        if (self.items != undefined) {
            se.woa("auction_item", self.items, 4);
        }
        return Sproto.SprotoCore.CloseSerialize(se);
    }
    Sproto.ALL_DICT["sc_auction_list_request"] = { en: _encode_sc_auction_list_request, de: _decode_sc_auction_list_request };
    var sc_auction_record_request = (function () {
        function sc_auction_record_request() {
        }
        return sc_auction_record_request;
    }());
    Sproto.sc_auction_record_request = sc_auction_record_request;
    __reflect(sc_auction_record_request.prototype, "Sproto.sc_auction_record_request");
    function _decode_sc_auction_record_request(d) {
        var o = new sc_auction_record_request;
        var t = -1;
        while (-1 != (t = d.rt())) {
            switch (t) {
                case 0:
                    o.guildid = d.ri();
                    break;
                case 1:
                    o.items = d.roa("auction_item");
                    break;
                default:
                    d.nod();
                    break;
            }
        }
        return o;
    }
    function _encode_sc_auction_record_request(self, st) {
        var se = Sproto.SprotoCore.GetSerialize(st, 2);
        if (self.guildid != undefined) {
            se.wi(self.guildid, 0);
        }
        if (self.items != undefined) {
            se.woa("auction_item", self.items, 1);
        }
        return Sproto.SprotoCore.CloseSerialize(se);
    }
    Sproto.ALL_DICT["sc_auction_record_request"] = { en: _encode_sc_auction_record_request, de: _decode_sc_auction_record_request };
    var sc_auction_select_request = (function () {
        function sc_auction_select_request() {
        }
        return sc_auction_select_request;
    }());
    Sproto.sc_auction_select_request = sc_auction_select_request;
    __reflect(sc_auction_select_request.prototype, "Sproto.sc_auction_select_request");
    function _decode_sc_auction_select_request(d) {
        var o = new sc_auction_select_request;
        var t = -1;
        while (-1 != (t = d.rt())) {
            switch (t) {
                case 1:
                    o.rewards = d.roa("reward_data");
                    break;
                default:
                    d.nod();
                    break;
            }
        }
        return o;
    }
    function _encode_sc_auction_select_request(self, st) {
        var se = Sproto.SprotoCore.GetSerialize(st, 2);
        if (self.rewards != undefined) {
            se.woa("reward_data", self.rewards, 1);
        }
        return Sproto.SprotoCore.CloseSerialize(se);
    }
    Sproto.ALL_DICT["sc_auction_select_request"] = { en: _encode_sc_auction_select_request, de: _decode_sc_auction_select_request };
    var sc_auction_update_request = (function () {
        function sc_auction_update_request() {
        }
        return sc_auction_update_request;
    }());
    Sproto.sc_auction_update_request = sc_auction_update_request;
    __reflect(sc_auction_update_request.prototype, "Sproto.sc_auction_update_request");
    function _decode_sc_auction_update_request(d) {
        var o = new sc_auction_update_request;
        var t = -1;
        while (-1 != (t = d.rt())) {
            switch (t) {
                case 1:
                    o.guildid = d.ri();
                    break;
                case 2:
                    o.item = d.ro("auction_item");
                    break;
                default:
                    d.nod();
                    break;
            }
        }
        return o;
    }
    function _encode_sc_auction_update_request(self, st) {
        var se = Sproto.SprotoCore.GetSerialize(st, 3);
        if (self.guildid != undefined) {
            se.wi(self.guildid, 1);
        }
        if (self.item != undefined) {
            se.wo("auction_item", self.item, 2);
        }
        return Sproto.SprotoCore.CloseSerialize(se);
    }
    Sproto.ALL_DICT["sc_auction_update_request"] = { en: _encode_sc_auction_update_request, de: _decode_sc_auction_update_request };
    var sc_ratio_change_request = (function () {
        function sc_ratio_change_request() {
        }
        return sc_ratio_change_request;
    }());
    Sproto.sc_ratio_change_request = sc_ratio_change_request;
    __reflect(sc_ratio_change_request.prototype, "Sproto.sc_ratio_change_request");
    function _decode_sc_ratio_change_request(d) {
        var o = new sc_ratio_change_request;
        var t = -1;
        while (-1 != (t = d.rt())) {
            switch (t) {
                case 0:
                    o.ratio = d.ri();
                    break;
                case 1:
                    o.ratioAct = d.ri();
                    break;
                case 2:
                    o.lockratio = d.ri();
                    break;
                default:
                    d.nod();
                    break;
            }
        }
        return o;
    }
    function _encode_sc_ratio_change_request(self, st) {
        var se = Sproto.SprotoCore.GetSerialize(st, 3);
        if (self.ratio != undefined) {
            se.wi(self.ratio, 0);
        }
        if (self.ratioAct != undefined) {
            se.wi(self.ratioAct, 1);
        }
        if (self.lockratio != undefined) {
            se.wi(self.lockratio, 2);
        }
        return Sproto.SprotoCore.CloseSerialize(se);
    }
    Sproto.ALL_DICT["sc_ratio_change_request"] = { en: _encode_sc_ratio_change_request, de: _decode_sc_ratio_change_request };
})(Sproto || (Sproto = {}));
//# sourceMappingURL=auction_s2c.js.map