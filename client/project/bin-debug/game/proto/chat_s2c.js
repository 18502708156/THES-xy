// Generated by sprotodump. DO NOT EDIT!
var __reflect = (this && this.__reflect) || function (p, c, t) {
    p.__class__ = c, t ? t.push(c) : t = [c], p.__types__ = p.__types__ ? t.concat(p.__types__) : t;
};
var Sproto;
(function (Sproto) {
    var chat_data = (function () {
        function chat_data() {
        }
        return chat_data;
    }());
    Sproto.chat_data = chat_data;
    __reflect(chat_data.prototype, "Sproto.chat_data");
    function _decode_chat_data(d) {
        var o = new chat_data;
        var t = -1;
        while (-1 != (t = d.rt())) {
            switch (t) {
                case 0:
                    o.type = d.ri();
                    break;
                case 1:
                    o.id = d.ri();
                    break;
                case 2:
                    o.name = d.rs();
                    break;
                case 4:
                    o.job = d.ri();
                    break;
                case 5:
                    o.sex = d.ri();
                    break;
                case 6:
                    o.vip = d.ri();
                    break;
                case 7:
                    o.str = d.rs();
                    break;
                case 8:
                    o.serverid = d.ri();
                    break;
                case 9:
                    o.shareId = d.ri();
                    break;
                case 10:
                    o.share = d.ro("share_date");
                    break;
                case 11:
                    o.time = d.ri();
                    break;
                case 12:
                    o.headframe = d.ri();
                    break;
                default:
                    d.nod();
                    break;
            }
        }
        return o;
    }
    function _encode_chat_data(self, st) {
        var se = Sproto.SprotoCore.GetSerialize(st, 13);
        if (self.type != undefined) {
            se.wi(self.type, 0);
        }
        if (self.id != undefined) {
            se.wi(self.id, 1);
        }
        if (self.name != undefined) {
            se.ws(self.name, 2);
        }
        if (self.job != undefined) {
            se.wi(self.job, 4);
        }
        if (self.sex != undefined) {
            se.wi(self.sex, 5);
        }
        if (self.vip != undefined) {
            se.wi(self.vip, 6);
        }
        if (self.str != undefined) {
            se.ws(self.str, 7);
        }
        if (self.serverid != undefined) {
            se.wi(self.serverid, 8);
        }
        if (self.shareId != undefined) {
            se.wi(self.shareId, 9);
        }
        if (self.share != undefined) {
            se.wo("share_date", self.share, 10);
        }
        if (self.time != undefined) {
            se.wi(self.time, 11);
        }
        if (self.headframe != undefined) {
            se.wi(self.headframe, 12);
        }
        return Sproto.SprotoCore.CloseSerialize(se);
    }
    Sproto.ALL_DICT["chat_data"] = { en: _encode_chat_data, de: _decode_chat_data };
    var chat_need_infos = (function () {
        function chat_need_infos() {
        }
        return chat_need_infos;
    }());
    Sproto.chat_need_infos = chat_need_infos;
    __reflect(chat_need_infos.prototype, "Sproto.chat_need_infos");
    function _decode_chat_need_infos(d) {
        var o = new chat_need_infos;
        var t = -1;
        while (-1 != (t = d.rt())) {
            switch (t) {
                case 0:
                    o.player = d.roa("chat_player_data");
                    break;
                case 1:
                    o.role = d.roa("chat_role_data");
                    break;
                case 2:
                    o.equip = d.ro("equip_data");
                    break;
                case 3:
                    o.pet = d.ro("pet_info");
                    break;
                default:
                    d.nod();
                    break;
            }
        }
        return o;
    }
    function _encode_chat_need_infos(self, st) {
        var se = Sproto.SprotoCore.GetSerialize(st, 4);
        if (self.player != undefined) {
            se.woa("chat_player_data", self.player, 0);
        }
        if (self.role != undefined) {
            se.woa("chat_role_data", self.role, 1);
        }
        if (self.equip != undefined) {
            se.wo("equip_data", self.equip, 2);
        }
        if (self.pet != undefined) {
            se.wo("pet_info", self.pet, 3);
        }
        return Sproto.SprotoCore.CloseSerialize(se);
    }
    Sproto.ALL_DICT["chat_need_infos"] = { en: _encode_chat_need_infos, de: _decode_chat_need_infos };
    var chat_player_data = (function () {
        function chat_player_data() {
        }
        return chat_player_data;
    }());
    Sproto.chat_player_data = chat_player_data;
    __reflect(chat_player_data.prototype, "Sproto.chat_player_data");
    function _decode_chat_player_data(d) {
        var o = new chat_player_data;
        var t = -1;
        while (-1 != (t = d.rt())) {
            switch (t) {
                case 0:
                    o.name = d.rs();
                    break;
                case 1:
                    o.id = d.ri();
                    break;
                case 2:
                    o.vip = d.ri();
                    break;
                default:
                    d.nod();
                    break;
            }
        }
        return o;
    }
    function _encode_chat_player_data(self, st) {
        var se = Sproto.SprotoCore.GetSerialize(st, 3);
        if (self.name != undefined) {
            se.ws(self.name, 0);
        }
        if (self.id != undefined) {
            se.wi(self.id, 1);
        }
        if (self.vip != undefined) {
            se.wi(self.vip, 2);
        }
        return Sproto.SprotoCore.CloseSerialize(se);
    }
    Sproto.ALL_DICT["chat_player_data"] = { en: _encode_chat_player_data, de: _decode_chat_player_data };
    var chat_role_data = (function () {
        function chat_role_data() {
        }
        return chat_role_data;
    }());
    Sproto.chat_role_data = chat_role_data;
    __reflect(chat_role_data.prototype, "Sproto.chat_role_data");
    function _decode_chat_role_data(d) {
        var o = new chat_role_data;
        var t = -1;
        while (-1 != (t = d.rt())) {
            switch (t) {
                case 0:
                    o.job = d.ri();
                    break;
                case 1:
                    o.sex = d.ri();
                    break;
                default:
                    d.nod();
                    break;
            }
        }
        return o;
    }
    function _encode_chat_role_data(self, st) {
        var se = Sproto.SprotoCore.GetSerialize(st, 2);
        if (self.job != undefined) {
            se.wi(self.job, 0);
        }
        if (self.sex != undefined) {
            se.wi(self.sex, 1);
        }
        return Sproto.SprotoCore.CloseSerialize(se);
    }
    Sproto.ALL_DICT["chat_role_data"] = { en: _encode_chat_role_data, de: _decode_chat_role_data };
    var sc_chat_filte_list_request = (function () {
        function sc_chat_filte_list_request() {
        }
        return sc_chat_filte_list_request;
    }());
    Sproto.sc_chat_filte_list_request = sc_chat_filte_list_request;
    __reflect(sc_chat_filte_list_request.prototype, "Sproto.sc_chat_filte_list_request");
    function _decode_sc_chat_filte_list_request(d) {
        var o = new sc_chat_filte_list_request;
        var t = -1;
        while (-1 != (t = d.rt())) {
            switch (t) {
                case 0:
                    o.filter = d.ri();
                    break;
                default:
                    d.nod();
                    break;
            }
        }
        return o;
    }
    function _encode_sc_chat_filte_list_request(self, st) {
        var se = Sproto.SprotoCore.GetSerialize(st, 1);
        if (self.filter != undefined) {
            se.wi(self.filter, 0);
        }
        return Sproto.SprotoCore.CloseSerialize(se);
    }
    Sproto.ALL_DICT["sc_chat_filte_list_request"] = { en: _encode_sc_chat_filte_list_request, de: _decode_sc_chat_filte_list_request };
    var sc_chat_init_msg_request = (function () {
        function sc_chat_init_msg_request() {
        }
        return sc_chat_init_msg_request;
    }());
    Sproto.sc_chat_init_msg_request = sc_chat_init_msg_request;
    __reflect(sc_chat_init_msg_request.prototype, "Sproto.sc_chat_init_msg_request");
    function _decode_sc_chat_init_msg_request(d) {
        var o = new sc_chat_init_msg_request;
        var t = -1;
        while (-1 != (t = d.rt())) {
            switch (t) {
                case 0:
                    o.chatDatas = d.roa("chat_data");
                    break;
                default:
                    d.nod();
                    break;
            }
        }
        return o;
    }
    function _encode_sc_chat_init_msg_request(self, st) {
        var se = Sproto.SprotoCore.GetSerialize(st, 1);
        if (self.chatDatas != undefined) {
            se.woa("chat_data", self.chatDatas, 0);
        }
        return Sproto.SprotoCore.CloseSerialize(se);
    }
    Sproto.ALL_DICT["sc_chat_init_msg_request"] = { en: _encode_sc_chat_init_msg_request, de: _decode_sc_chat_init_msg_request };
    var sc_chat_is_send_success_request = (function () {
        function sc_chat_is_send_success_request() {
        }
        return sc_chat_is_send_success_request;
    }());
    Sproto.sc_chat_is_send_success_request = sc_chat_is_send_success_request;
    __reflect(sc_chat_is_send_success_request.prototype, "Sproto.sc_chat_is_send_success_request");
    function _decode_sc_chat_is_send_success_request(d) {
        var o = new sc_chat_is_send_success_request;
        var t = -1;
        while (-1 != (t = d.rt())) {
            switch (t) {
                case 0:
                    o.success = d.rb();
                    break;
                default:
                    d.nod();
                    break;
            }
        }
        return o;
    }
    function _encode_sc_chat_is_send_success_request(self, st) {
        var se = Sproto.SprotoCore.GetSerialize(st, 1);
        if (self.success != undefined) {
            se.wb(self.success, 0);
        }
        return Sproto.SprotoCore.CloseSerialize(se);
    }
    Sproto.ALL_DICT["sc_chat_is_send_success_request"] = { en: _encode_sc_chat_is_send_success_request, de: _decode_sc_chat_is_send_success_request };
    var sc_chat_new_msg_request = (function () {
        function sc_chat_new_msg_request() {
        }
        return sc_chat_new_msg_request;
    }());
    Sproto.sc_chat_new_msg_request = sc_chat_new_msg_request;
    __reflect(sc_chat_new_msg_request.prototype, "Sproto.sc_chat_new_msg_request");
    function _decode_sc_chat_new_msg_request(d) {
        var o = new sc_chat_new_msg_request;
        var t = -1;
        while (-1 != (t = d.rt())) {
            switch (t) {
                case 0:
                    o.chatData = d.ro("chat_data");
                    break;
                default:
                    d.nod();
                    break;
            }
        }
        return o;
    }
    function _encode_sc_chat_new_msg_request(self, st) {
        var se = Sproto.SprotoCore.GetSerialize(st, 1);
        if (self.chatData != undefined) {
            se.wo("chat_data", self.chatData, 0);
        }
        return Sproto.SprotoCore.CloseSerialize(se);
    }
    Sproto.ALL_DICT["sc_chat_new_msg_request"] = { en: _encode_sc_chat_new_msg_request, de: _decode_sc_chat_new_msg_request };
    var sc_chat_private_init_msg_request = (function () {
        function sc_chat_private_init_msg_request() {
        }
        return sc_chat_private_init_msg_request;
    }());
    Sproto.sc_chat_private_init_msg_request = sc_chat_private_init_msg_request;
    __reflect(sc_chat_private_init_msg_request.prototype, "Sproto.sc_chat_private_init_msg_request");
    function _decode_sc_chat_private_init_msg_request(d) {
        var o = new sc_chat_private_init_msg_request;
        var t = -1;
        while (-1 != (t = d.rt())) {
            switch (t) {
                case 0:
                    o.session = d.rs();
                    break;
                case 1:
                    o.chatData = d.roa("chat_data");
                    break;
                default:
                    d.nod();
                    break;
            }
        }
        return o;
    }
    function _encode_sc_chat_private_init_msg_request(self, st) {
        var se = Sproto.SprotoCore.GetSerialize(st, 2);
        if (self.session != undefined) {
            se.ws(self.session, 0);
        }
        if (self.chatData != undefined) {
            se.woa("chat_data", self.chatData, 1);
        }
        return Sproto.SprotoCore.CloseSerialize(se);
    }
    Sproto.ALL_DICT["sc_chat_private_init_msg_request"] = { en: _encode_sc_chat_private_init_msg_request, de: _decode_sc_chat_private_init_msg_request };
    var sc_chat_private_new_msg_request = (function () {
        function sc_chat_private_new_msg_request() {
        }
        return sc_chat_private_new_msg_request;
    }());
    Sproto.sc_chat_private_new_msg_request = sc_chat_private_new_msg_request;
    __reflect(sc_chat_private_new_msg_request.prototype, "Sproto.sc_chat_private_new_msg_request");
    function _decode_sc_chat_private_new_msg_request(d) {
        var o = new sc_chat_private_new_msg_request;
        var t = -1;
        while (-1 != (t = d.rt())) {
            switch (t) {
                case 0:
                    o.session = d.rs();
                    break;
                case 1:
                    o.chatData = d.ro("chat_data");
                    break;
                default:
                    d.nod();
                    break;
            }
        }
        return o;
    }
    function _encode_sc_chat_private_new_msg_request(self, st) {
        var se = Sproto.SprotoCore.GetSerialize(st, 2);
        if (self.session != undefined) {
            se.ws(self.session, 0);
        }
        if (self.chatData != undefined) {
            se.wo("chat_data", self.chatData, 1);
        }
        return Sproto.SprotoCore.CloseSerialize(se);
    }
    Sproto.ALL_DICT["sc_chat_private_new_msg_request"] = { en: _encode_sc_chat_private_new_msg_request, de: _decode_sc_chat_private_new_msg_request };
})(Sproto || (Sproto = {}));
//# sourceMappingURL=chat_s2c.js.map