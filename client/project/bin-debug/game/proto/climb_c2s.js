// Generated by sprotodump. DO NOT EDIT!
var __reflect = (this && this.__reflect) || function (p, c, t) {
    p.__class__ = c, t ? t.push(c) : t = [c], p.__types__ = p.__types__ ? t.concat(p.__types__) : t;
};
var Sproto;
(function (Sproto) {
    var cs_climb_all_rank_request = (function () {
        function cs_climb_all_rank_request() {
        }
        return cs_climb_all_rank_request;
    }());
    Sproto.cs_climb_all_rank_request = cs_climb_all_rank_request;
    __reflect(cs_climb_all_rank_request.prototype, "Sproto.cs_climb_all_rank_request");
    function _decode_cs_climb_all_rank_request(d) {
        var o = new cs_climb_all_rank_request;
        var t = -1;
        while (-1 != (t = d.rt())) {
            switch (t) {
                default:
                    d.nod();
                    break;
            }
        }
        return o;
    }
    function _encode_cs_climb_all_rank_request(self, st) {
        var se = Sproto.SprotoCore.GetSerialize(st, 0);
        return Sproto.SprotoCore.CloseSerialize(se);
    }
    Sproto.ALL_DICT["cs_climb_all_rank_request"] = { en: _encode_cs_climb_all_rank_request, de: _decode_cs_climb_all_rank_request };
    var cs_climb_curr_rank_request = (function () {
        function cs_climb_curr_rank_request() {
        }
        return cs_climb_curr_rank_request;
    }());
    Sproto.cs_climb_curr_rank_request = cs_climb_curr_rank_request;
    __reflect(cs_climb_curr_rank_request.prototype, "Sproto.cs_climb_curr_rank_request");
    function _decode_cs_climb_curr_rank_request(d) {
        var o = new cs_climb_curr_rank_request;
        var t = -1;
        while (-1 != (t = d.rt())) {
            switch (t) {
                default:
                    d.nod();
                    break;
            }
        }
        return o;
    }
    function _encode_cs_climb_curr_rank_request(self, st) {
        var se = Sproto.SprotoCore.GetSerialize(st, 0);
        return Sproto.SprotoCore.CloseSerialize(se);
    }
    Sproto.ALL_DICT["cs_climb_curr_rank_request"] = { en: _encode_cs_climb_curr_rank_request, de: _decode_cs_climb_curr_rank_request };
    var cs_climb_get_reward_request = (function () {
        function cs_climb_get_reward_request() {
        }
        return cs_climb_get_reward_request;
    }());
    Sproto.cs_climb_get_reward_request = cs_climb_get_reward_request;
    __reflect(cs_climb_get_reward_request.prototype, "Sproto.cs_climb_get_reward_request");
    function _decode_cs_climb_get_reward_request(d) {
        var o = new cs_climb_get_reward_request;
        var t = -1;
        while (-1 != (t = d.rt())) {
            switch (t) {
                default:
                    d.nod();
                    break;
            }
        }
        return o;
    }
    function _encode_cs_climb_get_reward_request(self, st) {
        var se = Sproto.SprotoCore.GetSerialize(st, 0);
        return Sproto.SprotoCore.CloseSerialize(se);
    }
    Sproto.ALL_DICT["cs_climb_get_reward_request"] = { en: _encode_cs_climb_get_reward_request, de: _decode_cs_climb_get_reward_request };
    var cs_climb_leave_request = (function () {
        function cs_climb_leave_request() {
        }
        return cs_climb_leave_request;
    }());
    Sproto.cs_climb_leave_request = cs_climb_leave_request;
    __reflect(cs_climb_leave_request.prototype, "Sproto.cs_climb_leave_request");
    function _decode_cs_climb_leave_request(d) {
        var o = new cs_climb_leave_request;
        var t = -1;
        while (-1 != (t = d.rt())) {
            switch (t) {
                default:
                    d.nod();
                    break;
            }
        }
        return o;
    }
    function _encode_cs_climb_leave_request(self, st) {
        var se = Sproto.SprotoCore.GetSerialize(st, 0);
        return Sproto.SprotoCore.CloseSerialize(se);
    }
    Sproto.ALL_DICT["cs_climb_leave_request"] = { en: _encode_cs_climb_leave_request, de: _decode_cs_climb_leave_request };
    var cs_climb_leave_time_request = (function () {
        function cs_climb_leave_time_request() {
        }
        return cs_climb_leave_time_request;
    }());
    Sproto.cs_climb_leave_time_request = cs_climb_leave_time_request;
    __reflect(cs_climb_leave_time_request.prototype, "Sproto.cs_climb_leave_time_request");
    function _decode_cs_climb_leave_time_request(d) {
        var o = new cs_climb_leave_time_request;
        var t = -1;
        while (-1 != (t = d.rt())) {
            switch (t) {
                default:
                    d.nod();
                    break;
            }
        }
        return o;
    }
    function _encode_cs_climb_leave_time_request(self, st) {
        var se = Sproto.SprotoCore.GetSerialize(st, 0);
        return Sproto.SprotoCore.CloseSerialize(se);
    }
    Sproto.ALL_DICT["cs_climb_leave_time_request"] = { en: _encode_cs_climb_leave_time_request, de: _decode_cs_climb_leave_time_request };
    var cs_climb_leave_time_response = (function () {
        function cs_climb_leave_time_response() {
        }
        return cs_climb_leave_time_response;
    }());
    Sproto.cs_climb_leave_time_response = cs_climb_leave_time_response;
    __reflect(cs_climb_leave_time_response.prototype, "Sproto.cs_climb_leave_time_response");
    function _decode_cs_climb_leave_time_response(d) {
        var o = new cs_climb_leave_time_response;
        var t = -1;
        while (-1 != (t = d.rt())) {
            switch (t) {
                case 0:
                    o.time = d.ri();
                    break;
                default:
                    d.nod();
                    break;
            }
        }
        return o;
    }
    function _encode_cs_climb_leave_time_response(self, st) {
        var se = Sproto.SprotoCore.GetSerialize(st, 1);
        if (self.time != undefined) {
            se.wi(self.time, 0);
        }
        return Sproto.SprotoCore.CloseSerialize(se);
    }
    Sproto.ALL_DICT["cs_climb_leave_time_response"] = { en: _encode_cs_climb_leave_time_response, de: _decode_cs_climb_leave_time_response };
    var cs_crimb_join_request = (function () {
        function cs_crimb_join_request() {
        }
        return cs_crimb_join_request;
    }());
    Sproto.cs_crimb_join_request = cs_crimb_join_request;
    __reflect(cs_crimb_join_request.prototype, "Sproto.cs_crimb_join_request");
    function _decode_cs_crimb_join_request(d) {
        var o = new cs_crimb_join_request;
        var t = -1;
        while (-1 != (t = d.rt())) {
            switch (t) {
                default:
                    d.nod();
                    break;
            }
        }
        return o;
    }
    function _encode_cs_crimb_join_request(self, st) {
        var se = Sproto.SprotoCore.GetSerialize(st, 0);
        return Sproto.SprotoCore.CloseSerialize(se);
    }
    Sproto.ALL_DICT["cs_crimb_join_request"] = { en: _encode_cs_crimb_join_request, de: _decode_cs_crimb_join_request };
    var cs_crimb_join_response = (function () {
        function cs_crimb_join_response() {
        }
        return cs_crimb_join_response;
    }());
    Sproto.cs_crimb_join_response = cs_crimb_join_response;
    __reflect(cs_crimb_join_response.prototype, "Sproto.cs_crimb_join_response");
    function _decode_cs_crimb_join_response(d) {
        var o = new cs_crimb_join_response;
        var t = -1;
        while (-1 != (t = d.rt())) {
            switch (t) {
                case 0:
                    o.ret = d.rb();
                    break;
                default:
                    d.nod();
                    break;
            }
        }
        return o;
    }
    function _encode_cs_crimb_join_response(self, st) {
        var se = Sproto.SprotoCore.GetSerialize(st, 1);
        if (self.ret != undefined) {
            se.wb(self.ret, 0);
        }
        return Sproto.SprotoCore.CloseSerialize(se);
    }
    Sproto.ALL_DICT["cs_crimb_join_response"] = { en: _encode_cs_crimb_join_response, de: _decode_cs_crimb_join_response };
    var cs_crimb_pk_request = (function () {
        function cs_crimb_pk_request() {
        }
        return cs_crimb_pk_request;
    }());
    Sproto.cs_crimb_pk_request = cs_crimb_pk_request;
    __reflect(cs_crimb_pk_request.prototype, "Sproto.cs_crimb_pk_request");
    function _decode_cs_crimb_pk_request(d) {
        var o = new cs_crimb_pk_request;
        var t = -1;
        while (-1 != (t = d.rt())) {
            switch (t) {
                case 0:
                    o.targetid = d.ri();
                    break;
                default:
                    d.nod();
                    break;
            }
        }
        return o;
    }
    function _encode_cs_crimb_pk_request(self, st) {
        var se = Sproto.SprotoCore.GetSerialize(st, 1);
        if (self.targetid != undefined) {
            se.wi(self.targetid, 0);
        }
        return Sproto.SprotoCore.CloseSerialize(se);
    }
    Sproto.ALL_DICT["cs_crimb_pk_request"] = { en: _encode_cs_crimb_pk_request, de: _decode_cs_crimb_pk_request };
})(Sproto || (Sproto = {}));
//# sourceMappingURL=climb_c2s.js.map