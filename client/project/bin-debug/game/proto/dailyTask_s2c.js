// Generated by sprotodump. DO NOT EDIT!
var __reflect = (this && this.__reflect) || function (p, c, t) {
    p.__class__ = c, t ? t.push(c) : t = [c], p.__types__ = p.__types__ ? t.concat(p.__types__) : t;
};
var Sproto;
(function (Sproto) {
    var dailyTask_data = (function () {
        function dailyTask_data() {
        }
        return dailyTask_data;
    }());
    Sproto.dailyTask_data = dailyTask_data;
    __reflect(dailyTask_data.prototype, "Sproto.dailyTask_data");
    function _decode_dailyTask_data(d) {
        var o = new dailyTask_data;
        var t = -1;
        while (-1 != (t = d.rt())) {
            switch (t) {
                case 0:
                    o.no = d.ri();
                    break;
                case 1:
                    o.num = d.ri();
                    break;
                default:
                    d.nod();
                    break;
            }
        }
        return o;
    }
    function _encode_dailyTask_data(self, st) {
        var se = Sproto.SprotoCore.GetSerialize(st, 2);
        if (self.no != undefined) {
            se.wi(self.no, 0);
        }
        if (self.num != undefined) {
            se.wi(self.num, 1);
        }
        return Sproto.SprotoCore.CloseSerialize(se);
    }
    Sproto.ALL_DICT["dailyTask_data"] = { en: _encode_dailyTask_data, de: _decode_dailyTask_data };
    var otherActivity_data = (function () {
        function otherActivity_data() {
        }
        return otherActivity_data;
    }());
    Sproto.otherActivity_data = otherActivity_data;
    __reflect(otherActivity_data.prototype, "Sproto.otherActivity_data");
    function _decode_otherActivity_data(d) {
        var o = new otherActivity_data;
        var t = -1;
        while (-1 != (t = d.rt())) {
            switch (t) {
                case 0:
                    o.num = d.ri();
                    break;
                case 1:
                    o.reward = d.ri();
                    break;
                default:
                    d.nod();
                    break;
            }
        }
        return o;
    }
    function _encode_otherActivity_data(self, st) {
        var se = Sproto.SprotoCore.GetSerialize(st, 2);
        if (self.num != undefined) {
            se.wi(self.num, 0);
        }
        if (self.reward != undefined) {
            se.wi(self.reward, 1);
        }
        return Sproto.SprotoCore.CloseSerialize(se);
    }
    Sproto.ALL_DICT["otherActivity_data"] = { en: _encode_otherActivity_data, de: _decode_otherActivity_data };
    var otherActivity_monster = (function () {
        function otherActivity_monster() {
        }
        return otherActivity_monster;
    }());
    Sproto.otherActivity_monster = otherActivity_monster;
    __reflect(otherActivity_monster.prototype, "Sproto.otherActivity_monster");
    function _decode_otherActivity_monster(d) {
        var o = new otherActivity_monster;
        var t = -1;
        while (-1 != (t = d.rt())) {
            switch (t) {
                case 0:
                    o.monsterList = d.ria();
                    break;
                case 1:
                    o.num = d.ri();
                    break;
                case 2:
                    o.time = d.ri();
                    break;
                case 3:
                    o.reward = d.ri();
                    break;
                default:
                    d.nod();
                    break;
            }
        }
        return o;
    }
    function _encode_otherActivity_monster(self, st) {
        var se = Sproto.SprotoCore.GetSerialize(st, 4);
        if (self.monsterList != undefined) {
            se.wia(self.monsterList, 0);
        }
        if (self.num != undefined) {
            se.wi(self.num, 1);
        }
        if (self.time != undefined) {
            se.wi(self.time, 2);
        }
        if (self.reward != undefined) {
            se.wi(self.reward, 3);
        }
        return Sproto.SprotoCore.CloseSerialize(se);
    }
    Sproto.ALL_DICT["otherActivity_monster"] = { en: _encode_otherActivity_monster, de: _decode_otherActivity_monster };
    var sc_dailyTask_info_request = (function () {
        function sc_dailyTask_info_request() {
        }
        return sc_dailyTask_info_request;
    }());
    Sproto.sc_dailyTask_info_request = sc_dailyTask_info_request;
    __reflect(sc_dailyTask_info_request.prototype, "Sproto.sc_dailyTask_info_request");
    function _decode_sc_dailyTask_info_request(d) {
        var o = new sc_dailyTask_info_request;
        var t = -1;
        while (-1 != (t = d.rt())) {
            switch (t) {
                case 0:
                    o.lv = d.ri();
                    break;
                case 1:
                    o.exp = d.ri();
                    break;
                case 2:
                    o.today = d.roa("dailyTask_data");
                    break;
                case 3:
                    o.yesterday = d.roa("dailyTask_data");
                    break;
                case 4:
                    o.findItem = d.roa("dailyTask_data");
                    break;
                case 5:
                    o.findExp = d.roa("dailyTask_data");
                    break;
                case 6:
                    o.active = d.ri();
                    break;
                case 7:
                    o.activeReward = d.ri();
                    break;
                case 8:
                    o.monster = d.ro("otherActivity_monster");
                    break;
                case 9:
                    o.chapterWar = d.ro("otherActivity_data");
                    break;
                case 10:
                    o.teamFB = d.ro("otherActivity_data");
                    break;
                case 11:
                    o.find = d.ri();
                    break;
                default:
                    d.nod();
                    break;
            }
        }
        return o;
    }
    function _encode_sc_dailyTask_info_request(self, st) {
        var se = Sproto.SprotoCore.GetSerialize(st, 12);
        if (self.lv != undefined) {
            se.wi(self.lv, 0);
        }
        if (self.exp != undefined) {
            se.wi(self.exp, 1);
        }
        if (self.today != undefined) {
            se.woa("dailyTask_data", self.today, 2);
        }
        if (self.yesterday != undefined) {
            se.woa("dailyTask_data", self.yesterday, 3);
        }
        if (self.findItem != undefined) {
            se.woa("dailyTask_data", self.findItem, 4);
        }
        if (self.findExp != undefined) {
            se.woa("dailyTask_data", self.findExp, 5);
        }
        if (self.active != undefined) {
            se.wi(self.active, 6);
        }
        if (self.activeReward != undefined) {
            se.wi(self.activeReward, 7);
        }
        if (self.monster != undefined) {
            se.wo("otherActivity_monster", self.monster, 8);
        }
        if (self.chapterWar != undefined) {
            se.wo("otherActivity_data", self.chapterWar, 9);
        }
        if (self.teamFB != undefined) {
            se.wo("otherActivity_data", self.teamFB, 10);
        }
        if (self.find != undefined) {
            se.wi(self.find, 11);
        }
        return Sproto.SprotoCore.CloseSerialize(se);
    }
    Sproto.ALL_DICT["sc_dailyTask_info_request"] = { en: _encode_sc_dailyTask_info_request, de: _decode_sc_dailyTask_info_request };
    var sc_dailyTask_update_request = (function () {
        function sc_dailyTask_update_request() {
        }
        return sc_dailyTask_update_request;
    }());
    Sproto.sc_dailyTask_update_request = sc_dailyTask_update_request;
    __reflect(sc_dailyTask_update_request.prototype, "Sproto.sc_dailyTask_update_request");
    function _decode_sc_dailyTask_update_request(d) {
        var o = new sc_dailyTask_update_request;
        var t = -1;
        while (-1 != (t = d.rt())) {
            switch (t) {
                case 0:
                    o.lv = d.ri();
                    break;
                case 1:
                    o.exp = d.ri();
                    break;
                case 2:
                    o.today = d.roa("dailyTask_data");
                    break;
                case 3:
                    o.yesterday = d.roa("dailyTask_data");
                    break;
                case 4:
                    o.findItem = d.roa("dailyTask_data");
                    break;
                case 5:
                    o.findExp = d.roa("dailyTask_data");
                    break;
                case 6:
                    o.active = d.ri();
                    break;
                case 7:
                    o.activeReward = d.ri();
                    break;
                case 8:
                    o.monster = d.ro("otherActivity_monster");
                    break;
                case 9:
                    o.chapterWar = d.ro("otherActivity_data");
                    break;
                case 10:
                    o.teamFB = d.ro("otherActivity_data");
                    break;
                case 11:
                    o.find = d.ri();
                    break;
                default:
                    d.nod();
                    break;
            }
        }
        return o;
    }
    function _encode_sc_dailyTask_update_request(self, st) {
        var se = Sproto.SprotoCore.GetSerialize(st, 12);
        if (self.lv != undefined) {
            se.wi(self.lv, 0);
        }
        if (self.exp != undefined) {
            se.wi(self.exp, 1);
        }
        if (self.today != undefined) {
            se.woa("dailyTask_data", self.today, 2);
        }
        if (self.yesterday != undefined) {
            se.woa("dailyTask_data", self.yesterday, 3);
        }
        if (self.findItem != undefined) {
            se.woa("dailyTask_data", self.findItem, 4);
        }
        if (self.findExp != undefined) {
            se.woa("dailyTask_data", self.findExp, 5);
        }
        if (self.active != undefined) {
            se.wi(self.active, 6);
        }
        if (self.activeReward != undefined) {
            se.wi(self.activeReward, 7);
        }
        if (self.monster != undefined) {
            se.wo("otherActivity_monster", self.monster, 8);
        }
        if (self.chapterWar != undefined) {
            se.wo("otherActivity_data", self.chapterWar, 9);
        }
        if (self.teamFB != undefined) {
            se.wo("otherActivity_data", self.teamFB, 10);
        }
        if (self.find != undefined) {
            se.wi(self.find, 11);
        }
        return Sproto.SprotoCore.CloseSerialize(se);
    }
    Sproto.ALL_DICT["sc_dailyTask_update_request"] = { en: _encode_sc_dailyTask_update_request, de: _decode_sc_dailyTask_update_request };
})(Sproto || (Sproto = {}));
//# sourceMappingURL=dailyTask_s2c.js.map