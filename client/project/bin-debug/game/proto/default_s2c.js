// Generated by sprotodump. DO NOT EDIT!
var __reflect = (this && this.__reflect) || function (p, c, t) {
    p.__class__ = c, t ? t.push(c) : t = [c], p.__types__ = p.__types__ ? t.concat(p.__types__) : t;
};
var Sproto;
(function (Sproto) {
    var actor_die_notice_request = (function () {
        function actor_die_notice_request() {
        }
        return actor_die_notice_request;
    }());
    Sproto.actor_die_notice_request = actor_die_notice_request;
    __reflect(actor_die_notice_request.prototype, "Sproto.actor_die_notice_request");
    function _decode_actor_die_notice_request(d) {
        var o = new actor_die_notice_request;
        var t = -1;
        while (-1 != (t = d.rt())) {
            switch (t) {
                default:
                    d.nod();
                    break;
            }
        }
        return o;
    }
    function _encode_actor_die_notice_request(self, st) {
        var se = Sproto.SprotoCore.GetSerialize(st, 0);
        return Sproto.SprotoCore.CloseSerialize(se);
    }
    Sproto.ALL_DICT["actor_die_notice_request"] = { en: _encode_actor_die_notice_request, de: _decode_actor_die_notice_request };
    var blood_update_request = (function () {
        function blood_update_request() {
        }
        return blood_update_request;
    }());
    Sproto.blood_update_request = blood_update_request;
    __reflect(blood_update_request.prototype, "Sproto.blood_update_request");
    function _decode_blood_update_request(d) {
        var o = new blood_update_request;
        var t = -1;
        while (-1 != (t = d.rt())) {
            switch (t) {
                case 0:
                    o.handle = d.ri();
                    break;
                case 1:
                    o.hp = d.ri();
                    break;
                case 2:
                    o.dhp = d.ri();
                    break;
                case 3:
                    o.showType = d.ri();
                    break;
                default:
                    d.nod();
                    break;
            }
        }
        return o;
    }
    function _encode_blood_update_request(self, st) {
        var se = Sproto.SprotoCore.GetSerialize(st, 4);
        if (self.handle != undefined) {
            se.wi(self.handle, 0);
        }
        if (self.hp != undefined) {
            se.wi(self.hp, 1);
        }
        if (self.dhp != undefined) {
            se.wi(self.dhp, 2);
        }
        if (self.showType != undefined) {
            se.wi(self.showType, 3);
        }
        return Sproto.SprotoCore.CloseSerialize(se);
    }
    Sproto.ALL_DICT["blood_update_request"] = { en: _encode_blood_update_request, de: _decode_blood_update_request };
    var entity_model_base = (function () {
        function entity_model_base() {
        }
        return entity_model_base;
    }());
    Sproto.entity_model_base = entity_model_base;
    __reflect(entity_model_base.prototype, "Sproto.entity_model_base");
    function _decode_entity_model_base(d) {
        var o = new entity_model_base;
        var t = -1;
        while (-1 != (t = d.rt())) {
            switch (t) {
                case 0:
                    o.type = d.ri();
                    break;
                case 1:
                    o.handle = d.ri();
                    break;
                case 2:
                    o.configID = d.ri();
                    break;
                case 3:
                    o.masterHandle = d.ri();
                    break;
                case 4:
                    o.x = d.ri();
                    break;
                case 5:
                    o.y = d.ri();
                    break;
                default:
                    d.nod();
                    break;
            }
        }
        return o;
    }
    function _encode_entity_model_base(self, st) {
        var se = Sproto.SprotoCore.GetSerialize(st, 6);
        if (self.type != undefined) {
            se.wi(self.type, 0);
        }
        if (self.handle != undefined) {
            se.wi(self.handle, 1);
        }
        if (self.configID != undefined) {
            se.wi(self.configID, 2);
        }
        if (self.masterHandle != undefined) {
            se.wi(self.masterHandle, 3);
        }
        if (self.x != undefined) {
            se.wi(self.x, 4);
        }
        if (self.y != undefined) {
            se.wi(self.y, 5);
        }
        return Sproto.SprotoCore.CloseSerialize(se);
    }
    Sproto.ALL_DICT["entity_model_base"] = { en: _encode_entity_model_base, de: _decode_entity_model_base };
    var entity_mp_update_request = (function () {
        function entity_mp_update_request() {
        }
        return entity_mp_update_request;
    }());
    Sproto.entity_mp_update_request = entity_mp_update_request;
    __reflect(entity_mp_update_request.prototype, "Sproto.entity_mp_update_request");
    function _decode_entity_mp_update_request(d) {
        var o = new entity_mp_update_request;
        var t = -1;
        while (-1 != (t = d.rt())) {
            switch (t) {
                case 0:
                    o.handle = d.ri();
                    break;
                case 1:
                    o.mp = d.ri();
                    break;
                case 3:
                    o.playEff = d.rb();
                    break;
                default:
                    d.nod();
                    break;
            }
        }
        return o;
    }
    function _encode_entity_mp_update_request(self, st) {
        var se = Sproto.SprotoCore.GetSerialize(st, 4);
        if (self.handle != undefined) {
            se.wi(self.handle, 0);
        }
        if (self.mp != undefined) {
            se.wi(self.mp, 1);
        }
        if (self.playEff != undefined) {
            se.wb(self.playEff, 3);
        }
        return Sproto.SprotoCore.CloseSerialize(se);
    }
    Sproto.ALL_DICT["entity_mp_update_request"] = { en: _encode_entity_mp_update_request, de: _decode_entity_mp_update_request };
    var exp_change_request = (function () {
        function exp_change_request() {
        }
        return exp_change_request;
    }());
    Sproto.exp_change_request = exp_change_request;
    __reflect(exp_change_request.prototype, "Sproto.exp_change_request");
    function _decode_exp_change_request(d) {
        var o = new exp_change_request;
        var t = -1;
        while (-1 != (t = d.rt())) {
            switch (t) {
                case 0:
                    o.level = d.ri();
                    break;
                case 1:
                    o.exp = d.ri();
                    break;
                case 2:
                    o.upexp = d.ri();
                    break;
                default:
                    d.nod();
                    break;
            }
        }
        return o;
    }
    function _encode_exp_change_request(self, st) {
        var se = Sproto.SprotoCore.GetSerialize(st, 3);
        if (self.level != undefined) {
            se.wi(self.level, 0);
        }
        if (self.exp != undefined) {
            se.wi(self.exp, 1);
        }
        if (self.upexp != undefined) {
            se.wi(self.upexp, 2);
        }
        return Sproto.SprotoCore.CloseSerialize(se);
    }
    Sproto.ALL_DICT["exp_change_request"] = { en: _encode_exp_change_request, de: _decode_exp_change_request };
    var fb_clear_count = (function () {
        function fb_clear_count() {
        }
        return fb_clear_count;
    }());
    Sproto.fb_clear_count = fb_clear_count;
    __reflect(fb_clear_count.prototype, "Sproto.fb_clear_count");
    function _decode_fb_clear_count(d) {
        var o = new fb_clear_count;
        var t = -1;
        while (-1 != (t = d.rt())) {
            switch (t) {
                case 0:
                    o.level = d.ri();
                    break;
                case 1:
                    o.count = d.ri();
                    break;
                default:
                    d.nod();
                    break;
            }
        }
        return o;
    }
    function _encode_fb_clear_count(self, st) {
        var se = Sproto.SprotoCore.GetSerialize(st, 2);
        if (self.level != undefined) {
            se.wi(self.level, 0);
        }
        if (self.count != undefined) {
            se.wi(self.count, 1);
        }
        return Sproto.SprotoCore.CloseSerialize(se);
    }
    Sproto.ALL_DICT["fb_clear_count"] = { en: _encode_fb_clear_count, de: _decode_fb_clear_count };
    var first_register_request = (function () {
        function first_register_request() {
        }
        return first_register_request;
    }());
    Sproto.first_register_request = first_register_request;
    __reflect(first_register_request.prototype, "Sproto.first_register_request");
    function _decode_first_register_request(d) {
        var o = new first_register_request;
        var t = -1;
        while (-1 != (t = d.rt())) {
            switch (t) {
                default:
                    d.nod();
                    break;
            }
        }
        return o;
    }
    function _encode_first_register_request(self, st) {
        var se = Sproto.SprotoCore.GetSerialize(st, 0);
        return Sproto.SprotoCore.CloseSerialize(se);
    }
    Sproto.ALL_DICT["first_register_request"] = { en: _encode_first_register_request, de: _decode_first_register_request };
    var gold_change_request = (function () {
        function gold_change_request() {
        }
        return gold_change_request;
    }());
    Sproto.gold_change_request = gold_change_request;
    __reflect(gold_change_request.prototype, "Sproto.gold_change_request");
    function _decode_gold_change_request(d) {
        var o = new gold_change_request;
        var t = -1;
        while (-1 != (t = d.rt())) {
            switch (t) {
                case 0:
                    o.type = d.ri();
                    break;
                case 1:
                    o.value = d.ri();
                    break;
                default:
                    d.nod();
                    break;
            }
        }
        return o;
    }
    function _encode_gold_change_request(self, st) {
        var se = Sproto.SprotoCore.GetSerialize(st, 2);
        if (self.type != undefined) {
            se.wi(self.type, 0);
        }
        if (self.value != undefined) {
            se.wi(self.value, 1);
        }
        return Sproto.SprotoCore.CloseSerialize(se);
    }
    Sproto.ALL_DICT["gold_change_request"] = { en: _encode_gold_change_request, de: _decode_gold_change_request };
    var move_entity_request = (function () {
        function move_entity_request() {
        }
        return move_entity_request;
    }());
    Sproto.move_entity_request = move_entity_request;
    __reflect(move_entity_request.prototype, "Sproto.move_entity_request");
    function _decode_move_entity_request(d) {
        var o = new move_entity_request;
        var t = -1;
        while (-1 != (t = d.rt())) {
            switch (t) {
                case 0:
                    o.handle = d.ri();
                    break;
                case 1:
                    o.endX = d.ri();
                    break;
                case 2:
                    o.endY = d.ri();
                    break;
                default:
                    d.nod();
                    break;
            }
        }
        return o;
    }
    function _encode_move_entity_request(self, st) {
        var se = Sproto.SprotoCore.GetSerialize(st, 3);
        if (self.handle != undefined) {
            se.wi(self.handle, 0);
        }
        if (self.endX != undefined) {
            se.wi(self.endX, 1);
        }
        if (self.endY != undefined) {
            se.wi(self.endY, 2);
        }
        return Sproto.SprotoCore.CloseSerialize(se);
    }
    Sproto.ALL_DICT["move_entity_request"] = { en: _encode_move_entity_request, de: _decode_move_entity_request };
    var player_guild_change_request = (function () {
        function player_guild_change_request() {
        }
        return player_guild_change_request;
    }());
    Sproto.player_guild_change_request = player_guild_change_request;
    __reflect(player_guild_change_request.prototype, "Sproto.player_guild_change_request");
    function _decode_player_guild_change_request(d) {
        var o = new player_guild_change_request;
        var t = -1;
        while (-1 != (t = d.rt())) {
            switch (t) {
                case 0:
                    o.guildID = d.ri();
                    break;
                case 1:
                    o.guildName = d.rs();
                    break;
                default:
                    d.nod();
                    break;
            }
        }
        return o;
    }
    function _encode_player_guild_change_request(self, st) {
        var se = Sproto.SprotoCore.GetSerialize(st, 2);
        if (self.guildID != undefined) {
            se.wi(self.guildID, 0);
        }
        if (self.guildName != undefined) {
            se.ws(self.guildName, 1);
        }
        return Sproto.SprotoCore.CloseSerialize(se);
    }
    Sproto.ALL_DICT["player_guild_change_request"] = { en: _encode_player_guild_change_request, de: _decode_player_guild_change_request };
    var record_data = (function () {
        function record_data() {
        }
        return record_data;
    }());
    Sproto.record_data = record_data;
    __reflect(record_data.prototype, "Sproto.record_data");
    function _decode_record_data(d) {
        var o = new record_data;
        var t = -1;
        while (-1 != (t = d.rt())) {
            switch (t) {
                case 0:
                    o.name = d.rs();
                    break;
                case 1:
                    o.itemid = d.ri();
                    break;
                case 2:
                    o.count = d.ri();
                    break;
                case 3:
                    o.type = d.ri();
                    break;
                case 4:
                    o.str = d.rs();
                    break;
                case 5:
                    o.time = d.ri();
                    break;
                case 6:
                    o.id = d.ri();
                    break;
                case 7:
                    o.serverid = d.ri();
                    break;
                case 8:
                    o.job = d.ri();
                    break;
                case 9:
                    o.sex = d.ri();
                    break;
                case 10:
                    o.vip = d.ri();
                    break;
                default:
                    d.nod();
                    break;
            }
        }
        return o;
    }
    function _encode_record_data(self, st) {
        var se = Sproto.SprotoCore.GetSerialize(st, 11);
        if (self.name != undefined) {
            se.ws(self.name, 0);
        }
        if (self.itemid != undefined) {
            se.wi(self.itemid, 1);
        }
        if (self.count != undefined) {
            se.wi(self.count, 2);
        }
        if (self.type != undefined) {
            se.wi(self.type, 3);
        }
        if (self.str != undefined) {
            se.ws(self.str, 4);
        }
        if (self.time != undefined) {
            se.wi(self.time, 5);
        }
        if (self.id != undefined) {
            se.wi(self.id, 6);
        }
        if (self.serverid != undefined) {
            se.wi(self.serverid, 7);
        }
        if (self.job != undefined) {
            se.wi(self.job, 8);
        }
        if (self.sex != undefined) {
            se.wi(self.sex, 9);
        }
        if (self.vip != undefined) {
            se.wi(self.vip, 10);
        }
        return Sproto.SprotoCore.CloseSerialize(se);
    }
    Sproto.ALL_DICT["record_data"] = { en: _encode_record_data, de: _decode_record_data };
    var remove_entity_request = (function () {
        function remove_entity_request() {
        }
        return remove_entity_request;
    }());
    Sproto.remove_entity_request = remove_entity_request;
    __reflect(remove_entity_request.prototype, "Sproto.remove_entity_request");
    function _decode_remove_entity_request(d) {
        var o = new remove_entity_request;
        var t = -1;
        while (-1 != (t = d.rt())) {
            switch (t) {
                case 0:
                    o.handle = d.ri();
                    break;
                case 1:
                    o.type = d.ri();
                    break;
                default:
                    d.nod();
                    break;
            }
        }
        return o;
    }
    function _encode_remove_entity_request(self, st) {
        var se = Sproto.SprotoCore.GetSerialize(st, 2);
        if (self.handle != undefined) {
            se.wi(self.handle, 0);
        }
        if (self.type != undefined) {
            se.wi(self.type, 1);
        }
        return Sproto.SprotoCore.CloseSerialize(se);
    }
    Sproto.ALL_DICT["remove_entity_request"] = { en: _encode_remove_entity_request, de: _decode_remove_entity_request };
    var sc_accu_login_request = (function () {
        function sc_accu_login_request() {
        }
        return sc_accu_login_request;
    }());
    Sproto.sc_accu_login_request = sc_accu_login_request;
    __reflect(sc_accu_login_request.prototype, "Sproto.sc_accu_login_request");
    function _decode_sc_accu_login_request(d) {
        var o = new sc_accu_login_request;
        var t = -1;
        while (-1 != (t = d.rt())) {
            switch (t) {
                case 0:
                    o.count = d.ri();
                    break;
                case 1:
                    o.record = d.ri();
                    break;
                default:
                    d.nod();
                    break;
            }
        }
        return o;
    }
    function _encode_sc_accu_login_request(self, st) {
        var se = Sproto.SprotoCore.GetSerialize(st, 2);
        if (self.count != undefined) {
            se.wi(self.count, 0);
        }
        if (self.record != undefined) {
            se.wi(self.record, 1);
        }
        return Sproto.SprotoCore.CloseSerialize(se);
    }
    Sproto.ALL_DICT["sc_accu_login_request"] = { en: _encode_sc_accu_login_request, de: _decode_sc_accu_login_request };
    var sc_actor_base_request = (function () {
        function sc_actor_base_request() {
        }
        return sc_actor_base_request;
    }());
    Sproto.sc_actor_base_request = sc_actor_base_request;
    __reflect(sc_actor_base_request.prototype, "Sproto.sc_actor_base_request");
    function _decode_sc_actor_base_request(d) {
        var o = new sc_actor_base_request;
        var t = -1;
        while (-1 != (t = d.rt())) {
            switch (t) {
                case 0:
                    o.handle = d.ri();
                    break;
                case 1:
                    o.actorid = d.ri();
                    break;
                case 2:
                    o.serverid = d.ri();
                    break;
                case 3:
                    o.actorname = d.rs();
                    break;
                case 4:
                    o.job = d.ri();
                    break;
                case 5:
                    o.sex = d.ri();
                    break;
                case 6:
                    o.level = d.ri();
                    break;
                case 7:
                    o.exp = d.ri();
                    break;
                case 8:
                    o.power = d.ri();
                    break;
                case 9:
                    o.gold = d.ri();
                    break;
                case 10:
                    o.yuanbao = d.ri();
                    break;
                case 11:
                    o.byb = d.ri();
                    break;
                case 12:
                    o.contrib = d.ri();
                    break;
                case 13:
                    o.vip = d.ri();
                    break;
                case 14:
                    o.bagnum = d.ri();
                    break;
                case 15:
                    o.clientvalue = d.ri();
                    break;
                case 16:
                    o.clientvaluelist = d.ria();
                    break;
                case 17:
                    o.guildid = d.ri();
                    break;
                case 18:
                    o.guildname = d.rs();
                    break;
                case 19:
                    o.friendcoin = d.ri();
                    break;
                default:
                    d.nod();
                    break;
            }
        }
        return o;
    }
    function _encode_sc_actor_base_request(self, st) {
        var se = Sproto.SprotoCore.GetSerialize(st, 20);
        if (self.handle != undefined) {
            se.wi(self.handle, 0);
        }
        if (self.actorid != undefined) {
            se.wi(self.actorid, 1);
        }
        if (self.serverid != undefined) {
            se.wi(self.serverid, 2);
        }
        if (self.actorname != undefined) {
            se.ws(self.actorname, 3);
        }
        if (self.job != undefined) {
            se.wi(self.job, 4);
        }
        if (self.sex != undefined) {
            se.wi(self.sex, 5);
        }
        if (self.level != undefined) {
            se.wi(self.level, 6);
        }
        if (self.exp != undefined) {
            se.wi(self.exp, 7);
        }
        if (self.power != undefined) {
            se.wi(self.power, 8);
        }
        if (self.gold != undefined) {
            se.wi(self.gold, 9);
        }
        if (self.yuanbao != undefined) {
            se.wi(self.yuanbao, 10);
        }
        if (self.byb != undefined) {
            se.wi(self.byb, 11);
        }
        if (self.contrib != undefined) {
            se.wi(self.contrib, 12);
        }
        if (self.vip != undefined) {
            se.wi(self.vip, 13);
        }
        if (self.bagnum != undefined) {
            se.wi(self.bagnum, 14);
        }
        if (self.clientvalue != undefined) {
            se.wi(self.clientvalue, 15);
        }
        if (self.clientvaluelist != undefined) {
            se.wia(self.clientvaluelist, 16);
        }
        if (self.guildid != undefined) {
            se.wi(self.guildid, 17);
        }
        if (self.guildname != undefined) {
            se.ws(self.guildname, 18);
        }
        if (self.friendcoin != undefined) {
            se.wi(self.friendcoin, 19);
        }
        return Sproto.SprotoCore.CloseSerialize(se);
    }
    Sproto.ALL_DICT["sc_actor_base_request"] = { en: _encode_sc_actor_base_request, de: _decode_sc_actor_base_request };
    var sc_cross_team_reward_count_request = (function () {
        function sc_cross_team_reward_count_request() {
        }
        return sc_cross_team_reward_count_request;
    }());
    Sproto.sc_cross_team_reward_count_request = sc_cross_team_reward_count_request;
    __reflect(sc_cross_team_reward_count_request.prototype, "Sproto.sc_cross_team_reward_count_request");
    function _decode_sc_cross_team_reward_count_request(d) {
        var o = new sc_cross_team_reward_count_request;
        var t = -1;
        while (-1 != (t = d.rt())) {
            switch (t) {
                case 0:
                    o.count = d.ri();
                    break;
                case 1:
                    o.clear = d.roa("fb_clear_count");
                    break;
                default:
                    d.nod();
                    break;
            }
        }
        return o;
    }
    function _encode_sc_cross_team_reward_count_request(self, st) {
        var se = Sproto.SprotoCore.GetSerialize(st, 2);
        if (self.count != undefined) {
            se.wi(self.count, 0);
        }
        if (self.clear != undefined) {
            se.woa("fb_clear_count", self.clear, 1);
        }
        return Sproto.SprotoCore.CloseSerialize(se);
    }
    Sproto.ALL_DICT["sc_cross_team_reward_count_request"] = { en: _encode_sc_cross_team_reward_count_request, de: _decode_sc_cross_team_reward_count_request };
    var sc_other_baby_request = (function () {
        function sc_other_baby_request() {
        }
        return sc_other_baby_request;
    }());
    Sproto.sc_other_baby_request = sc_other_baby_request;
    __reflect(sc_other_baby_request.prototype, "Sproto.sc_other_baby_request");
    function _decode_sc_other_baby_request(d) {
        var o = new sc_other_baby_request;
        var t = -1;
        while (-1 != (t = d.rt())) {
            switch (t) {
                case 0:
                    o.baby = d.ro("baby_data");
                    break;
                case 1:
                    o.babyid = d.ri();
                    break;
                default:
                    d.nod();
                    break;
            }
        }
        return o;
    }
    function _encode_sc_other_baby_request(self, st) {
        var se = Sproto.SprotoCore.GetSerialize(st, 2);
        if (self.baby != undefined) {
            se.wo("baby_data", self.baby, 0);
        }
        if (self.babyid != undefined) {
            se.wi(self.babyid, 1);
        }
        return Sproto.SprotoCore.CloseSerialize(se);
    }
    Sproto.ALL_DICT["sc_other_baby_request"] = { en: _encode_sc_other_baby_request, de: _decode_sc_other_baby_request };
    var sc_other_equip_request = (function () {
        function sc_other_equip_request() {
        }
        return sc_other_equip_request;
    }());
    Sproto.sc_other_equip_request = sc_other_equip_request;
    __reflect(sc_other_equip_request.prototype, "Sproto.sc_other_equip_request");
    function _decode_sc_other_equip_request(d) {
        var o = new sc_other_equip_request;
        var t = -1;
        while (-1 != (t = d.rt())) {
            switch (t) {
                case 0:
                    o.data = d.ro("equip_data");
                    break;
                case 1:
                    o.slot = d.ri();
                    break;
                default:
                    d.nod();
                    break;
            }
        }
        return o;
    }
    function _encode_sc_other_equip_request(self, st) {
        var se = Sproto.SprotoCore.GetSerialize(st, 2);
        if (self.data != undefined) {
            se.wo("equip_data", self.data, 0);
        }
        if (self.slot != undefined) {
            se.wi(self.slot, 1);
        }
        return Sproto.SprotoCore.CloseSerialize(se);
    }
    Sproto.ALL_DICT["sc_other_equip_request"] = { en: _encode_sc_other_equip_request, de: _decode_sc_other_equip_request };
    var sc_other_item_request = (function () {
        function sc_other_item_request() {
        }
        return sc_other_item_request;
    }());
    Sproto.sc_other_item_request = sc_other_item_request;
    __reflect(sc_other_item_request.prototype, "Sproto.sc_other_item_request");
    function _decode_sc_other_item_request(d) {
        var o = new sc_other_item_request;
        var t = -1;
        while (-1 != (t = d.rt())) {
            switch (t) {
                case 0:
                    o.data = d.ro("item_data");
                    break;
                case 1:
                    o.itemhandle = d.ri();
                    break;
                default:
                    d.nod();
                    break;
            }
        }
        return o;
    }
    function _encode_sc_other_item_request(self, st) {
        var se = Sproto.SprotoCore.GetSerialize(st, 2);
        if (self.data != undefined) {
            se.wo("item_data", self.data, 0);
        }
        if (self.itemhandle != undefined) {
            se.wi(self.itemhandle, 1);
        }
        return Sproto.SprotoCore.CloseSerialize(se);
    }
    Sproto.ALL_DICT["sc_other_item_request"] = { en: _encode_sc_other_item_request, de: _decode_sc_other_item_request };
    var sc_other_xianlv_request = (function () {
        function sc_other_xianlv_request() {
        }
        return sc_other_xianlv_request;
    }());
    Sproto.sc_other_xianlv_request = sc_other_xianlv_request;
    __reflect(sc_other_xianlv_request.prototype, "Sproto.sc_other_xianlv_request");
    function _decode_sc_other_xianlv_request(d) {
        var o = new sc_other_xianlv_request;
        var t = -1;
        while (-1 != (t = d.rt())) {
            switch (t) {
                case 0:
                    o.id = d.ri();
                    break;
                case 1:
                    o.level = d.ri();
                    break;
                case 2:
                    o.star = d.ri();
                    break;
                default:
                    d.nod();
                    break;
            }
        }
        return o;
    }
    function _encode_sc_other_xianlv_request(self, st) {
        var se = Sproto.SprotoCore.GetSerialize(st, 3);
        if (self.id != undefined) {
            se.wi(self.id, 0);
        }
        if (self.level != undefined) {
            se.wi(self.level, 1);
        }
        if (self.star != undefined) {
            se.wi(self.star, 2);
        }
        return Sproto.SprotoCore.CloseSerialize(se);
    }
    Sproto.ALL_DICT["sc_other_xianlv_request"] = { en: _encode_sc_other_xianlv_request, de: _decode_sc_other_xianlv_request };
    var sc_rank_worship_request = (function () {
        function sc_rank_worship_request() {
        }
        return sc_rank_worship_request;
    }());
    Sproto.sc_rank_worship_request = sc_rank_worship_request;
    __reflect(sc_rank_worship_request.prototype, "Sproto.sc_rank_worship_request");
    function _decode_sc_rank_worship_request(d) {
        var o = new sc_rank_worship_request;
        var t = -1;
        while (-1 != (t = d.rt())) {
            switch (t) {
                case 0:
                    o.status = d.ri();
                    break;
                default:
                    d.nod();
                    break;
            }
        }
        return o;
    }
    function _encode_sc_rank_worship_request(self, st) {
        var se = Sproto.SprotoCore.GetSerialize(st, 1);
        if (self.status != undefined) {
            se.wi(self.status, 0);
        }
        return Sproto.SprotoCore.CloseSerialize(se);
    }
    Sproto.ALL_DICT["sc_rank_worship_request"] = { en: _encode_sc_rank_worship_request, de: _decode_sc_rank_worship_request };
    var sc_recharge_count_request = (function () {
        function sc_recharge_count_request() {
        }
        return sc_recharge_count_request;
    }());
    Sproto.sc_recharge_count_request = sc_recharge_count_request;
    __reflect(sc_recharge_count_request.prototype, "Sproto.sc_recharge_count_request");
    function _decode_sc_recharge_count_request(d) {
        var o = new sc_recharge_count_request;
        var t = -1;
        while (-1 != (t = d.rt())) {
            switch (t) {
                case 0:
                    o.total = d.ri();
                    break;
                case 1:
                    o.today = d.ri();
                    break;
                default:
                    d.nod();
                    break;
            }
        }
        return o;
    }
    function _encode_sc_recharge_count_request(self, st) {
        var se = Sproto.SprotoCore.GetSerialize(st, 2);
        if (self.total != undefined) {
            se.wi(self.total, 0);
        }
        if (self.today != undefined) {
            se.wi(self.today, 1);
        }
        return Sproto.SprotoCore.CloseSerialize(se);
    }
    Sproto.ALL_DICT["sc_recharge_count_request"] = { en: _encode_sc_recharge_count_request, de: _decode_sc_recharge_count_request };
    var sc_record_add_request = (function () {
        function sc_record_add_request() {
        }
        return sc_record_add_request;
    }());
    Sproto.sc_record_add_request = sc_record_add_request;
    __reflect(sc_record_add_request.prototype, "Sproto.sc_record_add_request");
    function _decode_sc_record_add_request(d) {
        var o = new sc_record_add_request;
        var t = -1;
        while (-1 != (t = d.rt())) {
            switch (t) {
                case 0:
                    o.type = d.ri();
                    break;
                case 1:
                    o.record = d.ro("record_data");
                    break;
                default:
                    d.nod();
                    break;
            }
        }
        return o;
    }
    function _encode_sc_record_add_request(self, st) {
        var se = Sproto.SprotoCore.GetSerialize(st, 2);
        if (self.type != undefined) {
            se.wi(self.type, 0);
        }
        if (self.record != undefined) {
            se.wo("record_data", self.record, 1);
        }
        return Sproto.SprotoCore.CloseSerialize(se);
    }
    Sproto.ALL_DICT["sc_record_add_request"] = { en: _encode_sc_record_add_request, de: _decode_sc_record_add_request };
    var sc_record_datas_request = (function () {
        function sc_record_datas_request() {
        }
        return sc_record_datas_request;
    }());
    Sproto.sc_record_datas_request = sc_record_datas_request;
    __reflect(sc_record_datas_request.prototype, "Sproto.sc_record_datas_request");
    function _decode_sc_record_datas_request(d) {
        var o = new sc_record_datas_request;
        var t = -1;
        while (-1 != (t = d.rt())) {
            switch (t) {
                case 0:
                    o.type = d.ri();
                    break;
                case 1:
                    o.record = d.roa("record_data");
                    break;
                default:
                    d.nod();
                    break;
            }
        }
        return o;
    }
    function _encode_sc_record_datas_request(self, st) {
        var se = Sproto.SprotoCore.GetSerialize(st, 2);
        if (self.type != undefined) {
            se.wi(self.type, 0);
        }
        if (self.record != undefined) {
            se.woa("record_data", self.record, 1);
        }
        return Sproto.SprotoCore.CloseSerialize(se);
    }
    Sproto.ALL_DICT["sc_record_datas_request"] = { en: _encode_sc_record_datas_request, de: _decode_sc_record_datas_request };
    var sc_rename_count_request = (function () {
        function sc_rename_count_request() {
        }
        return sc_rename_count_request;
    }());
    Sproto.sc_rename_count_request = sc_rename_count_request;
    __reflect(sc_rename_count_request.prototype, "Sproto.sc_rename_count_request");
    function _decode_sc_rename_count_request(d) {
        var o = new sc_rename_count_request;
        var t = -1;
        while (-1 != (t = d.rt())) {
            switch (t) {
                case 0:
                    o.count = d.ri();
                    break;
                default:
                    d.nod();
                    break;
            }
        }
        return o;
    }
    function _encode_sc_rename_count_request(self, st) {
        var se = Sproto.SprotoCore.GetSerialize(st, 1);
        if (self.count != undefined) {
            se.wi(self.count, 0);
        }
        return Sproto.SprotoCore.CloseSerialize(se);
    }
    Sproto.ALL_DICT["sc_rename_count_request"] = { en: _encode_sc_rename_count_request, de: _decode_sc_rename_count_request };
    var sc_rename_result_request = (function () {
        function sc_rename_result_request() {
        }
        return sc_rename_result_request;
    }());
    Sproto.sc_rename_result_request = sc_rename_result_request;
    __reflect(sc_rename_result_request.prototype, "Sproto.sc_rename_result_request");
    function _decode_sc_rename_result_request(d) {
        var o = new sc_rename_result_request;
        var t = -1;
        while (-1 != (t = d.rt())) {
            switch (t) {
                case 0:
                    o.result = d.ri();
                    break;
                case 1:
                    o.name = d.rs();
                    break;
                default:
                    d.nod();
                    break;
            }
        }
        return o;
    }
    function _encode_sc_rename_result_request(self, st) {
        var se = Sproto.SprotoCore.GetSerialize(st, 2);
        if (self.result != undefined) {
            se.wi(self.result, 0);
        }
        if (self.name != undefined) {
            se.ws(self.name, 1);
        }
        return Sproto.SprotoCore.CloseSerialize(se);
    }
    Sproto.ALL_DICT["sc_rename_result_request"] = { en: _encode_sc_rename_result_request, de: _decode_sc_rename_result_request };
    var sc_show_other_pet_request = (function () {
        function sc_show_other_pet_request() {
        }
        return sc_show_other_pet_request;
    }());
    Sproto.sc_show_other_pet_request = sc_show_other_pet_request;
    __reflect(sc_show_other_pet_request.prototype, "Sproto.sc_show_other_pet_request");
    function _decode_sc_show_other_pet_request(d) {
        var o = new sc_show_other_pet_request;
        var t = -1;
        while (-1 != (t = d.rt())) {
            switch (t) {
                case 0:
                    o.pet = d.ro("pet_info");
                    break;
                case 1:
                    o.petid = d.ri();
                    break;
                default:
                    d.nod();
                    break;
            }
        }
        return o;
    }
    function _encode_sc_show_other_pet_request(self, st) {
        var se = Sproto.SprotoCore.GetSerialize(st, 2);
        if (self.pet != undefined) {
            se.wo("pet_info", self.pet, 0);
        }
        if (self.petid != undefined) {
            se.wi(self.petid, 1);
        }
        return Sproto.SprotoCore.CloseSerialize(se);
    }
    Sproto.ALL_DICT["sc_show_other_pet_request"] = { en: _encode_sc_show_other_pet_request, de: _decode_sc_show_other_pet_request };
    var sc_show_other_player_request = (function () {
        function sc_show_other_player_request() {
        }
        return sc_show_other_player_request;
    }());
    Sproto.sc_show_other_player_request = sc_show_other_player_request;
    __reflect(sc_show_other_player_request.prototype, "Sproto.sc_show_other_player_request");
    function _decode_sc_show_other_player_request(d) {
        var o = new sc_show_other_player_request;
        var t = -1;
        while (-1 != (t = d.rt())) {
            switch (t) {
                case 0:
                    o.id = d.ri();
                    break;
                case 1:
                    o.name = d.rs();
                    break;
                case 2:
                    o.level = d.ri();
                    break;
                case 3:
                    o.job = d.ri();
                    break;
                case 4:
                    o.sex = d.ri();
                    break;
                case 5:
                    o.power = d.ri();
                    break;
                case 6:
                    o.vip = d.ri();
                    break;
                case 7:
                    o.guildName = d.rs();
                    break;
                case 8:
                    o.partner = d.rs();
                    break;
                case 9:
                    o.petList = d.ria();
                    break;
                case 10:
                    o.xianlvList = d.ria();
                    break;
                case 11:
                    o.shows = d.ria();
                    break;
                case 12:
                    o.attributeData = d.ria();
                    break;
                case 13:
                    o.equipsData = d.roa("equip_data");
                    break;
                case 14:
                    o.headframe = d.ri();
                    break;
                default:
                    d.nod();
                    break;
            }
        }
        return o;
    }
    function _encode_sc_show_other_player_request(self, st) {
        var se = Sproto.SprotoCore.GetSerialize(st, 15);
        if (self.id != undefined) {
            se.wi(self.id, 0);
        }
        if (self.name != undefined) {
            se.ws(self.name, 1);
        }
        if (self.level != undefined) {
            se.wi(self.level, 2);
        }
        if (self.job != undefined) {
            se.wi(self.job, 3);
        }
        if (self.sex != undefined) {
            se.wi(self.sex, 4);
        }
        if (self.power != undefined) {
            se.wi(self.power, 5);
        }
        if (self.vip != undefined) {
            se.wi(self.vip, 6);
        }
        if (self.guildName != undefined) {
            se.ws(self.guildName, 7);
        }
        if (self.partner != undefined) {
            se.ws(self.partner, 8);
        }
        if (self.petList != undefined) {
            se.wia(self.petList, 9);
        }
        if (self.xianlvList != undefined) {
            se.wia(self.xianlvList, 10);
        }
        if (self.shows != undefined) {
            se.wia(self.shows, 11);
        }
        if (self.attributeData != undefined) {
            se.wia(self.attributeData, 12);
        }
        if (self.equipsData != undefined) {
            se.woa("equip_data", self.equipsData, 13);
        }
        if (self.headframe != undefined) {
            se.wi(self.headframe, 14);
        }
        return Sproto.SprotoCore.CloseSerialize(se);
    }
    Sproto.ALL_DICT["sc_show_other_player_request"] = { en: _encode_sc_show_other_player_request, de: _decode_sc_show_other_player_request };
    var sc_show_other_spellsRes_request = (function () {
        function sc_show_other_spellsRes_request() {
        }
        return sc_show_other_spellsRes_request;
    }());
    Sproto.sc_show_other_spellsRes_request = sc_show_other_spellsRes_request;
    __reflect(sc_show_other_spellsRes_request.prototype, "Sproto.sc_show_other_spellsRes_request");
    function _decode_sc_show_other_spellsRes_request(d) {
        var o = new sc_show_other_spellsRes_request;
        var t = -1;
        while (-1 != (t = d.rt())) {
            switch (t) {
                case 0:
                    o.spellsNo = d.ri();
                    break;
                case 1:
                    o.lv = d.ri();
                    break;
                default:
                    d.nod();
                    break;
            }
        }
        return o;
    }
    function _encode_sc_show_other_spellsRes_request(self, st) {
        var se = Sproto.SprotoCore.GetSerialize(st, 2);
        if (self.spellsNo != undefined) {
            se.wi(self.spellsNo, 0);
        }
        if (self.lv != undefined) {
            se.wi(self.lv, 1);
        }
        return Sproto.SprotoCore.CloseSerialize(se);
    }
    Sproto.ALL_DICT["sc_show_other_spellsRes_request"] = { en: _encode_sc_show_other_spellsRes_request, de: _decode_sc_show_other_spellsRes_request };
    var sc_show_rank_player_request = (function () {
        function sc_show_rank_player_request() {
        }
        return sc_show_rank_player_request;
    }());
    Sproto.sc_show_rank_player_request = sc_show_rank_player_request;
    __reflect(sc_show_rank_player_request.prototype, "Sproto.sc_show_rank_player_request");
    function _decode_sc_show_rank_player_request(d) {
        var o = new sc_show_rank_player_request;
        var t = -1;
        while (-1 != (t = d.rt())) {
            switch (t) {
                case 0:
                    o.playerData = d.ro("actor_base_data");
                    break;
                case 1:
                    o.roleList = d.roa("role_data");
                    break;
                default:
                    d.nod();
                    break;
            }
        }
        return o;
    }
    function _encode_sc_show_rank_player_request(self, st) {
        var se = Sproto.SprotoCore.GetSerialize(st, 2);
        if (self.playerData != undefined) {
            se.wo("actor_base_data", self.playerData, 0);
        }
        if (self.roleList != undefined) {
            se.woa("role_data", self.roleList, 1);
        }
        return Sproto.SprotoCore.CloseSerialize(se);
    }
    Sproto.ALL_DICT["sc_show_rank_player_request"] = { en: _encode_sc_show_rank_player_request, de: _decode_sc_show_rank_player_request };
    var sc_welcome_request = (function () {
        function sc_welcome_request() {
        }
        return sc_welcome_request;
    }());
    Sproto.sc_welcome_request = sc_welcome_request;
    __reflect(sc_welcome_request.prototype, "Sproto.sc_welcome_request");
    function _decode_sc_welcome_request(d) {
        var o = new sc_welcome_request;
        var t = -1;
        while (-1 != (t = d.rt())) {
            switch (t) {
                default:
                    d.nod();
                    break;
            }
        }
        return o;
    }
    function _encode_sc_welcome_request(self, st) {
        var se = Sproto.SprotoCore.GetSerialize(st, 0);
        return Sproto.SprotoCore.CloseSerialize(se);
    }
    Sproto.ALL_DICT["sc_welcome_request"] = { en: _encode_sc_welcome_request, de: _decode_sc_welcome_request };
    var show_server_tip_request = (function () {
        function show_server_tip_request() {
        }
        return show_server_tip_request;
    }());
    Sproto.show_server_tip_request = show_server_tip_request;
    __reflect(show_server_tip_request.prototype, "Sproto.show_server_tip_request");
    function _decode_show_server_tip_request(d) {
        var o = new show_server_tip_request;
        var t = -1;
        while (-1 != (t = d.rt())) {
            switch (t) {
                case 0:
                    o.type = d.ri();
                    break;
                default:
                    d.nod();
                    break;
            }
        }
        return o;
    }
    function _encode_show_server_tip_request(self, st) {
        var se = Sproto.SprotoCore.GetSerialize(st, 1);
        if (self.type != undefined) {
            se.wi(self.type, 0);
        }
        return Sproto.SprotoCore.CloseSerialize(se);
    }
    Sproto.ALL_DICT["show_server_tip_request"] = { en: _encode_show_server_tip_request, de: _decode_show_server_tip_request };
    var stop_move_entity_request = (function () {
        function stop_move_entity_request() {
        }
        return stop_move_entity_request;
    }());
    Sproto.stop_move_entity_request = stop_move_entity_request;
    __reflect(stop_move_entity_request.prototype, "Sproto.stop_move_entity_request");
    function _decode_stop_move_entity_request(d) {
        var o = new stop_move_entity_request;
        var t = -1;
        while (-1 != (t = d.rt())) {
            switch (t) {
                case 0:
                    o.handle = d.ri();
                    break;
                case 1:
                    o.endX = d.ri();
                    break;
                case 2:
                    o.endY = d.ri();
                    break;
                default:
                    d.nod();
                    break;
            }
        }
        return o;
    }
    function _encode_stop_move_entity_request(self, st) {
        var se = Sproto.SprotoCore.GetSerialize(st, 3);
        if (self.handle != undefined) {
            se.wi(self.handle, 0);
        }
        if (self.endX != undefined) {
            se.wi(self.endX, 1);
        }
        if (self.endY != undefined) {
            se.wi(self.endY, 2);
        }
        return Sproto.SprotoCore.CloseSerialize(se);
    }
    Sproto.ALL_DICT["stop_move_entity_request"] = { en: _encode_stop_move_entity_request, de: _decode_stop_move_entity_request };
    var sub_role_att_change_request = (function () {
        function sub_role_att_change_request() {
        }
        return sub_role_att_change_request;
    }());
    Sproto.sub_role_att_change_request = sub_role_att_change_request;
    __reflect(sub_role_att_change_request.prototype, "Sproto.sub_role_att_change_request");
    function _decode_sub_role_att_change_request(d) {
        var o = new sub_role_att_change_request;
        var t = -1;
        while (-1 != (t = d.rt())) {
            switch (t) {
                case 0:
                    o.roleID = d.ri();
                    break;
                case 1:
                    o.attributeData = d.ria();
                    break;
                case 2:
                    o.power = d.ri();
                    break;
                default:
                    d.nod();
                    break;
            }
        }
        return o;
    }
    function _encode_sub_role_att_change_request(self, st) {
        var se = Sproto.SprotoCore.GetSerialize(st, 3);
        if (self.roleID != undefined) {
            se.wi(self.roleID, 0);
        }
        if (self.attributeData != undefined) {
            se.wia(self.attributeData, 1);
        }
        if (self.power != undefined) {
            se.wi(self.power, 2);
        }
        return Sproto.SprotoCore.CloseSerialize(se);
    }
    Sproto.ALL_DICT["sub_role_att_change_request"] = { en: _encode_sub_role_att_change_request, de: _decode_sub_role_att_change_request };
    var sub_roles_request = (function () {
        function sub_roles_request() {
        }
        return sub_roles_request;
    }());
    Sproto.sub_roles_request = sub_roles_request;
    __reflect(sub_roles_request.prototype, "Sproto.sub_roles_request");
    function _decode_sub_roles_request(d) {
        var o = new sub_roles_request;
        var t = -1;
        while (-1 != (t = d.rt())) {
            switch (t) {
                case 1:
                    o.roleList = d.ro("role_data");
                    break;
                default:
                    d.nod();
                    break;
            }
        }
        return o;
    }
    function _encode_sub_roles_request(self, st) {
        var se = Sproto.SprotoCore.GetSerialize(st, 2);
        if (self.roleList != undefined) {
            se.wo("role_data", self.roleList, 1);
        }
        return Sproto.SprotoCore.CloseSerialize(se);
    }
    Sproto.ALL_DICT["sub_roles_request"] = { en: _encode_sub_roles_request, de: _decode_sub_roles_request };
    var sync_entity_pos_request = (function () {
        function sync_entity_pos_request() {
        }
        return sync_entity_pos_request;
    }());
    Sproto.sync_entity_pos_request = sync_entity_pos_request;
    __reflect(sync_entity_pos_request.prototype, "Sproto.sync_entity_pos_request");
    function _decode_sync_entity_pos_request(d) {
        var o = new sync_entity_pos_request;
        var t = -1;
        while (-1 != (t = d.rt())) {
            switch (t) {
                case 0:
                    o.handle = d.ri();
                    break;
                case 1:
                    o.type = d.ri();
                    break;
                case 2:
                    o.x = d.ri();
                    break;
                case 3:
                    o.y = d.ri();
                    break;
                case 4:
                    o.arg1 = d.ri();
                    break;
                default:
                    d.nod();
                    break;
            }
        }
        return o;
    }
    function _encode_sync_entity_pos_request(self, st) {
        var se = Sproto.SprotoCore.GetSerialize(st, 5);
        if (self.handle != undefined) {
            se.wi(self.handle, 0);
        }
        if (self.type != undefined) {
            se.wi(self.type, 1);
        }
        if (self.x != undefined) {
            se.wi(self.x, 2);
        }
        if (self.y != undefined) {
            se.wi(self.y, 3);
        }
        if (self.arg1 != undefined) {
            se.wi(self.arg1, 4);
        }
        return Sproto.SprotoCore.CloseSerialize(se);
    }
    Sproto.ALL_DICT["sync_entity_pos_request"] = { en: _encode_sync_entity_pos_request, de: _decode_sync_entity_pos_request };
})(Sproto || (Sproto = {}));
//# sourceMappingURL=default_s2c.js.map