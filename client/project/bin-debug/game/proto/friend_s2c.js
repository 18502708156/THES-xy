// Generated by sprotodump. DO NOT EDIT!
var __reflect = (this && this.__reflect) || function (p, c, t) {
    p.__class__ = c, t ? t.push(c) : t = [c], p.__types__ = p.__types__ ? t.concat(p.__types__) : t;
};
var Sproto;
(function (Sproto) {
    var friend_data = (function () {
        function friend_data() {
        }
        return friend_data;
    }());
    Sproto.friend_data = friend_data;
    __reflect(friend_data.prototype, "Sproto.friend_data");
    function _decode_friend_data(d) {
        var o = new friend_data;
        var t = -1;
        while (-1 != (t = d.rt())) {
            switch (t) {
                case 0:
                    o.friendInfo = d.ro("player_whole_data");
                    break;
                case 1:
                    o.gift = d.rb();
                    break;
                default:
                    d.nod();
                    break;
            }
        }
        return o;
    }
    function _encode_friend_data(self, st) {
        var se = Sproto.SprotoCore.GetSerialize(st, 2);
        if (self.friendInfo != undefined) {
            se.wo("player_whole_data", self.friendInfo, 0);
        }
        if (self.gift != undefined) {
            se.wb(self.gift, 1);
        }
        return Sproto.SprotoCore.CloseSerialize(se);
    }
    Sproto.ALL_DICT["friend_data"] = { en: _encode_friend_data, de: _decode_friend_data };
    var funs_data = (function () {
        function funs_data() {
        }
        return funs_data;
    }());
    Sproto.funs_data = funs_data;
    __reflect(funs_data.prototype, "Sproto.funs_data");
    function _decode_funs_data(d) {
        var o = new funs_data;
        var t = -1;
        while (-1 != (t = d.rt())) {
            switch (t) {
                case 0:
                    o.funsInfo = d.ro("player_whole_data");
                    break;
                case 1:
                    o.gift = d.rb();
                    break;
                case 2:
                    o.gifttime = d.ri();
                    break;
                case 3:
                    o.receive = d.rb();
                    break;
                case 4:
                    o.isfriend = d.rb();
                    break;
                default:
                    d.nod();
                    break;
            }
        }
        return o;
    }
    function _encode_funs_data(self, st) {
        var se = Sproto.SprotoCore.GetSerialize(st, 5);
        if (self.funsInfo != undefined) {
            se.wo("player_whole_data", self.funsInfo, 0);
        }
        if (self.gift != undefined) {
            se.wb(self.gift, 1);
        }
        if (self.gifttime != undefined) {
            se.wi(self.gifttime, 2);
        }
        if (self.receive != undefined) {
            se.wb(self.receive, 3);
        }
        if (self.isfriend != undefined) {
            se.wb(self.isfriend, 4);
        }
        return Sproto.SprotoCore.CloseSerialize(se);
    }
    Sproto.ALL_DICT["funs_data"] = { en: _encode_funs_data, de: _decode_funs_data };
    var sc_friend_black_list_request = (function () {
        function sc_friend_black_list_request() {
        }
        return sc_friend_black_list_request;
    }());
    Sproto.sc_friend_black_list_request = sc_friend_black_list_request;
    __reflect(sc_friend_black_list_request.prototype, "Sproto.sc_friend_black_list_request");
    function _decode_sc_friend_black_list_request(d) {
        var o = new sc_friend_black_list_request;
        var t = -1;
        while (-1 != (t = d.rt())) {
            switch (t) {
                case 0:
                    o.blacklist = d.roa("player_whole_data");
                    break;
                default:
                    d.nod();
                    break;
            }
        }
        return o;
    }
    function _encode_sc_friend_black_list_request(self, st) {
        var se = Sproto.SprotoCore.GetSerialize(st, 1);
        if (self.blacklist != undefined) {
            se.woa("player_whole_data", self.blacklist, 0);
        }
        return Sproto.SprotoCore.CloseSerialize(se);
    }
    Sproto.ALL_DICT["sc_friend_black_list_request"] = { en: _encode_sc_friend_black_list_request, de: _decode_sc_friend_black_list_request };
    var sc_friend_blacklist_update_request = (function () {
        function sc_friend_blacklist_update_request() {
        }
        return sc_friend_blacklist_update_request;
    }());
    Sproto.sc_friend_blacklist_update_request = sc_friend_blacklist_update_request;
    __reflect(sc_friend_blacklist_update_request.prototype, "Sproto.sc_friend_blacklist_update_request");
    function _decode_sc_friend_blacklist_update_request(d) {
        var o = new sc_friend_blacklist_update_request;
        var t = -1;
        while (-1 != (t = d.rt())) {
            switch (t) {
                case 0:
                    o.blackdata = d.ro("player_whole_data");
                    break;
                default:
                    d.nod();
                    break;
            }
        }
        return o;
    }
    function _encode_sc_friend_blacklist_update_request(self, st) {
        var se = Sproto.SprotoCore.GetSerialize(st, 1);
        if (self.blackdata != undefined) {
            se.wo("player_whole_data", self.blackdata, 0);
        }
        return Sproto.SprotoCore.CloseSerialize(se);
    }
    Sproto.ALL_DICT["sc_friend_blacklist_update_request"] = { en: _encode_sc_friend_blacklist_update_request, de: _decode_sc_friend_blacklist_update_request };
    var sc_friend_follow_data_request = (function () {
        function sc_friend_follow_data_request() {
        }
        return sc_friend_follow_data_request;
    }());
    Sproto.sc_friend_follow_data_request = sc_friend_follow_data_request;
    __reflect(sc_friend_follow_data_request.prototype, "Sproto.sc_friend_follow_data_request");
    function _decode_sc_friend_follow_data_request(d) {
        var o = new sc_friend_follow_data_request;
        var t = -1;
        while (-1 != (t = d.rt())) {
            switch (t) {
                case 0:
                    o.friendlist = d.roa("friend_data");
                    break;
                default:
                    d.nod();
                    break;
            }
        }
        return o;
    }
    function _encode_sc_friend_follow_data_request(self, st) {
        var se = Sproto.SprotoCore.GetSerialize(st, 1);
        if (self.friendlist != undefined) {
            se.woa("friend_data", self.friendlist, 0);
        }
        return Sproto.SprotoCore.CloseSerialize(se);
    }
    Sproto.ALL_DICT["sc_friend_follow_data_request"] = { en: _encode_sc_friend_follow_data_request, de: _decode_sc_friend_follow_data_request };
    var sc_friend_follow_nominate_list_request = (function () {
        function sc_friend_follow_nominate_list_request() {
        }
        return sc_friend_follow_nominate_list_request;
    }());
    Sproto.sc_friend_follow_nominate_list_request = sc_friend_follow_nominate_list_request;
    __reflect(sc_friend_follow_nominate_list_request.prototype, "Sproto.sc_friend_follow_nominate_list_request");
    function _decode_sc_friend_follow_nominate_list_request(d) {
        var o = new sc_friend_follow_nominate_list_request;
        var t = -1;
        while (-1 != (t = d.rt())) {
            switch (t) {
                case 0:
                    o.playerinfos = d.roa("player_whole_data");
                    break;
                default:
                    d.nod();
                    break;
            }
        }
        return o;
    }
    function _encode_sc_friend_follow_nominate_list_request(self, st) {
        var se = Sproto.SprotoCore.GetSerialize(st, 1);
        if (self.playerinfos != undefined) {
            se.woa("player_whole_data", self.playerinfos, 0);
        }
        return Sproto.SprotoCore.CloseSerialize(se);
    }
    Sproto.ALL_DICT["sc_friend_follow_nominate_list_request"] = { en: _encode_sc_friend_follow_nominate_list_request, de: _decode_sc_friend_follow_nominate_list_request };
    var sc_friend_follow_update_request = (function () {
        function sc_friend_follow_update_request() {
        }
        return sc_friend_follow_update_request;
    }());
    Sproto.sc_friend_follow_update_request = sc_friend_follow_update_request;
    __reflect(sc_friend_follow_update_request.prototype, "Sproto.sc_friend_follow_update_request");
    function _decode_sc_friend_follow_update_request(d) {
        var o = new sc_friend_follow_update_request;
        var t = -1;
        while (-1 != (t = d.rt())) {
            switch (t) {
                case 0:
                    o.friendinfo = d.ro("friend_data");
                    break;
                default:
                    d.nod();
                    break;
            }
        }
        return o;
    }
    function _encode_sc_friend_follow_update_request(self, st) {
        var se = Sproto.SprotoCore.GetSerialize(st, 1);
        if (self.friendinfo != undefined) {
            se.wo("friend_data", self.friendinfo, 0);
        }
        return Sproto.SprotoCore.CloseSerialize(se);
    }
    Sproto.ALL_DICT["sc_friend_follow_update_request"] = { en: _encode_sc_friend_follow_update_request, de: _decode_sc_friend_follow_update_request };
    var sc_friend_funs_data_request = (function () {
        function sc_friend_funs_data_request() {
        }
        return sc_friend_funs_data_request;
    }());
    Sproto.sc_friend_funs_data_request = sc_friend_funs_data_request;
    __reflect(sc_friend_funs_data_request.prototype, "Sproto.sc_friend_funs_data_request");
    function _decode_sc_friend_funs_data_request(d) {
        var o = new sc_friend_funs_data_request;
        var t = -1;
        while (-1 != (t = d.rt())) {
            switch (t) {
                case 0:
                    o.funslist = d.roa("funs_data");
                    break;
                default:
                    d.nod();
                    break;
            }
        }
        return o;
    }
    function _encode_sc_friend_funs_data_request(self, st) {
        var se = Sproto.SprotoCore.GetSerialize(st, 1);
        if (self.funslist != undefined) {
            se.woa("funs_data", self.funslist, 0);
        }
        return Sproto.SprotoCore.CloseSerialize(se);
    }
    Sproto.ALL_DICT["sc_friend_funs_data_request"] = { en: _encode_sc_friend_funs_data_request, de: _decode_sc_friend_funs_data_request };
    var sc_friend_funs_remove_request = (function () {
        function sc_friend_funs_remove_request() {
        }
        return sc_friend_funs_remove_request;
    }());
    Sproto.sc_friend_funs_remove_request = sc_friend_funs_remove_request;
    __reflect(sc_friend_funs_remove_request.prototype, "Sproto.sc_friend_funs_remove_request");
    function _decode_sc_friend_funs_remove_request(d) {
        var o = new sc_friend_funs_remove_request;
        var t = -1;
        while (-1 != (t = d.rt())) {
            switch (t) {
                case 0:
                    o.dbid = d.ri();
                    break;
                default:
                    d.nod();
                    break;
            }
        }
        return o;
    }
    function _encode_sc_friend_funs_remove_request(self, st) {
        var se = Sproto.SprotoCore.GetSerialize(st, 1);
        if (self.dbid != undefined) {
            se.wi(self.dbid, 0);
        }
        return Sproto.SprotoCore.CloseSerialize(se);
    }
    Sproto.ALL_DICT["sc_friend_funs_remove_request"] = { en: _encode_sc_friend_funs_remove_request, de: _decode_sc_friend_funs_remove_request };
    var sc_friend_funs_update_request = (function () {
        function sc_friend_funs_update_request() {
        }
        return sc_friend_funs_update_request;
    }());
    Sproto.sc_friend_funs_update_request = sc_friend_funs_update_request;
    __reflect(sc_friend_funs_update_request.prototype, "Sproto.sc_friend_funs_update_request");
    function _decode_sc_friend_funs_update_request(d) {
        var o = new sc_friend_funs_update_request;
        var t = -1;
        while (-1 != (t = d.rt())) {
            switch (t) {
                case 0:
                    o.funsinfo = d.ro("funs_data");
                    break;
                default:
                    d.nod();
                    break;
            }
        }
        return o;
    }
    function _encode_sc_friend_funs_update_request(self, st) {
        var se = Sproto.SprotoCore.GetSerialize(st, 1);
        if (self.funsinfo != undefined) {
            se.wo("funs_data", self.funsinfo, 0);
        }
        return Sproto.SprotoCore.CloseSerialize(se);
    }
    Sproto.ALL_DICT["sc_friend_funs_update_request"] = { en: _encode_sc_friend_funs_update_request, de: _decode_sc_friend_funs_update_request };
    var sc_friend_gift_receive_info_request = (function () {
        function sc_friend_gift_receive_info_request() {
        }
        return sc_friend_gift_receive_info_request;
    }());
    Sproto.sc_friend_gift_receive_info_request = sc_friend_gift_receive_info_request;
    __reflect(sc_friend_gift_receive_info_request.prototype, "Sproto.sc_friend_gift_receive_info_request");
    function _decode_sc_friend_gift_receive_info_request(d) {
        var o = new sc_friend_gift_receive_info_request;
        var t = -1;
        while (-1 != (t = d.rt())) {
            switch (t) {
                case 0:
                    o.gifttime = d.ri();
                    break;
                case 1:
                    o.receivetime = d.ri();
                    break;
                default:
                    d.nod();
                    break;
            }
        }
        return o;
    }
    function _encode_sc_friend_gift_receive_info_request(self, st) {
        var se = Sproto.SprotoCore.GetSerialize(st, 2);
        if (self.gifttime != undefined) {
            se.wi(self.gifttime, 0);
        }
        if (self.receivetime != undefined) {
            se.wi(self.receivetime, 1);
        }
        return Sproto.SprotoCore.CloseSerialize(se);
    }
    Sproto.ALL_DICT["sc_friend_gift_receive_info_request"] = { en: _encode_sc_friend_gift_receive_info_request, de: _decode_sc_friend_gift_receive_info_request };
})(Sproto || (Sproto = {}));
//# sourceMappingURL=friend_s2c.js.map