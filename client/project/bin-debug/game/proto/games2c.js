// Generated by sprotodump. DO NOT EDIT!
var __reflect = (this && this.__reflect) || function (p, c, t) {
    p.__class__ = c, t ? t.push(c) : t = [c], p.__types__ = p.__types__ ? t.concat(p.__types__) : t;
};
var Sproto;
(function (Sproto) {
    var sc_base_game_time_request = (function () {
        function sc_base_game_time_request() {
        }
        return sc_base_game_time_request;
    }());
    Sproto.sc_base_game_time_request = sc_base_game_time_request;
    __reflect(sc_base_game_time_request.prototype, "Sproto.sc_base_game_time_request");
    function _decode_sc_base_game_time_request(d) {
        var o = new sc_base_game_time_request;
        var t = -1;
        while (-1 != (t = d.rt())) {
            switch (t) {
                case 0:
                    o.time = d.ri();
                    break;
                case 1:
                    o.serverRunDay = d.ri();
                    break;
                default:
                    d.nod();
                    break;
            }
        }
        return o;
    }
    function _encode_sc_base_game_time_request(self, st) {
        var se = Sproto.SprotoCore.GetSerialize(st, 2);
        if (self.time != undefined) {
            se.wi(self.time, 0);
        }
        if (self.serverRunDay != undefined) {
            se.wi(self.serverRunDay, 1);
        }
        return Sproto.SprotoCore.CloseSerialize(se);
    }
    Sproto.ALL_DICT["sc_base_game_time_request"] = { en: _encode_sc_base_game_time_request, de: _decode_sc_base_game_time_request };
    var sc_base_open_day_request = (function () {
        function sc_base_open_day_request() {
        }
        return sc_base_open_day_request;
    }());
    Sproto.sc_base_open_day_request = sc_base_open_day_request;
    __reflect(sc_base_open_day_request.prototype, "Sproto.sc_base_open_day_request");
    function _decode_sc_base_open_day_request(d) {
        var o = new sc_base_open_day_request;
        var t = -1;
        while (-1 != (t = d.rt())) {
            switch (t) {
                case 1:
                    o.day = d.ri();
                    break;
                case 2:
                    o.loginDay = d.ri();
                    break;
                case 3:
                    o.mergeDay = d.ri();
                    break;
                default:
                    d.nod();
                    break;
            }
        }
        return o;
    }
    function _encode_sc_base_open_day_request(self, st) {
        var se = Sproto.SprotoCore.GetSerialize(st, 4);
        if (self.day != undefined) {
            se.wi(self.day, 1);
        }
        if (self.loginDay != undefined) {
            se.wi(self.loginDay, 2);
        }
        if (self.mergeDay != undefined) {
            se.wi(self.mergeDay, 3);
        }
        return Sproto.SprotoCore.CloseSerialize(se);
    }
    Sproto.ALL_DICT["sc_base_open_day_request"] = { en: _encode_sc_base_open_day_request, de: _decode_sc_base_open_day_request };
    var sc_error_code_request = (function () {
        function sc_error_code_request() {
        }
        return sc_error_code_request;
    }());
    Sproto.sc_error_code_request = sc_error_code_request;
    __reflect(sc_error_code_request.prototype, "Sproto.sc_error_code_request");
    function _decode_sc_error_code_request(d) {
        var o = new sc_error_code_request;
        var t = -1;
        while (-1 != (t = d.rt())) {
            switch (t) {
                case 0:
                    o.code = d.ri();
                    break;
                case 1:
                    o.msg = d.rs();
                    break;
                default:
                    d.nod();
                    break;
            }
        }
        return o;
    }
    function _encode_sc_error_code_request(self, st) {
        var se = Sproto.SprotoCore.GetSerialize(st, 2);
        if (self.code != undefined) {
            se.wi(self.code, 0);
        }
        if (self.msg != undefined) {
            se.ws(self.msg, 1);
        }
        return Sproto.SprotoCore.CloseSerialize(se);
    }
    Sproto.ALL_DICT["sc_error_code_request"] = { en: _encode_sc_error_code_request, de: _decode_sc_error_code_request };
})(Sproto || (Sproto = {}));
//# sourceMappingURL=games2c.js.map