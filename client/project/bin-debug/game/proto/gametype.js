// Generated by sprotodump. DO NOT EDIT!
var __reflect = (this && this.__reflect) || function (p, c, t) {
    p.__class__ = c, t ? t.push(c) : t = [c], p.__types__ = p.__types__ ? t.concat(p.__types__) : t;
};
var Sproto;
(function (Sproto) {
    var actor_base_data = (function () {
        function actor_base_data() {
        }
        return actor_base_data;
    }());
    Sproto.actor_base_data = actor_base_data;
    __reflect(actor_base_data.prototype, "Sproto.actor_base_data");
    function _decode_actor_base_data(d) {
        var o = new actor_base_data;
        var t = -1;
        while (-1 != (t = d.rt())) {
            switch (t) {
                case 0:
                    o.id = d.ri();
                    break;
                case 1:
                    o.name = d.rs();
                    break;
                case 2:
                    o.level = d.ri();
                    break;
                case 3:
                    o.vip = d.ri();
                    break;
                case 4:
                    o.power = d.ri();
                    break;
                default:
                    d.nod();
                    break;
            }
        }
        return o;
    }
    function _encode_actor_base_data(self, st) {
        var se = Sproto.SprotoCore.GetSerialize(st, 5);
        if (self.id != undefined) {
            se.wi(self.id, 0);
        }
        if (self.name != undefined) {
            se.ws(self.name, 1);
        }
        if (self.level != undefined) {
            se.wi(self.level, 2);
        }
        if (self.vip != undefined) {
            se.wi(self.vip, 3);
        }
        if (self.power != undefined) {
            se.wi(self.power, 4);
        }
        return Sproto.SprotoCore.CloseSerialize(se);
    }
    Sproto.ALL_DICT["actor_base_data"] = { en: _encode_actor_base_data, de: _decode_actor_base_data };
    var actor_simple_data = (function () {
        function actor_simple_data() {
        }
        return actor_simple_data;
    }());
    Sproto.actor_simple_data = actor_simple_data;
    __reflect(actor_simple_data.prototype, "Sproto.actor_simple_data");
    function _decode_actor_simple_data(d) {
        var o = new actor_simple_data;
        var t = -1;
        while (-1 != (t = d.rt())) {
            switch (t) {
                case 0:
                    o.name = d.rs();
                    break;
                case 1:
                    o.job = d.ri();
                    break;
                case 2:
                    o.sex = d.ri();
                    break;
                case 3:
                    o.zsLv = d.ri();
                    break;
                case 4:
                    o.lv = d.ri();
                    break;
                default:
                    d.nod();
                    break;
            }
        }
        return o;
    }
    function _encode_actor_simple_data(self, st) {
        var se = Sproto.SprotoCore.GetSerialize(st, 5);
        if (self.name != undefined) {
            se.ws(self.name, 0);
        }
        if (self.job != undefined) {
            se.wi(self.job, 1);
        }
        if (self.sex != undefined) {
            se.wi(self.sex, 2);
        }
        if (self.zsLv != undefined) {
            se.wi(self.zsLv, 3);
        }
        if (self.lv != undefined) {
            se.wi(self.lv, 4);
        }
        return Sproto.SprotoCore.CloseSerialize(se);
    }
    Sproto.ALL_DICT["actor_simple_data"] = { en: _encode_actor_simple_data, de: _decode_actor_simple_data };
    var arena_target_data = (function () {
        function arena_target_data() {
        }
        return arena_target_data;
    }());
    Sproto.arena_target_data = arena_target_data;
    __reflect(arena_target_data.prototype, "Sproto.arena_target_data");
    function _decode_arena_target_data(d) {
        var o = new arena_target_data;
        var t = -1;
        while (-1 != (t = d.rt())) {
            switch (t) {
                case 0:
                    o.id = d.ri();
                    break;
                case 1:
                    o.iskill = d.rb();
                    break;
                case 2:
                    o.rank = d.ri();
                    break;
                case 3:
                    o.power = d.ri();
                    break;
                case 4:
                    o.name = d.rs();
                    break;
                case 5:
                    o.job = d.ri();
                    break;
                case 6:
                    o.sex = d.ri();
                    break;
                case 7:
                    o.shows = d.ria();
                    break;
                case 8:
                    o.monId = d.ri();
                    break;
                default:
                    d.nod();
                    break;
            }
        }
        return o;
    }
    function _encode_arena_target_data(self, st) {
        var se = Sproto.SprotoCore.GetSerialize(st, 9);
        if (self.id != undefined) {
            se.wi(self.id, 0);
        }
        if (self.iskill != undefined) {
            se.wb(self.iskill, 1);
        }
        if (self.rank != undefined) {
            se.wi(self.rank, 2);
        }
        if (self.power != undefined) {
            se.wi(self.power, 3);
        }
        if (self.name != undefined) {
            se.ws(self.name, 4);
        }
        if (self.job != undefined) {
            se.wi(self.job, 5);
        }
        if (self.sex != undefined) {
            se.wi(self.sex, 6);
        }
        if (self.shows != undefined) {
            se.wia(self.shows, 7);
        }
        if (self.monId != undefined) {
            se.wi(self.monId, 8);
        }
        return Sproto.SprotoCore.CloseSerialize(se);
    }
    Sproto.ALL_DICT["arena_target_data"] = { en: _encode_arena_target_data, de: _decode_arena_target_data };
    var attribute_data = (function () {
        function attribute_data() {
        }
        return attribute_data;
    }());
    Sproto.attribute_data = attribute_data;
    __reflect(attribute_data.prototype, "Sproto.attribute_data");
    function _decode_attribute_data(d) {
        var o = new attribute_data;
        var t = -1;
        while (-1 != (t = d.rt())) {
            switch (t) {
                case 0:
                    o.type = d.ri();
                    break;
                case 1:
                    o.value = d.ri();
                    break;
                default:
                    d.nod();
                    break;
            }
        }
        return o;
    }
    function _encode_attribute_data(self, st) {
        var se = Sproto.SprotoCore.GetSerialize(st, 2);
        if (self.type != undefined) {
            se.wi(self.type, 0);
        }
        if (self.value != undefined) {
            se.wi(self.value, 1);
        }
        return Sproto.SprotoCore.CloseSerialize(se);
    }
    Sproto.ALL_DICT["attribute_data"] = { en: _encode_attribute_data, de: _decode_attribute_data };
    var baby_star_msg = (function () {
        function baby_star_msg() {
        }
        return baby_star_msg;
    }());
    Sproto.baby_star_msg = baby_star_msg;
    __reflect(baby_star_msg.prototype, "Sproto.baby_star_msg");
    function _decode_baby_star_msg(d) {
        var o = new baby_star_msg;
        var t = -1;
        while (-1 != (t = d.rt())) {
            switch (t) {
                case 0:
                    o.name = d.rs();
                    break;
                case 1:
                    o.id = d.ri();
                    break;
                default:
                    d.nod();
                    break;
            }
        }
        return o;
    }
    function _encode_baby_star_msg(self, st) {
        var se = Sproto.SprotoCore.GetSerialize(st, 2);
        if (self.name != undefined) {
            se.ws(self.name, 0);
        }
        if (self.id != undefined) {
            se.wi(self.id, 1);
        }
        return Sproto.SprotoCore.CloseSerialize(se);
    }
    Sproto.ALL_DICT["baby_star_msg"] = { en: _encode_baby_star_msg, de: _decode_baby_star_msg };
    var client_chat_param = (function () {
        function client_chat_param() {
        }
        return client_chat_param;
    }());
    Sproto.client_chat_param = client_chat_param;
    __reflect(client_chat_param.prototype, "Sproto.client_chat_param");
    function _decode_client_chat_param(d) {
        var o = new client_chat_param;
        var t = -1;
        while (-1 != (t = d.rt())) {
            switch (t) {
                case 0:
                    o.type = d.ri();
                    break;
                case 1:
                    o.value = d.ri();
                    break;
                case 2:
                    o.strvalue = d.rs();
                    break;
                case 3:
                    o.valueEx = d.ri();
                    break;
                default:
                    d.nod();
                    break;
            }
        }
        return o;
    }
    function _encode_client_chat_param(self, st) {
        var se = Sproto.SprotoCore.GetSerialize(st, 4);
        if (self.type != undefined) {
            se.wi(self.type, 0);
        }
        if (self.value != undefined) {
            se.wi(self.value, 1);
        }
        if (self.strvalue != undefined) {
            se.ws(self.strvalue, 2);
        }
        if (self.valueEx != undefined) {
            se.wi(self.valueEx, 3);
        }
        return Sproto.SprotoCore.CloseSerialize(se);
    }
    Sproto.ALL_DICT["client_chat_param"] = { en: _encode_client_chat_param, de: _decode_client_chat_param };
    var dress_time_info = (function () {
        function dress_time_info() {
        }
        return dress_time_info;
    }());
    Sproto.dress_time_info = dress_time_info;
    __reflect(dress_time_info.prototype, "Sproto.dress_time_info");
    function _decode_dress_time_info(d) {
        var o = new dress_time_info;
        var t = -1;
        while (-1 != (t = d.rt())) {
            switch (t) {
                case 0:
                    o.dressId = d.ri();
                    break;
                case 2:
                    o.invalidtime = d.ri();
                    break;
                case 3:
                    o.dressLevel = d.ri();
                    break;
                case 4:
                    o.dressExp = d.ri();
                    break;
                default:
                    d.nod();
                    break;
            }
        }
        return o;
    }
    function _encode_dress_time_info(self, st) {
        var se = Sproto.SprotoCore.GetSerialize(st, 5);
        if (self.dressId != undefined) {
            se.wi(self.dressId, 0);
        }
        if (self.invalidtime != undefined) {
            se.wi(self.invalidtime, 2);
        }
        if (self.dressLevel != undefined) {
            se.wi(self.dressLevel, 3);
        }
        if (self.dressExp != undefined) {
            se.wi(self.dressExp, 4);
        }
        return Sproto.SprotoCore.CloseSerialize(se);
    }
    Sproto.ALL_DICT["dress_time_info"] = { en: _encode_dress_time_info, de: _decode_dress_time_info };
    var equip_data = (function () {
        function equip_data() {
        }
        return equip_data;
    }());
    Sproto.equip_data = equip_data;
    __reflect(equip_data.prototype, "Sproto.equip_data");
    function _decode_equip_data(d) {
        var o = new equip_data;
        var t = -1;
        while (-1 != (t = d.rt())) {
            switch (t) {
                case 0:
                    o.strengthen = d.ri();
                    break;
                case 1:
                    o.refine = d.ri();
                    break;
                case 2:
                    o.anneal = d.ri();
                    break;
                case 3:
                    o.gem = d.ri();
                    break;
                case 4:
                    o.item = d.ro("equip_item_data");
                    break;
                case 5:
                    o.reddata = d.ro("equip_red_data");
                    break;
                default:
                    d.nod();
                    break;
            }
        }
        return o;
    }
    function _encode_equip_data(self, st) {
        var se = Sproto.SprotoCore.GetSerialize(st, 6);
        if (self.strengthen != undefined) {
            se.wi(self.strengthen, 0);
        }
        if (self.refine != undefined) {
            se.wi(self.refine, 1);
        }
        if (self.anneal != undefined) {
            se.wi(self.anneal, 2);
        }
        if (self.gem != undefined) {
            se.wi(self.gem, 3);
        }
        if (self.item != undefined) {
            se.wo("equip_item_data", self.item, 4);
        }
        if (self.reddata != undefined) {
            se.wo("equip_red_data", self.reddata, 5);
        }
        return Sproto.SprotoCore.CloseSerialize(se);
    }
    Sproto.ALL_DICT["equip_data"] = { en: _encode_equip_data, de: _decode_equip_data };
    var equip_item_data = (function () {
        function equip_item_data() {
        }
        return equip_item_data;
    }());
    Sproto.equip_item_data = equip_item_data;
    __reflect(equip_item_data.prototype, "Sproto.equip_item_data");
    function _decode_equip_item_data(d) {
        var o = new equip_item_data;
        var t = -1;
        while (-1 != (t = d.rt())) {
            switch (t) {
                case 0:
                    o.id = d.ri();
                    break;
                case 1:
                    o.attrs = d.roa("attribute_data");
                    break;
                default:
                    d.nod();
                    break;
            }
        }
        return o;
    }
    function _encode_equip_item_data(self, st) {
        var se = Sproto.SprotoCore.GetSerialize(st, 2);
        if (self.id != undefined) {
            se.wi(self.id, 0);
        }
        if (self.attrs != undefined) {
            se.woa("attribute_data", self.attrs, 1);
        }
        return Sproto.SprotoCore.CloseSerialize(se);
    }
    Sproto.ALL_DICT["equip_item_data"] = { en: _encode_equip_item_data, de: _decode_equip_item_data };
    var equip_red_data = (function () {
        function equip_red_data() {
        }
        return equip_red_data;
    }());
    Sproto.equip_red_data = equip_red_data;
    __reflect(equip_red_data.prototype, "Sproto.equip_red_data");
    function _decode_equip_red_data(d) {
        var o = new equip_red_data;
        var t = -1;
        while (-1 != (t = d.rt())) {
            switch (t) {
                case 0:
                    o.injectstage = d.ri();
                    break;
                case 1:
                    o.injectcount = d.ri();
                    break;
                default:
                    d.nod();
                    break;
            }
        }
        return o;
    }
    function _encode_equip_red_data(self, st) {
        var se = Sproto.SprotoCore.GetSerialize(st, 2);
        if (self.injectstage != undefined) {
            se.wi(self.injectstage, 0);
        }
        if (self.injectcount != undefined) {
            se.wi(self.injectcount, 1);
        }
        return Sproto.SprotoCore.CloseSerialize(se);
    }
    Sproto.ALL_DICT["equip_red_data"] = { en: _encode_equip_red_data, de: _decode_equip_red_data };
    var fuwen_data = (function () {
        function fuwen_data() {
        }
        return fuwen_data;
    }());
    Sproto.fuwen_data = fuwen_data;
    __reflect(fuwen_data.prototype, "Sproto.fuwen_data");
    function _decode_fuwen_data(d) {
        var o = new fuwen_data;
        var t = -1;
        while (-1 != (t = d.rt())) {
            switch (t) {
                case 0:
                    o.openStatus = d.rb();
                    break;
                case 1:
                    o.level = d.ri();
                    break;
                case 2:
                    o.equipDatas = d.roa("item_data");
                    break;
                default:
                    d.nod();
                    break;
            }
        }
        return o;
    }
    function _encode_fuwen_data(self, st) {
        var se = Sproto.SprotoCore.GetSerialize(st, 3);
        if (self.openStatus != undefined) {
            se.wb(self.openStatus, 0);
        }
        if (self.level != undefined) {
            se.wi(self.level, 1);
        }
        if (self.equipDatas != undefined) {
            se.woa("item_data", self.equipDatas, 2);
        }
        return Sproto.SprotoCore.CloseSerialize(se);
    }
    Sproto.ALL_DICT["fuwen_data"] = { en: _encode_fuwen_data, de: _decode_fuwen_data };
    var godswords_data = (function () {
        function godswords_data() {
        }
        return godswords_data;
    }());
    Sproto.godswords_data = godswords_data;
    __reflect(godswords_data.prototype, "Sproto.godswords_data");
    function _decode_godswords_data(d) {
        var o = new godswords_data;
        var t = -1;
        while (-1 != (t = d.rt())) {
            switch (t) {
                case 0:
                    o.lv = d.ri();
                    break;
                case 1:
                    o.star = d.ri();
                    break;
                case 2:
                    o.exp = d.ri();
                    break;
                case 3:
                    o.openStatus = d.rb();
                    break;
                case 4:
                    o.dressId = d.ri();
                    break;
                default:
                    d.nod();
                    break;
            }
        }
        return o;
    }
    function _encode_godswords_data(self, st) {
        var se = Sproto.SprotoCore.GetSerialize(st, 5);
        if (self.lv != undefined) {
            se.wi(self.lv, 0);
        }
        if (self.star != undefined) {
            se.wi(self.star, 1);
        }
        if (self.exp != undefined) {
            se.wi(self.exp, 2);
        }
        if (self.openStatus != undefined) {
            se.wb(self.openStatus, 3);
        }
        if (self.dressId != undefined) {
            se.wi(self.dressId, 4);
        }
        return Sproto.SprotoCore.CloseSerialize(se);
    }
    Sproto.ALL_DICT["godswords_data"] = { en: _encode_godswords_data, de: _decode_godswords_data };
    var item_data = (function () {
        function item_data() {
        }
        return item_data;
    }());
    Sproto.item_data = item_data;
    __reflect(item_data.prototype, "Sproto.item_data");
    function _decode_item_data(d) {
        var o = new item_data;
        var t = -1;
        while (-1 != (t = d.rt())) {
            switch (t) {
                case 0:
                    o.handle = d.ri();
                    break;
                case 1:
                    o.id = d.ri();
                    break;
                case 2:
                    o.count = d.ri();
                    break;
                case 3:
                    o.attrs = d.roa("attribute_data");
                    break;
                case 4:
                    o.invalidtime = d.ri();
                    break;
                default:
                    d.nod();
                    break;
            }
        }
        return o;
    }
    function _encode_item_data(self, st) {
        var se = Sproto.SprotoCore.GetSerialize(st, 5);
        if (self.handle != undefined) {
            se.wi(self.handle, 0);
        }
        if (self.id != undefined) {
            se.wi(self.id, 1);
        }
        if (self.count != undefined) {
            se.wi(self.count, 2);
        }
        if (self.attrs != undefined) {
            se.woa("attribute_data", self.attrs, 3);
        }
        if (self.invalidtime != undefined) {
            se.wi(self.invalidtime, 4);
        }
        return Sproto.SprotoCore.CloseSerialize(se);
    }
    Sproto.ALL_DICT["item_data"] = { en: _encode_item_data, de: _decode_item_data };
    var jingmai_data = (function () {
        function jingmai_data() {
        }
        return jingmai_data;
    }());
    Sproto.jingmai_data = jingmai_data;
    __reflect(jingmai_data.prototype, "Sproto.jingmai_data");
    function _decode_jingmai_data(d) {
        var o = new jingmai_data;
        var t = -1;
        while (-1 != (t = d.rt())) {
            switch (t) {
                case 0:
                    o.level = d.ri();
                    break;
                case 1:
                    o.stage = d.ri();
                    break;
                default:
                    d.nod();
                    break;
            }
        }
        return o;
    }
    function _encode_jingmai_data(self, st) {
        var se = Sproto.SprotoCore.GetSerialize(st, 2);
        if (self.level != undefined) {
            se.wi(self.level, 0);
        }
        if (self.stage != undefined) {
            se.wi(self.stage, 1);
        }
        return Sproto.SprotoCore.CloseSerialize(se);
    }
    Sproto.ALL_DICT["jingmai_data"] = { en: _encode_jingmai_data, de: _decode_jingmai_data };
    var legend_data = (function () {
        function legend_data() {
        }
        return legend_data;
    }());
    Sproto.legend_data = legend_data;
    __reflect(legend_data.prototype, "Sproto.legend_data");
    function _decode_legend_data(d) {
        var o = new legend_data;
        var t = -1;
        while (-1 != (t = d.rt())) {
            switch (t) {
                case 0:
                    o.isActivate = d.ri();
                    break;
                default:
                    d.nod();
                    break;
            }
        }
        return o;
    }
    function _encode_legend_data(self, st) {
        var se = Sproto.SprotoCore.GetSerialize(st, 1);
        if (self.isActivate != undefined) {
            se.wi(self.isActivate, 0);
        }
        return Sproto.SprotoCore.CloseSerialize(se);
    }
    Sproto.ALL_DICT["legend_data"] = { en: _encode_legend_data, de: _decode_legend_data };
    var long_hun_data = (function () {
        function long_hun_data() {
        }
        return long_hun_data;
    }());
    Sproto.long_hun_data = long_hun_data;
    __reflect(long_hun_data.prototype, "Sproto.long_hun_data");
    function _decode_long_hun_data(d) {
        var o = new long_hun_data;
        var t = -1;
        while (-1 != (t = d.rt())) {
            switch (t) {
                case 0:
                    o.stage = d.ri();
                    break;
                case 1:
                    o.level = d.ri();
                    break;
                case 2:
                    o.exp = d.ri();
                    break;
                default:
                    d.nod();
                    break;
            }
        }
        return o;
    }
    function _encode_long_hun_data(self, st) {
        var se = Sproto.SprotoCore.GetSerialize(st, 3);
        if (self.stage != undefined) {
            se.wi(self.stage, 0);
        }
        if (self.level != undefined) {
            se.wi(self.level, 1);
        }
        if (self.exp != undefined) {
            se.wi(self.exp, 2);
        }
        return Sproto.SprotoCore.CloseSerialize(se);
    }
    Sproto.ALL_DICT["long_hun_data"] = { en: _encode_long_hun_data, de: _decode_long_hun_data };
    var longzhuang_data = (function () {
        function longzhuang_data() {
        }
        return longzhuang_data;
    }());
    Sproto.longzhuang_data = longzhuang_data;
    __reflect(longzhuang_data.prototype, "Sproto.longzhuang_data");
    function _decode_longzhuang_data(d) {
        var o = new longzhuang_data;
        var t = -1;
        while (-1 != (t = d.rt())) {
            switch (t) {
                case 0:
                    o.id = d.ri();
                    break;
                case 1:
                    o.lv = d.ri();
                    break;
                case 2:
                    o.star = d.ri();
                    break;
                case 3:
                    o.exp = d.ri();
                    break;
                default:
                    d.nod();
                    break;
            }
        }
        return o;
    }
    function _encode_longzhuang_data(self, st) {
        var se = Sproto.SprotoCore.GetSerialize(st, 4);
        if (self.id != undefined) {
            se.wi(self.id, 0);
        }
        if (self.lv != undefined) {
            se.wi(self.lv, 1);
        }
        if (self.star != undefined) {
            se.wi(self.star, 2);
        }
        if (self.exp != undefined) {
            se.wi(self.exp, 3);
        }
        return Sproto.SprotoCore.CloseSerialize(se);
    }
    Sproto.ALL_DICT["longzhuang_data"] = { en: _encode_longzhuang_data, de: _decode_longzhuang_data };
    var player_data = (function () {
        function player_data() {
        }
        return player_data;
    }());
    Sproto.player_data = player_data;
    __reflect(player_data.prototype, "Sproto.player_data");
    function _decode_player_data(d) {
        var o = new player_data;
        var t = -1;
        while (-1 != (t = d.rt())) {
            switch (t) {
                case 0:
                    o.name = d.rs();
                    break;
                case 1:
                    o.id = d.ri();
                    break;
                case 2:
                    o.vip = d.ri();
                    break;
                case 3:
                    o.guildid = d.ri();
                    break;
                case 4:
                    o.guildName = d.rs();
                    break;
                default:
                    d.nod();
                    break;
            }
        }
        return o;
    }
    function _encode_player_data(self, st) {
        var se = Sproto.SprotoCore.GetSerialize(st, 5);
        if (self.name != undefined) {
            se.ws(self.name, 0);
        }
        if (self.id != undefined) {
            se.wi(self.id, 1);
        }
        if (self.vip != undefined) {
            se.wi(self.vip, 2);
        }
        if (self.guildid != undefined) {
            se.wi(self.guildid, 3);
        }
        if (self.guildName != undefined) {
            se.ws(self.guildName, 4);
        }
        return Sproto.SprotoCore.CloseSerialize(se);
    }
    Sproto.ALL_DICT["player_data"] = { en: _encode_player_data, de: _decode_player_data };
    var player_whole_data = (function () {
        function player_whole_data() {
        }
        return player_whole_data;
    }());
    Sproto.player_whole_data = player_whole_data;
    __reflect(player_whole_data.prototype, "Sproto.player_whole_data");
    function _decode_player_whole_data(d) {
        var o = new player_whole_data;
        var t = -1;
        while (-1 != (t = d.rt())) {
            switch (t) {
                case 0:
                    o.name = d.rs();
                    break;
                case 1:
                    o.job = d.ri();
                    break;
                case 2:
                    o.sex = d.ri();
                    break;
                case 3:
                    o.vip = d.ri();
                    break;
                case 4:
                    o.level = d.ri();
                    break;
                case 5:
                    o.power = d.ri();
                    break;
                case 6:
                    o.offlineTime = d.ri();
                    break;
                case 7:
                    o.guildId = d.ri();
                    break;
                case 8:
                    o.guildName = d.rs();
                    break;
                case 9:
                    o.dbid = d.ri();
                    break;
                case 10:
                    o.headframe = d.ri();
                    break;
                default:
                    d.nod();
                    break;
            }
        }
        return o;
    }
    function _encode_player_whole_data(self, st) {
        var se = Sproto.SprotoCore.GetSerialize(st, 11);
        if (self.name != undefined) {
            se.ws(self.name, 0);
        }
        if (self.job != undefined) {
            se.wi(self.job, 1);
        }
        if (self.sex != undefined) {
            se.wi(self.sex, 2);
        }
        if (self.vip != undefined) {
            se.wi(self.vip, 3);
        }
        if (self.level != undefined) {
            se.wi(self.level, 4);
        }
        if (self.power != undefined) {
            se.wi(self.power, 5);
        }
        if (self.offlineTime != undefined) {
            se.wi(self.offlineTime, 6);
        }
        if (self.guildId != undefined) {
            se.wi(self.guildId, 7);
        }
        if (self.guildName != undefined) {
            se.ws(self.guildName, 8);
        }
        if (self.dbid != undefined) {
            se.wi(self.dbid, 9);
        }
        if (self.headframe != undefined) {
            se.wi(self.headframe, 10);
        }
        return Sproto.SprotoCore.CloseSerialize(se);
    }
    Sproto.ALL_DICT["player_whole_data"] = { en: _encode_player_whole_data, de: _decode_player_whole_data };
    var position = (function () {
        function position() {
        }
        return position;
    }());
    Sproto.position = position;
    __reflect(position.prototype, "Sproto.position");
    function _decode_position(d) {
        var o = new position;
        var t = -1;
        while (-1 != (t = d.rt())) {
            switch (t) {
                case 0:
                    o.x = d.ri();
                    break;
                case 1:
                    o.y = d.ri();
                    break;
                default:
                    d.nod();
                    break;
            }
        }
        return o;
    }
    function _encode_position(self, st) {
        var se = Sproto.SprotoCore.GetSerialize(st, 2);
        if (self.x != undefined) {
            se.wi(self.x, 0);
        }
        if (self.y != undefined) {
            se.wi(self.y, 1);
        }
        return Sproto.SprotoCore.CloseSerialize(se);
    }
    Sproto.ALL_DICT["position"] = { en: _encode_position, de: _decode_position };
    var qualifyingMgr_rank_data = (function () {
        function qualifyingMgr_rank_data() {
        }
        return qualifyingMgr_rank_data;
    }());
    Sproto.qualifyingMgr_rank_data = qualifyingMgr_rank_data;
    __reflect(qualifyingMgr_rank_data.prototype, "Sproto.qualifyingMgr_rank_data");
    function _decode_qualifyingMgr_rank_data(d) {
        var o = new qualifyingMgr_rank_data;
        var t = -1;
        while (-1 != (t = d.rt())) {
            switch (t) {
                case 0:
                    o.name = d.rs();
                    break;
                case 1:
                    o.server = d.ri();
                    break;
                case 2:
                    o.point = d.ri();
                    break;
                default:
                    d.nod();
                    break;
            }
        }
        return o;
    }
    function _encode_qualifyingMgr_rank_data(self, st) {
        var se = Sproto.SprotoCore.GetSerialize(st, 3);
        if (self.name != undefined) {
            se.ws(self.name, 0);
        }
        if (self.server != undefined) {
            se.wi(self.server, 1);
        }
        if (self.point != undefined) {
            se.wi(self.point, 2);
        }
        return Sproto.SprotoCore.CloseSerialize(se);
    }
    Sproto.ALL_DICT["qualifyingMgr_rank_data"] = { en: _encode_qualifyingMgr_rank_data, de: _decode_qualifyingMgr_rank_data };
    var rank_data = (function () {
        function rank_data() {
        }
        return rank_data;
    }());
    Sproto.rank_data = rank_data;
    __reflect(rank_data.prototype, "Sproto.rank_data");
    function _decode_rank_data(d) {
        var o = new rank_data;
        var t = -1;
        while (-1 != (t = d.rt())) {
            switch (t) {
                case 0:
                    o.id = d.ri();
                    break;
                case 1:
                    o.name = d.rs();
                    break;
                case 2:
                    o.rank = d.ri();
                    break;
                case 3:
                    o.value = d.ri();
                    break;
                default:
                    d.nod();
                    break;
            }
        }
        return o;
    }
    function _encode_rank_data(self, st) {
        var se = Sproto.SprotoCore.GetSerialize(st, 4);
        if (self.id != undefined) {
            se.wi(self.id, 0);
        }
        if (self.name != undefined) {
            se.ws(self.name, 1);
        }
        if (self.rank != undefined) {
            se.wi(self.rank, 2);
        }
        if (self.value != undefined) {
            se.wi(self.value, 3);
        }
        return Sproto.SprotoCore.CloseSerialize(se);
    }
    Sproto.ALL_DICT["rank_data"] = { en: _encode_rank_data, de: _decode_rank_data };
    var rank_subrole = (function () {
        function rank_subrole() {
        }
        return rank_subrole;
    }());
    Sproto.rank_subrole = rank_subrole;
    __reflect(rank_subrole.prototype, "Sproto.rank_subrole");
    function _decode_rank_subrole(d) {
        var o = new rank_subrole;
        var t = -1;
        while (-1 != (t = d.rt())) {
            switch (t) {
                case 0:
                    o.job = d.ri();
                    break;
                case 1:
                    o.sex = d.ri();
                    break;
                case 2:
                    o.clothID = d.ri();
                    break;
                case 3:
                    o.swordID = d.ri();
                    break;
                case 4:
                    o.wingOpenStatus = d.rb();
                    break;
                case 5:
                    o.wingLevel = d.ri();
                    break;
                case 6:
                    o.zhuangbei = d.ria();
                    break;
                case 7:
                    o.legendDress = d.ri();
                    break;
                case 8:
                    o.exring = d.ri();
                    break;
                case 9:
                    o.wingDress = d.ri();
                    break;
                case 10:
                    o.godswordDress = d.ri();
                    break;
                default:
                    d.nod();
                    break;
            }
        }
        return o;
    }
    function _encode_rank_subrole(self, st) {
        var se = Sproto.SprotoCore.GetSerialize(st, 11);
        if (self.job != undefined) {
            se.wi(self.job, 0);
        }
        if (self.sex != undefined) {
            se.wi(self.sex, 1);
        }
        if (self.clothID != undefined) {
            se.wi(self.clothID, 2);
        }
        if (self.swordID != undefined) {
            se.wi(self.swordID, 3);
        }
        if (self.wingOpenStatus != undefined) {
            se.wb(self.wingOpenStatus, 4);
        }
        if (self.wingLevel != undefined) {
            se.wi(self.wingLevel, 5);
        }
        if (self.zhuangbei != undefined) {
            se.wia(self.zhuangbei, 6);
        }
        if (self.legendDress != undefined) {
            se.wi(self.legendDress, 7);
        }
        if (self.exring != undefined) {
            se.wi(self.exring, 8);
        }
        if (self.wingDress != undefined) {
            se.wi(self.wingDress, 9);
        }
        if (self.godswordDress != undefined) {
            se.wi(self.godswordDress, 10);
        }
        return Sproto.SprotoCore.CloseSerialize(se);
    }
    Sproto.ALL_DICT["rank_subrole"] = { en: _encode_rank_subrole, de: _decode_rank_subrole };
    var reward_data = (function () {
        function reward_data() {
        }
        return reward_data;
    }());
    Sproto.reward_data = reward_data;
    __reflect(reward_data.prototype, "Sproto.reward_data");
    function _decode_reward_data(d) {
        var o = new reward_data;
        var t = -1;
        while (-1 != (t = d.rt())) {
            switch (t) {
                case 0:
                    o.type = d.ri();
                    break;
                case 1:
                    o.id = d.ri();
                    break;
                case 2:
                    o.count = d.ri();
                    break;
                default:
                    d.nod();
                    break;
            }
        }
        return o;
    }
    function _encode_reward_data(self, st) {
        var se = Sproto.SprotoCore.GetSerialize(st, 3);
        if (self.type != undefined) {
            se.wi(self.type, 0);
        }
        if (self.id != undefined) {
            se.wi(self.id, 1);
        }
        if (self.count != undefined) {
            se.wi(self.count, 2);
        }
        return Sproto.SprotoCore.CloseSerialize(se);
    }
    Sproto.ALL_DICT["reward_data"] = { en: _encode_reward_data, de: _decode_reward_data };
    var ring_data = (function () {
        function ring_data() {
        }
        return ring_data;
    }());
    Sproto.ring_data = ring_data;
    __reflect(ring_data.prototype, "Sproto.ring_data");
    function _decode_ring_data(d) {
        var o = new ring_data;
        var t = -1;
        while (-1 != (t = d.rt())) {
            switch (t) {
                case 0:
                    o.id = d.ri();
                    break;
                case 1:
                    o.level = d.ri();
                    break;
                default:
                    d.nod();
                    break;
            }
        }
        return o;
    }
    function _encode_ring_data(self, st) {
        var se = Sproto.SprotoCore.GetSerialize(st, 2);
        if (self.id != undefined) {
            se.wi(self.id, 0);
        }
        if (self.level != undefined) {
            se.wi(self.level, 1);
        }
        return Sproto.SprotoCore.CloseSerialize(se);
    }
    Sproto.ALL_DICT["ring_data"] = { en: _encode_ring_data, de: _decode_ring_data };
    var role_data = (function () {
        function role_data() {
        }
        return role_data;
    }());
    Sproto.role_data = role_data;
    __reflect(role_data.prototype, "Sproto.role_data");
    function _decode_role_data(d) {
        var o = new role_data;
        var t = -1;
        while (-1 != (t = d.rt())) {
            switch (t) {
                case 0:
                    o.power = d.ri();
                    break;
                case 1:
                    o.skillDatas = d.ria();
                    break;
                case 2:
                    o.skillSortDatas = d.ria();
                    break;
                case 3:
                    o.equipsData = d.roa("equip_data");
                    break;
                case 4:
                    o.attributeData = d.ria();
                    break;
                case 5:
                    o.attributeExData = d.ria();
                    break;
                default:
                    d.nod();
                    break;
            }
        }
        return o;
    }
    function _encode_role_data(self, st) {
        var se = Sproto.SprotoCore.GetSerialize(st, 6);
        if (self.power != undefined) {
            se.wi(self.power, 0);
        }
        if (self.skillDatas != undefined) {
            se.wia(self.skillDatas, 1);
        }
        if (self.skillSortDatas != undefined) {
            se.wia(self.skillSortDatas, 2);
        }
        if (self.equipsData != undefined) {
            se.woa("equip_data", self.equipsData, 3);
        }
        if (self.attributeData != undefined) {
            se.wia(self.attributeData, 4);
        }
        if (self.attributeExData != undefined) {
            se.wia(self.attributeExData, 5);
        }
        return Sproto.SprotoCore.CloseSerialize(se);
    }
    Sproto.ALL_DICT["role_data"] = { en: _encode_role_data, de: _decode_role_data };
    var rune_data = (function () {
        function rune_data() {
        }
        return rune_data;
    }());
    Sproto.rune_data = rune_data;
    __reflect(rune_data.prototype, "Sproto.rune_data");
    function _decode_rune_data(d) {
        var o = new rune_data;
        var t = -1;
        while (-1 != (t = d.rt())) {
            switch (t) {
                case 0:
                    o.id = d.ri();
                    break;
                default:
                    d.nod();
                    break;
            }
        }
        return o;
    }
    function _encode_rune_data(self, st) {
        var se = Sproto.SprotoCore.GetSerialize(st, 1);
        if (self.id != undefined) {
            se.wi(self.id, 0);
        }
        return Sproto.SprotoCore.CloseSerialize(se);
    }
    Sproto.ALL_DICT["rune_data"] = { en: _encode_rune_data, de: _decode_rune_data };
    var share_date = (function () {
        function share_date() {
        }
        return share_date;
    }());
    Sproto.share_date = share_date;
    __reflect(share_date.prototype, "Sproto.share_date");
    function _decode_share_date(d) {
        var o = new share_date;
        var t = -1;
        while (-1 != (t = d.rt())) {
            switch (t) {
                case 0:
                    o.shareId = d.ri();
                    break;
                case 1:
                    o.showInfo = d.roa("client_chat_param");
                    break;
                case 2:
                    o.player = d.roa("player_data");
                    break;
                default:
                    d.nod();
                    break;
            }
        }
        return o;
    }
    function _encode_share_date(self, st) {
        var se = Sproto.SprotoCore.GetSerialize(st, 3);
        if (self.shareId != undefined) {
            se.wi(self.shareId, 0);
        }
        if (self.showInfo != undefined) {
            se.woa("client_chat_param", self.showInfo, 1);
        }
        if (self.player != undefined) {
            se.woa("player_data", self.player, 2);
        }
        return Sproto.SprotoCore.CloseSerialize(se);
    }
    Sproto.ALL_DICT["share_date"] = { en: _encode_share_date, de: _decode_share_date };
    var shop_data = (function () {
        function shop_data() {
        }
        return shop_data;
    }());
    Sproto.shop_data = shop_data;
    __reflect(shop_data.prototype, "Sproto.shop_data");
    function _decode_shop_data(d) {
        var o = new shop_data;
        var t = -1;
        while (-1 != (t = d.rt())) {
            switch (t) {
                case 0:
                    o.type = d.ri();
                    break;
                case 1:
                    o.datas = d.ria();
                    break;
                case 2:
                    o.limittime = d.ria();
                    break;
                default:
                    d.nod();
                    break;
            }
        }
        return o;
    }
    function _encode_shop_data(self, st) {
        var se = Sproto.SprotoCore.GetSerialize(st, 3);
        if (self.type != undefined) {
            se.wi(self.type, 0);
        }
        if (self.datas != undefined) {
            se.wia(self.datas, 1);
        }
        if (self.limittime != undefined) {
            se.wia(self.limittime, 2);
        }
        return Sproto.SprotoCore.CloseSerialize(se);
    }
    Sproto.ALL_DICT["shop_data"] = { en: _encode_shop_data, de: _decode_shop_data };
    var showInfo_data = (function () {
        function showInfo_data() {
        }
        return showInfo_data;
    }());
    Sproto.showInfo_data = showInfo_data;
    __reflect(showInfo_data.prototype, "Sproto.showInfo_data");
    function _decode_showInfo_data(d) {
        var o = new showInfo_data;
        var t = -1;
        while (-1 != (t = d.rt())) {
            switch (t) {
                case 0:
                    o.itemId = d.ri();
                    break;
                case 1:
                    o.petId = d.ri();
                    break;
                case 2:
                    o.treasureId = d.ri();
                    break;
                case 3:
                    o.rideId = d.ri();
                    break;
                case 4:
                    o.fubenId = d.ri();
                    break;
                default:
                    d.nod();
                    break;
            }
        }
        return o;
    }
    function _encode_showInfo_data(self, st) {
        var se = Sproto.SprotoCore.GetSerialize(st, 5);
        if (self.itemId != undefined) {
            se.wi(self.itemId, 0);
        }
        if (self.petId != undefined) {
            se.wi(self.petId, 1);
        }
        if (self.treasureId != undefined) {
            se.wi(self.treasureId, 2);
        }
        if (self.rideId != undefined) {
            se.wi(self.rideId, 3);
        }
        if (self.fubenId != undefined) {
            se.wi(self.fubenId, 4);
        }
        return Sproto.SprotoCore.CloseSerialize(se);
    }
    Sproto.ALL_DICT["showInfo_data"] = { en: _encode_showInfo_data, de: _decode_showInfo_data };
    var star_data = (function () {
        function star_data() {
        }
        return star_data;
    }());
    Sproto.star_data = star_data;
    __reflect(star_data.prototype, "Sproto.star_data");
    function _decode_star_data(d) {
        var o = new star_data;
        var t = -1;
        while (-1 != (t = d.rt())) {
            switch (t) {
                case 0:
                    o.id = d.ri();
                    break;
                case 1:
                    o.isOpen = d.rb();
                    break;
                default:
                    d.nod();
                    break;
            }
        }
        return o;
    }
    function _encode_star_data(self, st) {
        var se = Sproto.SprotoCore.GetSerialize(st, 2);
        if (self.id != undefined) {
            se.wi(self.id, 0);
        }
        if (self.isOpen != undefined) {
            se.wb(self.isOpen, 1);
        }
        return Sproto.SprotoCore.CloseSerialize(se);
    }
    Sproto.ALL_DICT["star_data"] = { en: _encode_star_data, de: _decode_star_data };
    var title_data = (function () {
        function title_data() {
        }
        return title_data;
    }());
    Sproto.title_data = title_data;
    __reflect(title_data.prototype, "Sproto.title_data");
    function _decode_title_data(d) {
        var o = new title_data;
        var t = -1;
        while (-1 != (t = d.rt())) {
            switch (t) {
                case 0:
                    o.titleid = d.ri();
                    break;
                case 1:
                    o.titleEndTime = d.ri();
                    break;
                default:
                    d.nod();
                    break;
            }
        }
        return o;
    }
    function _encode_title_data(self, st) {
        var se = Sproto.SprotoCore.GetSerialize(st, 2);
        if (self.titleid != undefined) {
            se.wi(self.titleid, 0);
        }
        if (self.titleEndTime != undefined) {
            se.wi(self.titleEndTime, 1);
        }
        return Sproto.SprotoCore.CloseSerialize(se);
    }
    Sproto.ALL_DICT["title_data"] = { en: _encode_title_data, de: _decode_title_data };
    var wings_data = (function () {
        function wings_data() {
        }
        return wings_data;
    }());
    Sproto.wings_data = wings_data;
    __reflect(wings_data.prototype, "Sproto.wings_data");
    function _decode_wings_data(d) {
        var o = new wings_data;
        var t = -1;
        while (-1 != (t = d.rt())) {
            switch (t) {
                case 0:
                    o.lv = d.ri();
                    break;
                case 1:
                    o.star = d.ri();
                    break;
                case 2:
                    o.exp = d.ri();
                    break;
                case 3:
                    o.openStatus = d.rb();
                    break;
                case 4:
                    o.equipDatas = d.roa("item_data");
                    break;
                case 5:
                    o.dressId = d.ri();
                    break;
                default:
                    d.nod();
                    break;
            }
        }
        return o;
    }
    function _encode_wings_data(self, st) {
        var se = Sproto.SprotoCore.GetSerialize(st, 6);
        if (self.lv != undefined) {
            se.wi(self.lv, 0);
        }
        if (self.star != undefined) {
            se.wi(self.star, 1);
        }
        if (self.exp != undefined) {
            se.wi(self.exp, 2);
        }
        if (self.openStatus != undefined) {
            se.wb(self.openStatus, 3);
        }
        if (self.equipDatas != undefined) {
            se.woa("item_data", self.equipDatas, 4);
        }
        if (self.dressId != undefined) {
            se.wi(self.dressId, 5);
        }
        return Sproto.SprotoCore.CloseSerialize(se);
    }
    Sproto.ALL_DICT["wings_data"] = { en: _encode_wings_data, de: _decode_wings_data };
    var zhuzai_data = (function () {
        function zhuzai_data() {
        }
        return zhuzai_data;
    }());
    Sproto.zhuzai_data = zhuzai_data;
    __reflect(zhuzai_data.prototype, "Sproto.zhuzai_data");
    function _decode_zhuzai_data(d) {
        var o = new zhuzai_data;
        var t = -1;
        while (-1 != (t = d.rt())) {
            switch (t) {
                case 0:
                    o.id = d.ri();
                    break;
                case 1:
                    o.rank = d.ri();
                    break;
                case 2:
                    o.growupID = d.ri();
                    break;
                default:
                    d.nod();
                    break;
            }
        }
        return o;
    }
    function _encode_zhuzai_data(self, st) {
        var se = Sproto.SprotoCore.GetSerialize(st, 3);
        if (self.id != undefined) {
            se.wi(self.id, 0);
        }
        if (self.rank != undefined) {
            se.wi(self.rank, 1);
        }
        if (self.growupID != undefined) {
            se.wi(self.growupID, 2);
        }
        return Sproto.SprotoCore.CloseSerialize(se);
    }
    Sproto.ALL_DICT["zhuzai_data"] = { en: _encode_zhuzai_data, de: _decode_zhuzai_data };
})(Sproto || (Sproto = {}));
//# sourceMappingURL=gametype.js.map