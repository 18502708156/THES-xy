// Generated by sprotodump. DO NOT EDIT!
var __reflect = (this && this.__reflect) || function (p, c, t) {
    p.__class__ = c, t ? t.push(c) : t = [c], p.__types__ = p.__types__ ? t.concat(p.__types__) : t;
};
var Sproto;
(function (Sproto) {
    var cs_ladder_buy_count_request = (function () {
        function cs_ladder_buy_count_request() {
        }
        return cs_ladder_buy_count_request;
    }());
    Sproto.cs_ladder_buy_count_request = cs_ladder_buy_count_request;
    __reflect(cs_ladder_buy_count_request.prototype, "Sproto.cs_ladder_buy_count_request");
    function _decode_cs_ladder_buy_count_request(d) {
        var o = new cs_ladder_buy_count_request;
        var t = -1;
        while (-1 != (t = d.rt())) {
            switch (t) {
                case 0:
                    o.ladderType = d.ri();
                    break;
                default:
                    d.nod();
                    break;
            }
        }
        return o;
    }
    function _encode_cs_ladder_buy_count_request(self, st) {
        var se = Sproto.SprotoCore.GetSerialize(st, 1);
        if (self.ladderType != undefined) {
            se.wi(self.ladderType, 0);
        }
        return Sproto.SprotoCore.CloseSerialize(se);
    }
    Sproto.ALL_DICT["cs_ladder_buy_count_request"] = { en: _encode_cs_ladder_buy_count_request, de: _decode_cs_ladder_buy_count_request };
    var cs_ladder_get_rank_info_request = (function () {
        function cs_ladder_get_rank_info_request() {
        }
        return cs_ladder_get_rank_info_request;
    }());
    Sproto.cs_ladder_get_rank_info_request = cs_ladder_get_rank_info_request;
    __reflect(cs_ladder_get_rank_info_request.prototype, "Sproto.cs_ladder_get_rank_info_request");
    function _decode_cs_ladder_get_rank_info_request(d) {
        var o = new cs_ladder_get_rank_info_request;
        var t = -1;
        while (-1 != (t = d.rt())) {
            switch (t) {
                case 0:
                    o.ladderType = d.ri();
                    break;
                default:
                    d.nod();
                    break;
            }
        }
        return o;
    }
    function _encode_cs_ladder_get_rank_info_request(self, st) {
        var se = Sproto.SprotoCore.GetSerialize(st, 1);
        if (self.ladderType != undefined) {
            se.wi(self.ladderType, 0);
        }
        return Sproto.SprotoCore.CloseSerialize(se);
    }
    Sproto.ALL_DICT["cs_ladder_get_rank_info_request"] = { en: _encode_cs_ladder_get_rank_info_request, de: _decode_cs_ladder_get_rank_info_request };
    var cs_ladder_get_some_one_request = (function () {
        function cs_ladder_get_some_one_request() {
        }
        return cs_ladder_get_some_one_request;
    }());
    Sproto.cs_ladder_get_some_one_request = cs_ladder_get_some_one_request;
    __reflect(cs_ladder_get_some_one_request.prototype, "Sproto.cs_ladder_get_some_one_request");
    function _decode_cs_ladder_get_some_one_request(d) {
        var o = new cs_ladder_get_some_one_request;
        var t = -1;
        while (-1 != (t = d.rt())) {
            switch (t) {
                case 0:
                    o.ladderType = d.ri();
                    break;
                default:
                    d.nod();
                    break;
            }
        }
        return o;
    }
    function _encode_cs_ladder_get_some_one_request(self, st) {
        var se = Sproto.SprotoCore.GetSerialize(st, 1);
        if (self.ladderType != undefined) {
            se.wi(self.ladderType, 0);
        }
        return Sproto.SprotoCore.CloseSerialize(se);
    }
    Sproto.ALL_DICT["cs_ladder_get_some_one_request"] = { en: _encode_cs_ladder_get_some_one_request, de: _decode_cs_ladder_get_some_one_request };
    var cs_ladder_get_week_reward_request = (function () {
        function cs_ladder_get_week_reward_request() {
        }
        return cs_ladder_get_week_reward_request;
    }());
    Sproto.cs_ladder_get_week_reward_request = cs_ladder_get_week_reward_request;
    __reflect(cs_ladder_get_week_reward_request.prototype, "Sproto.cs_ladder_get_week_reward_request");
    function _decode_cs_ladder_get_week_reward_request(d) {
        var o = new cs_ladder_get_week_reward_request;
        var t = -1;
        while (-1 != (t = d.rt())) {
            switch (t) {
                case 0:
                    o.ladderType = d.ri();
                    break;
                default:
                    d.nod();
                    break;
            }
        }
        return o;
    }
    function _encode_cs_ladder_get_week_reward_request(self, st) {
        var se = Sproto.SprotoCore.GetSerialize(st, 1);
        if (self.ladderType != undefined) {
            se.wi(self.ladderType, 0);
        }
        return Sproto.SprotoCore.CloseSerialize(se);
    }
    Sproto.ALL_DICT["cs_ladder_get_week_reward_request"] = { en: _encode_cs_ladder_get_week_reward_request, de: _decode_cs_ladder_get_week_reward_request };
    var cs_ladder_info_request = (function () {
        function cs_ladder_info_request() {
        }
        return cs_ladder_info_request;
    }());
    Sproto.cs_ladder_info_request = cs_ladder_info_request;
    __reflect(cs_ladder_info_request.prototype, "Sproto.cs_ladder_info_request");
    function _decode_cs_ladder_info_request(d) {
        var o = new cs_ladder_info_request;
        var t = -1;
        while (-1 != (t = d.rt())) {
            switch (t) {
                default:
                    d.nod();
                    break;
            }
        }
        return o;
    }
    function _encode_cs_ladder_info_request(self, st) {
        var se = Sproto.SprotoCore.GetSerialize(st, 0);
        return Sproto.SprotoCore.CloseSerialize(se);
    }
    Sproto.ALL_DICT["cs_ladder_info_request"] = { en: _encode_cs_ladder_info_request, de: _decode_cs_ladder_info_request };
    var cs_ladder_start_play_request = (function () {
        function cs_ladder_start_play_request() {
        }
        return cs_ladder_start_play_request;
    }());
    Sproto.cs_ladder_start_play_request = cs_ladder_start_play_request;
    __reflect(cs_ladder_start_play_request.prototype, "Sproto.cs_ladder_start_play_request");
    function _decode_cs_ladder_start_play_request(d) {
        var o = new cs_ladder_start_play_request;
        var t = -1;
        while (-1 != (t = d.rt())) {
            switch (t) {
                case 0:
                    o.type = d.ri();
                    break;
                case 1:
                    o.ladderType = d.ri();
                    break;
                default:
                    d.nod();
                    break;
            }
        }
        return o;
    }
    function _encode_cs_ladder_start_play_request(self, st) {
        var se = Sproto.SprotoCore.GetSerialize(st, 2);
        if (self.type != undefined) {
            se.wi(self.type, 0);
        }
        if (self.ladderType != undefined) {
            se.wi(self.ladderType, 1);
        }
        return Sproto.SprotoCore.CloseSerialize(se);
    }
    Sproto.ALL_DICT["cs_ladder_start_play_request"] = { en: _encode_cs_ladder_start_play_request, de: _decode_cs_ladder_start_play_request };
    var cs_ladder_worship_request = (function () {
        function cs_ladder_worship_request() {
        }
        return cs_ladder_worship_request;
    }());
    Sproto.cs_ladder_worship_request = cs_ladder_worship_request;
    __reflect(cs_ladder_worship_request.prototype, "Sproto.cs_ladder_worship_request");
    function _decode_cs_ladder_worship_request(d) {
        var o = new cs_ladder_worship_request;
        var t = -1;
        while (-1 != (t = d.rt())) {
            switch (t) {
                case 0:
                    o.ladderType = d.ri();
                    break;
                default:
                    d.nod();
                    break;
            }
        }
        return o;
    }
    function _encode_cs_ladder_worship_request(self, st) {
        var se = Sproto.SprotoCore.GetSerialize(st, 1);
        if (self.ladderType != undefined) {
            se.wi(self.ladderType, 0);
        }
        return Sproto.SprotoCore.CloseSerialize(se);
    }
    Sproto.ALL_DICT["cs_ladder_worship_request"] = { en: _encode_cs_ladder_worship_request, de: _decode_cs_ladder_worship_request };
})(Sproto || (Sproto = {}));
//# sourceMappingURL=ladder_c2s.js.map