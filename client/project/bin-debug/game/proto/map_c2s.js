// Generated by sprotodump. DO NOT EDIT!
var __reflect = (this && this.__reflect) || function (p, c, t) {
    p.__class__ = c, t ? t.push(c) : t = [c], p.__types__ = p.__types__ ? t.concat(p.__types__) : t;
};
var Sproto;
(function (Sproto) {
    var cs_map_enter_request = (function () {
        function cs_map_enter_request() {
        }
        return cs_map_enter_request;
    }());
    Sproto.cs_map_enter_request = cs_map_enter_request;
    __reflect(cs_map_enter_request.prototype, "Sproto.cs_map_enter_request");
    function _decode_cs_map_enter_request(d) {
        var o = new cs_map_enter_request;
        var t = -1;
        while (-1 != (t = d.rt())) {
            switch (t) {
                case 0:
                    o.mapid = d.ri();
                    break;
                default:
                    d.nod();
                    break;
            }
        }
        return o;
    }
    function _encode_cs_map_enter_request(self, st) {
        var se = Sproto.SprotoCore.GetSerialize(st, 1);
        if (self.mapid != undefined) {
            se.wi(self.mapid, 0);
        }
        return Sproto.SprotoCore.CloseSerialize(se);
    }
    Sproto.ALL_DICT["cs_map_enter_request"] = { en: _encode_cs_map_enter_request, de: _decode_cs_map_enter_request };
    var cs_map_enter_response = (function () {
        function cs_map_enter_response() {
        }
        return cs_map_enter_response;
    }());
    Sproto.cs_map_enter_response = cs_map_enter_response;
    __reflect(cs_map_enter_response.prototype, "Sproto.cs_map_enter_response");
    function _decode_cs_map_enter_response(d) {
        var o = new cs_map_enter_response;
        var t = -1;
        while (-1 != (t = d.rt())) {
            switch (t) {
                case 0:
                    o.ret = d.rb();
                    break;
                default:
                    d.nod();
                    break;
            }
        }
        return o;
    }
    function _encode_cs_map_enter_response(self, st) {
        var se = Sproto.SprotoCore.GetSerialize(st, 1);
        if (self.ret != undefined) {
            se.wb(self.ret, 0);
        }
        return Sproto.SprotoCore.CloseSerialize(se);
    }
    Sproto.ALL_DICT["cs_map_enter_response"] = { en: _encode_cs_map_enter_response, de: _decode_cs_map_enter_response };
    var cs_map_fly_request = (function () {
        function cs_map_fly_request() {
        }
        return cs_map_fly_request;
    }());
    Sproto.cs_map_fly_request = cs_map_fly_request;
    __reflect(cs_map_fly_request.prototype, "Sproto.cs_map_fly_request");
    function _decode_cs_map_fly_request(d) {
        var o = new cs_map_fly_request;
        var t = -1;
        while (-1 != (t = d.rt())) {
            switch (t) {
                case 0:
                    o.mapid = d.ri();
                    break;
                case 1:
                    o.x = d.ri();
                    break;
                case 2:
                    o.y = d.ri();
                    break;
                default:
                    d.nod();
                    break;
            }
        }
        return o;
    }
    function _encode_cs_map_fly_request(self, st) {
        var se = Sproto.SprotoCore.GetSerialize(st, 3);
        if (self.mapid != undefined) {
            se.wi(self.mapid, 0);
        }
        if (self.x != undefined) {
            se.wi(self.x, 1);
        }
        if (self.y != undefined) {
            se.wi(self.y, 2);
        }
        return Sproto.SprotoCore.CloseSerialize(se);
    }
    Sproto.ALL_DICT["cs_map_fly_request"] = { en: _encode_cs_map_fly_request, de: _decode_cs_map_fly_request };
    var cs_map_leave_request = (function () {
        function cs_map_leave_request() {
        }
        return cs_map_leave_request;
    }());
    Sproto.cs_map_leave_request = cs_map_leave_request;
    __reflect(cs_map_leave_request.prototype, "Sproto.cs_map_leave_request");
    function _decode_cs_map_leave_request(d) {
        var o = new cs_map_leave_request;
        var t = -1;
        while (-1 != (t = d.rt())) {
            switch (t) {
                case 0:
                    o.mapid = d.ri();
                    break;
                default:
                    d.nod();
                    break;
            }
        }
        return o;
    }
    function _encode_cs_map_leave_request(self, st) {
        var se = Sproto.SprotoCore.GetSerialize(st, 1);
        if (self.mapid != undefined) {
            se.wi(self.mapid, 0);
        }
        return Sproto.SprotoCore.CloseSerialize(se);
    }
    Sproto.ALL_DICT["cs_map_leave_request"] = { en: _encode_cs_map_leave_request, de: _decode_cs_map_leave_request };
    var cs_map_leave_response = (function () {
        function cs_map_leave_response() {
        }
        return cs_map_leave_response;
    }());
    Sproto.cs_map_leave_response = cs_map_leave_response;
    __reflect(cs_map_leave_response.prototype, "Sproto.cs_map_leave_response");
    function _decode_cs_map_leave_response(d) {
        var o = new cs_map_leave_response;
        var t = -1;
        while (-1 != (t = d.rt())) {
            switch (t) {
                case 0:
                    o.ret = d.rb();
                    break;
                default:
                    d.nod();
                    break;
            }
        }
        return o;
    }
    function _encode_cs_map_leave_response(self, st) {
        var se = Sproto.SprotoCore.GetSerialize(st, 1);
        if (self.ret != undefined) {
            se.wb(self.ret, 0);
        }
        return Sproto.SprotoCore.CloseSerialize(se);
    }
    Sproto.ALL_DICT["cs_map_leave_response"] = { en: _encode_cs_map_leave_response, de: _decode_cs_map_leave_response };
    var cs_map_maincity_channel_info_request = (function () {
        function cs_map_maincity_channel_info_request() {
        }
        return cs_map_maincity_channel_info_request;
    }());
    Sproto.cs_map_maincity_channel_info_request = cs_map_maincity_channel_info_request;
    __reflect(cs_map_maincity_channel_info_request.prototype, "Sproto.cs_map_maincity_channel_info_request");
    function _decode_cs_map_maincity_channel_info_request(d) {
        var o = new cs_map_maincity_channel_info_request;
        var t = -1;
        while (-1 != (t = d.rt())) {
            switch (t) {
                default:
                    d.nod();
                    break;
            }
        }
        return o;
    }
    function _encode_cs_map_maincity_channel_info_request(self, st) {
        var se = Sproto.SprotoCore.GetSerialize(st, 0);
        return Sproto.SprotoCore.CloseSerialize(se);
    }
    Sproto.ALL_DICT["cs_map_maincity_channel_info_request"] = { en: _encode_cs_map_maincity_channel_info_request, de: _decode_cs_map_maincity_channel_info_request };
    var cs_map_maincity_channel_info_response = (function () {
        function cs_map_maincity_channel_info_response() {
        }
        return cs_map_maincity_channel_info_response;
    }());
    Sproto.cs_map_maincity_channel_info_response = cs_map_maincity_channel_info_response;
    __reflect(cs_map_maincity_channel_info_response.prototype, "Sproto.cs_map_maincity_channel_info_response");
    function _decode_cs_map_maincity_channel_info_response(d) {
        var o = new cs_map_maincity_channel_info_response;
        var t = -1;
        while (-1 != (t = d.rt())) {
            switch (t) {
                case 0:
                    o.channels = d.roa("maincity_channel_data");
                    break;
                default:
                    d.nod();
                    break;
            }
        }
        return o;
    }
    function _encode_cs_map_maincity_channel_info_response(self, st) {
        var se = Sproto.SprotoCore.GetSerialize(st, 1);
        if (self.channels != undefined) {
            se.woa("maincity_channel_data", self.channels, 0);
        }
        return Sproto.SprotoCore.CloseSerialize(se);
    }
    Sproto.ALL_DICT["cs_map_maincity_channel_info_response"] = { en: _encode_cs_map_maincity_channel_info_response, de: _decode_cs_map_maincity_channel_info_response };
    var cs_map_maincity_enter_request = (function () {
        function cs_map_maincity_enter_request() {
        }
        return cs_map_maincity_enter_request;
    }());
    Sproto.cs_map_maincity_enter_request = cs_map_maincity_enter_request;
    __reflect(cs_map_maincity_enter_request.prototype, "Sproto.cs_map_maincity_enter_request");
    function _decode_cs_map_maincity_enter_request(d) {
        var o = new cs_map_maincity_enter_request;
        var t = -1;
        while (-1 != (t = d.rt())) {
            switch (t) {
                case 0:
                    o.channelId = d.ri();
                    break;
                default:
                    d.nod();
                    break;
            }
        }
        return o;
    }
    function _encode_cs_map_maincity_enter_request(self, st) {
        var se = Sproto.SprotoCore.GetSerialize(st, 1);
        if (self.channelId != undefined) {
            se.wi(self.channelId, 0);
        }
        return Sproto.SprotoCore.CloseSerialize(se);
    }
    Sproto.ALL_DICT["cs_map_maincity_enter_request"] = { en: _encode_cs_map_maincity_enter_request, de: _decode_cs_map_maincity_enter_request };
    var cs_map_maincity_enter_response = (function () {
        function cs_map_maincity_enter_response() {
        }
        return cs_map_maincity_enter_response;
    }());
    Sproto.cs_map_maincity_enter_response = cs_map_maincity_enter_response;
    __reflect(cs_map_maincity_enter_response.prototype, "Sproto.cs_map_maincity_enter_response");
    function _decode_cs_map_maincity_enter_response(d) {
        var o = new cs_map_maincity_enter_response;
        var t = -1;
        while (-1 != (t = d.rt())) {
            switch (t) {
                case 0:
                    o.ret = d.rb();
                    break;
                default:
                    d.nod();
                    break;
            }
        }
        return o;
    }
    function _encode_cs_map_maincity_enter_response(self, st) {
        var se = Sproto.SprotoCore.GetSerialize(st, 1);
        if (self.ret != undefined) {
            se.wb(self.ret, 0);
        }
        return Sproto.SprotoCore.CloseSerialize(se);
    }
    Sproto.ALL_DICT["cs_map_maincity_enter_response"] = { en: _encode_cs_map_maincity_enter_response, de: _decode_cs_map_maincity_enter_response };
    var cs_map_maincity_worship_request = (function () {
        function cs_map_maincity_worship_request() {
        }
        return cs_map_maincity_worship_request;
    }());
    Sproto.cs_map_maincity_worship_request = cs_map_maincity_worship_request;
    __reflect(cs_map_maincity_worship_request.prototype, "Sproto.cs_map_maincity_worship_request");
    function _decode_cs_map_maincity_worship_request(d) {
        var o = new cs_map_maincity_worship_request;
        var t = -1;
        while (-1 != (t = d.rt())) {
            switch (t) {
                case 0:
                    o.type = d.ri();
                    break;
                default:
                    d.nod();
                    break;
            }
        }
        return o;
    }
    function _encode_cs_map_maincity_worship_request(self, st) {
        var se = Sproto.SprotoCore.GetSerialize(st, 1);
        if (self.type != undefined) {
            se.wi(self.type, 0);
        }
        return Sproto.SprotoCore.CloseSerialize(se);
    }
    Sproto.ALL_DICT["cs_map_maincity_worship_request"] = { en: _encode_cs_map_maincity_worship_request, de: _decode_cs_map_maincity_worship_request };
    var cs_map_maincity_worship_response = (function () {
        function cs_map_maincity_worship_response() {
        }
        return cs_map_maincity_worship_response;
    }());
    Sproto.cs_map_maincity_worship_response = cs_map_maincity_worship_response;
    __reflect(cs_map_maincity_worship_response.prototype, "Sproto.cs_map_maincity_worship_response");
    function _decode_cs_map_maincity_worship_response(d) {
        var o = new cs_map_maincity_worship_response;
        var t = -1;
        while (-1 != (t = d.rt())) {
            switch (t) {
                case 0:
                    o.ret = d.rb();
                    break;
                default:
                    d.nod();
                    break;
            }
        }
        return o;
    }
    function _encode_cs_map_maincity_worship_response(self, st) {
        var se = Sproto.SprotoCore.GetSerialize(st, 1);
        if (self.ret != undefined) {
            se.wb(self.ret, 0);
        }
        return Sproto.SprotoCore.CloseSerialize(se);
    }
    Sproto.ALL_DICT["cs_map_maincity_worship_response"] = { en: _encode_cs_map_maincity_worship_response, de: _decode_cs_map_maincity_worship_response };
    var cs_map_move_request = (function () {
        function cs_map_move_request() {
        }
        return cs_map_move_request;
    }());
    Sproto.cs_map_move_request = cs_map_move_request;
    __reflect(cs_map_move_request.prototype, "Sproto.cs_map_move_request");
    function _decode_cs_map_move_request(d) {
        var o = new cs_map_move_request;
        var t = -1;
        while (-1 != (t = d.rt())) {
            switch (t) {
                case 0:
                    o.mapid = d.ri();
                    break;
                case 1:
                    o.x = d.ri();
                    break;
                case 2:
                    o.y = d.ri();
                    break;
                default:
                    d.nod();
                    break;
            }
        }
        return o;
    }
    function _encode_cs_map_move_request(self, st) {
        var se = Sproto.SprotoCore.GetSerialize(st, 3);
        if (self.mapid != undefined) {
            se.wi(self.mapid, 0);
        }
        if (self.x != undefined) {
            se.wi(self.x, 1);
        }
        if (self.y != undefined) {
            se.wi(self.y, 2);
        }
        return Sproto.SprotoCore.CloseSerialize(se);
    }
    Sproto.ALL_DICT["cs_map_move_request"] = { en: _encode_cs_map_move_request, de: _decode_cs_map_move_request };
    var maincity_channel_data = (function () {
        function maincity_channel_data() {
        }
        return maincity_channel_data;
    }());
    Sproto.maincity_channel_data = maincity_channel_data;
    __reflect(maincity_channel_data.prototype, "Sproto.maincity_channel_data");
    function _decode_maincity_channel_data(d) {
        var o = new maincity_channel_data;
        var t = -1;
        while (-1 != (t = d.rt())) {
            switch (t) {
                case 0:
                    o.id = d.ri();
                    break;
                case 1:
                    o.count = d.ri();
                    break;
                default:
                    d.nod();
                    break;
            }
        }
        return o;
    }
    function _encode_maincity_channel_data(self, st) {
        var se = Sproto.SprotoCore.GetSerialize(st, 2);
        if (self.id != undefined) {
            se.wi(self.id, 0);
        }
        if (self.count != undefined) {
            se.wi(self.count, 1);
        }
        return Sproto.SprotoCore.CloseSerialize(se);
    }
    Sproto.ALL_DICT["maincity_channel_data"] = { en: _encode_maincity_channel_data, de: _decode_maincity_channel_data };
})(Sproto || (Sproto = {}));
//# sourceMappingURL=map_c2s.js.map