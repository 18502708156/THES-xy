// Generated by sprotodump. DO NOT EDIT!
var __reflect = (this && this.__reflect) || function (p, c, t) {
    p.__class__ = c, t ? t.push(c) : t = [c], p.__types__ = p.__types__ ? t.concat(p.__types__) : t;
};
var Sproto;
(function (Sproto) {
    var champion_shows = (function () {
        function champion_shows() {
        }
        return champion_shows;
    }());
    Sproto.champion_shows = champion_shows;
    __reflect(champion_shows.prototype, "Sproto.champion_shows");
    function _decode_champion_shows(d) {
        var o = new champion_shows;
        var t = -1;
        while (-1 != (t = d.rt())) {
            switch (t) {
                case 0:
                    o.shows = d.ria();
                    break;
                case 1:
                    o.job = d.ri();
                    break;
                case 2:
                    o.sex = d.ri();
                    break;
                case 3:
                    o.id = d.ri();
                    break;
                case 4:
                    o.name = d.rs();
                    break;
                case 5:
                    o.serverid = d.ri();
                    break;
                case 6:
                    o.guildid = d.ri();
                    break;
                case 7:
                    o.guildname = d.rs();
                    break;
                case 8:
                    o.level = d.ri();
                    break;
                default:
                    d.nod();
                    break;
            }
        }
        return o;
    }
    function _encode_champion_shows(self, st) {
        var se = Sproto.SprotoCore.GetSerialize(st, 9);
        if (self.shows != undefined) {
            se.wia(self.shows, 0);
        }
        if (self.job != undefined) {
            se.wi(self.job, 1);
        }
        if (self.sex != undefined) {
            se.wi(self.sex, 2);
        }
        if (self.id != undefined) {
            se.wi(self.id, 3);
        }
        if (self.name != undefined) {
            se.ws(self.name, 4);
        }
        if (self.serverid != undefined) {
            se.wi(self.serverid, 5);
        }
        if (self.guildid != undefined) {
            se.wi(self.guildid, 6);
        }
        if (self.guildname != undefined) {
            se.ws(self.guildname, 7);
        }
        if (self.level != undefined) {
            se.wi(self.level, 8);
        }
        return Sproto.SprotoCore.CloseSerialize(se);
    }
    Sproto.ALL_DICT["champion_shows"] = { en: _encode_champion_shows, de: _decode_champion_shows };
    var map_player = (function () {
        function map_player() {
        }
        return map_player;
    }());
    Sproto.map_player = map_player;
    __reflect(map_player.prototype, "Sproto.map_player");
    function _decode_map_player(d) {
        var o = new map_player;
        var t = -1;
        while (-1 != (t = d.rt())) {
            switch (t) {
                case 0:
                    o.id = d.ri();
                    break;
                case 1:
                    o.x = d.ri();
                    break;
                case 2:
                    o.y = d.ri();
                    break;
                case 3:
                    o.name = d.rs();
                    break;
                case 4:
                    o.level = d.ri();
                    break;
                case 5:
                    o.job = d.ri();
                    break;
                case 6:
                    o.sex = d.ri();
                    break;
                case 7:
                    o.power = d.ri();
                    break;
                case 8:
                    o.shows = d.ria();
                    break;
                case 9:
                    o.status = d.ri();
                    break;
                case 10:
                    o.guildid = d.ri();
                    break;
                case 11:
                    o.guildname = d.rs();
                    break;
                case 12:
                    o.serverid = d.ri();
                    break;
                default:
                    d.nod();
                    break;
            }
        }
        return o;
    }
    function _encode_map_player(self, st) {
        var se = Sproto.SprotoCore.GetSerialize(st, 13);
        if (self.id != undefined) {
            se.wi(self.id, 0);
        }
        if (self.x != undefined) {
            se.wi(self.x, 1);
        }
        if (self.y != undefined) {
            se.wi(self.y, 2);
        }
        if (self.name != undefined) {
            se.ws(self.name, 3);
        }
        if (self.level != undefined) {
            se.wi(self.level, 4);
        }
        if (self.job != undefined) {
            se.wi(self.job, 5);
        }
        if (self.sex != undefined) {
            se.wi(self.sex, 6);
        }
        if (self.power != undefined) {
            se.wi(self.power, 7);
        }
        if (self.shows != undefined) {
            se.wia(self.shows, 8);
        }
        if (self.status != undefined) {
            se.wi(self.status, 9);
        }
        if (self.guildid != undefined) {
            se.wi(self.guildid, 10);
        }
        if (self.guildname != undefined) {
            se.ws(self.guildname, 11);
        }
        if (self.serverid != undefined) {
            se.wi(self.serverid, 12);
        }
        return Sproto.SprotoCore.CloseSerialize(se);
    }
    Sproto.ALL_DICT["map_player"] = { en: _encode_map_player, de: _decode_map_player };
    var sc_map_enter_request = (function () {
        function sc_map_enter_request() {
        }
        return sc_map_enter_request;
    }());
    Sproto.sc_map_enter_request = sc_map_enter_request;
    __reflect(sc_map_enter_request.prototype, "Sproto.sc_map_enter_request");
    function _decode_sc_map_enter_request(d) {
        var o = new sc_map_enter_request;
        var t = -1;
        while (-1 != (t = d.rt())) {
            switch (t) {
                case 0:
                    o.mapid = d.ri();
                    break;
                case 1:
                    o.x = d.ri();
                    break;
                case 2:
                    o.y = d.ri();
                    break;
                case 3:
                    o.myself = d.ro("map_player");
                    break;
                case 4:
                    o.entitylist = d.roa("map_player");
                    break;
                default:
                    d.nod();
                    break;
            }
        }
        return o;
    }
    function _encode_sc_map_enter_request(self, st) {
        var se = Sproto.SprotoCore.GetSerialize(st, 5);
        if (self.mapid != undefined) {
            se.wi(self.mapid, 0);
        }
        if (self.x != undefined) {
            se.wi(self.x, 1);
        }
        if (self.y != undefined) {
            se.wi(self.y, 2);
        }
        if (self.myself != undefined) {
            se.wo("map_player", self.myself, 3);
        }
        if (self.entitylist != undefined) {
            se.woa("map_player", self.entitylist, 4);
        }
        return Sproto.SprotoCore.CloseSerialize(se);
    }
    Sproto.ALL_DICT["sc_map_enter_request"] = { en: _encode_sc_map_enter_request, de: _decode_sc_map_enter_request };
    var sc_map_maincity_info_request = (function () {
        function sc_map_maincity_info_request() {
        }
        return sc_map_maincity_info_request;
    }());
    Sproto.sc_map_maincity_info_request = sc_map_maincity_info_request;
    __reflect(sc_map_maincity_info_request.prototype, "Sproto.sc_map_maincity_info_request");
    function _decode_sc_map_maincity_info_request(d) {
        var o = new sc_map_maincity_info_request;
        var t = -1;
        while (-1 != (t = d.rt())) {
            switch (t) {
                case 0:
                    o.championid = d.ri();
                    break;
                case 1:
                    o.charismaNum = d.ri();
                    break;
                case 2:
                    o.channelid = d.ri();
                    break;
                case 3:
                    o.worship = d.ri();
                    break;
                case 4:
                    o.shows = d.ro("champion_shows");
                    break;
                case 5:
                    o.people = d.ri();
                    break;
                default:
                    d.nod();
                    break;
            }
        }
        return o;
    }
    function _encode_sc_map_maincity_info_request(self, st) {
        var se = Sproto.SprotoCore.GetSerialize(st, 6);
        if (self.championid != undefined) {
            se.wi(self.championid, 0);
        }
        if (self.charismaNum != undefined) {
            se.wi(self.charismaNum, 1);
        }
        if (self.channelid != undefined) {
            se.wi(self.channelid, 2);
        }
        if (self.worship != undefined) {
            se.wi(self.worship, 3);
        }
        if (self.shows != undefined) {
            se.wo("champion_shows", self.shows, 4);
        }
        if (self.people != undefined) {
            se.wi(self.people, 5);
        }
        return Sproto.SprotoCore.CloseSerialize(se);
    }
    Sproto.ALL_DICT["sc_map_maincity_info_request"] = { en: _encode_sc_map_maincity_info_request, de: _decode_sc_map_maincity_info_request };
    var sc_map_other_enter_request = (function () {
        function sc_map_other_enter_request() {
        }
        return sc_map_other_enter_request;
    }());
    Sproto.sc_map_other_enter_request = sc_map_other_enter_request;
    __reflect(sc_map_other_enter_request.prototype, "Sproto.sc_map_other_enter_request");
    function _decode_sc_map_other_enter_request(d) {
        var o = new sc_map_other_enter_request;
        var t = -1;
        while (-1 != (t = d.rt())) {
            switch (t) {
                case 0:
                    o.entity = d.ro("map_player");
                    break;
                case 1:
                    o.mapid = d.ri();
                    break;
                default:
                    d.nod();
                    break;
            }
        }
        return o;
    }
    function _encode_sc_map_other_enter_request(self, st) {
        var se = Sproto.SprotoCore.GetSerialize(st, 2);
        if (self.entity != undefined) {
            se.wo("map_player", self.entity, 0);
        }
        if (self.mapid != undefined) {
            se.wi(self.mapid, 1);
        }
        return Sproto.SprotoCore.CloseSerialize(se);
    }
    Sproto.ALL_DICT["sc_map_other_enter_request"] = { en: _encode_sc_map_other_enter_request, de: _decode_sc_map_other_enter_request };
    var sc_map_other_fly_request = (function () {
        function sc_map_other_fly_request() {
        }
        return sc_map_other_fly_request;
    }());
    Sproto.sc_map_other_fly_request = sc_map_other_fly_request;
    __reflect(sc_map_other_fly_request.prototype, "Sproto.sc_map_other_fly_request");
    function _decode_sc_map_other_fly_request(d) {
        var o = new sc_map_other_fly_request;
        var t = -1;
        while (-1 != (t = d.rt())) {
            switch (t) {
                case 0:
                    o.id = d.ri();
                    break;
                case 1:
                    o.x = d.ri();
                    break;
                case 2:
                    o.y = d.ri();
                    break;
                case 3:
                    o.mapid = d.ri();
                    break;
                default:
                    d.nod();
                    break;
            }
        }
        return o;
    }
    function _encode_sc_map_other_fly_request(self, st) {
        var se = Sproto.SprotoCore.GetSerialize(st, 4);
        if (self.id != undefined) {
            se.wi(self.id, 0);
        }
        if (self.x != undefined) {
            se.wi(self.x, 1);
        }
        if (self.y != undefined) {
            se.wi(self.y, 2);
        }
        if (self.mapid != undefined) {
            se.wi(self.mapid, 3);
        }
        return Sproto.SprotoCore.CloseSerialize(se);
    }
    Sproto.ALL_DICT["sc_map_other_fly_request"] = { en: _encode_sc_map_other_fly_request, de: _decode_sc_map_other_fly_request };
    var sc_map_other_leave_request = (function () {
        function sc_map_other_leave_request() {
        }
        return sc_map_other_leave_request;
    }());
    Sproto.sc_map_other_leave_request = sc_map_other_leave_request;
    __reflect(sc_map_other_leave_request.prototype, "Sproto.sc_map_other_leave_request");
    function _decode_sc_map_other_leave_request(d) {
        var o = new sc_map_other_leave_request;
        var t = -1;
        while (-1 != (t = d.rt())) {
            switch (t) {
                case 0:
                    o.id = d.ri();
                    break;
                case 1:
                    o.mapid = d.ri();
                    break;
                default:
                    d.nod();
                    break;
            }
        }
        return o;
    }
    function _encode_sc_map_other_leave_request(self, st) {
        var se = Sproto.SprotoCore.GetSerialize(st, 2);
        if (self.id != undefined) {
            se.wi(self.id, 0);
        }
        if (self.mapid != undefined) {
            se.wi(self.mapid, 1);
        }
        return Sproto.SprotoCore.CloseSerialize(se);
    }
    Sproto.ALL_DICT["sc_map_other_leave_request"] = { en: _encode_sc_map_other_leave_request, de: _decode_sc_map_other_leave_request };
    var sc_map_other_move_request = (function () {
        function sc_map_other_move_request() {
        }
        return sc_map_other_move_request;
    }());
    Sproto.sc_map_other_move_request = sc_map_other_move_request;
    __reflect(sc_map_other_move_request.prototype, "Sproto.sc_map_other_move_request");
    function _decode_sc_map_other_move_request(d) {
        var o = new sc_map_other_move_request;
        var t = -1;
        while (-1 != (t = d.rt())) {
            switch (t) {
                case 0:
                    o.id = d.ri();
                    break;
                case 1:
                    o.x = d.ri();
                    break;
                case 2:
                    o.y = d.ri();
                    break;
                case 3:
                    o.mapid = d.ri();
                    break;
                default:
                    d.nod();
                    break;
            }
        }
        return o;
    }
    function _encode_sc_map_other_move_request(self, st) {
        var se = Sproto.SprotoCore.GetSerialize(st, 4);
        if (self.id != undefined) {
            se.wi(self.id, 0);
        }
        if (self.x != undefined) {
            se.wi(self.x, 1);
        }
        if (self.y != undefined) {
            se.wi(self.y, 2);
        }
        if (self.mapid != undefined) {
            se.wi(self.mapid, 3);
        }
        return Sproto.SprotoCore.CloseSerialize(se);
    }
    Sproto.ALL_DICT["sc_map_other_move_request"] = { en: _encode_sc_map_other_move_request, de: _decode_sc_map_other_move_request };
    var sc_map_player_status_request = (function () {
        function sc_map_player_status_request() {
        }
        return sc_map_player_status_request;
    }());
    Sproto.sc_map_player_status_request = sc_map_player_status_request;
    __reflect(sc_map_player_status_request.prototype, "Sproto.sc_map_player_status_request");
    function _decode_sc_map_player_status_request(d) {
        var o = new sc_map_player_status_request;
        var t = -1;
        while (-1 != (t = d.rt())) {
            switch (t) {
                case 0:
                    o.id = d.ri();
                    break;
                case 1:
                    o.status = d.ri();
                    break;
                case 2:
                    o.mapid = d.ri();
                    break;
                default:
                    d.nod();
                    break;
            }
        }
        return o;
    }
    function _encode_sc_map_player_status_request(self, st) {
        var se = Sproto.SprotoCore.GetSerialize(st, 3);
        if (self.id != undefined) {
            se.wi(self.id, 0);
        }
        if (self.status != undefined) {
            se.wi(self.status, 1);
        }
        if (self.mapid != undefined) {
            se.wi(self.mapid, 2);
        }
        return Sproto.SprotoCore.CloseSerialize(se);
    }
    Sproto.ALL_DICT["sc_map_player_status_request"] = { en: _encode_sc_map_player_status_request, de: _decode_sc_map_player_status_request };
    var sc_map_player_update_request = (function () {
        function sc_map_player_update_request() {
        }
        return sc_map_player_update_request;
    }());
    Sproto.sc_map_player_update_request = sc_map_player_update_request;
    __reflect(sc_map_player_update_request.prototype, "Sproto.sc_map_player_update_request");
    function _decode_sc_map_player_update_request(d) {
        var o = new sc_map_player_update_request;
        var t = -1;
        while (-1 != (t = d.rt())) {
            switch (t) {
                case 0:
                    o.id = d.ri();
                    break;
                case 1:
                    o.mapid = d.ri();
                    break;
                case 2:
                    o.player = d.ro("map_player");
                    break;
                default:
                    d.nod();
                    break;
            }
        }
        return o;
    }
    function _encode_sc_map_player_update_request(self, st) {
        var se = Sproto.SprotoCore.GetSerialize(st, 3);
        if (self.id != undefined) {
            se.wi(self.id, 0);
        }
        if (self.mapid != undefined) {
            se.wi(self.mapid, 1);
        }
        if (self.player != undefined) {
            se.wo("map_player", self.player, 2);
        }
        return Sproto.SprotoCore.CloseSerialize(se);
    }
    Sproto.ALL_DICT["sc_map_player_update_request"] = { en: _encode_sc_map_player_update_request, de: _decode_sc_map_player_update_request };
})(Sproto || (Sproto = {}));
//# sourceMappingURL=map_s2c.js.map