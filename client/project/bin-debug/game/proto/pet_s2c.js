// Generated by sprotodump. DO NOT EDIT!
var __reflect = (this && this.__reflect) || function (p, c, t) {
    p.__class__ = c, t ? t.push(c) : t = [c], p.__types__ = p.__types__ ? t.concat(p.__types__) : t;
};
var Sproto;
(function (Sproto) {
    var pet_fly_data = (function () {
        function pet_fly_data() {
        }
        return pet_fly_data;
    }());
    Sproto.pet_fly_data = pet_fly_data;
    __reflect(pet_fly_data.prototype, "Sproto.pet_fly_data");
    function _decode_pet_fly_data(d) {
        var o = new pet_fly_data;
        var t = -1;
        while (-1 != (t = d.rt())) {
            switch (t) {
                case 0:
                    o.level = d.ri();
                    break;
                case 1:
                    o.exp = d.ri();
                    break;
                default:
                    d.nod();
                    break;
            }
        }
        return o;
    }
    function _encode_pet_fly_data(self, st) {
        var se = Sproto.SprotoCore.GetSerialize(st, 2);
        if (self.level != undefined) {
            se.wi(self.level, 0);
        }
        if (self.exp != undefined) {
            se.wi(self.exp, 1);
        }
        return Sproto.SprotoCore.CloseSerialize(se);
    }
    Sproto.ALL_DICT["pet_fly_data"] = { en: _encode_pet_fly_data, de: _decode_pet_fly_data };
    var pet_info = (function () {
        function pet_info() {
        }
        return pet_info;
    }());
    Sproto.pet_info = pet_info;
    __reflect(pet_info.prototype, "Sproto.pet_info");
    function _decode_pet_info(d) {
        var o = new pet_info;
        var t = -1;
        while (-1 != (t = d.rt())) {
            switch (t) {
                case 0:
                    o.petid = d.ri();
                    break;
                case 1:
                    o.exp = d.ri();
                    break;
                case 2:
                    o.level = d.ri();
                    break;
                case 3:
                    o.name = d.rs();
                    break;
                case 4:
                    o.buffs = d.ria();
                    break;
                case 5:
                    o.giftexp = d.ri();
                    break;
                case 6:
                    o.giftlv = d.ri();
                    break;
                case 7:
                    o.xilian = d.ri();
                    break;
                case 8:
                    o.xilianSkills = d.ria();
                    break;
                case 9:
                    o.flydata = d.ro("pet_fly_data");
                    break;
                default:
                    d.nod();
                    break;
            }
        }
        return o;
    }
    function _encode_pet_info(self, st) {
        var se = Sproto.SprotoCore.GetSerialize(st, 10);
        if (self.petid != undefined) {
            se.wi(self.petid, 0);
        }
        if (self.exp != undefined) {
            se.wi(self.exp, 1);
        }
        if (self.level != undefined) {
            se.wi(self.level, 2);
        }
        if (self.name != undefined) {
            se.ws(self.name, 3);
        }
        if (self.buffs != undefined) {
            se.wia(self.buffs, 4);
        }
        if (self.giftexp != undefined) {
            se.wi(self.giftexp, 5);
        }
        if (self.giftlv != undefined) {
            se.wi(self.giftlv, 6);
        }
        if (self.xilian != undefined) {
            se.wi(self.xilian, 7);
        }
        if (self.xilianSkills != undefined) {
            se.wia(self.xilianSkills, 8);
        }
        if (self.flydata != undefined) {
            se.wo("pet_fly_data", self.flydata, 9);
        }
        return Sproto.SprotoCore.CloseSerialize(se);
    }
    Sproto.ALL_DICT["pet_info"] = { en: _encode_pet_info, de: _decode_pet_info };
    var sc_pet_catch_request = (function () {
        function sc_pet_catch_request() {
        }
        return sc_pet_catch_request;
    }());
    Sproto.sc_pet_catch_request = sc_pet_catch_request;
    __reflect(sc_pet_catch_request.prototype, "Sproto.sc_pet_catch_request");
    function _decode_sc_pet_catch_request(d) {
        var o = new sc_pet_catch_request;
        var t = -1;
        while (-1 != (t = d.rt())) {
            switch (t) {
                case 0:
                    o.monsterid = d.ri();
                    break;
                case 1:
                    o.catchtime = d.ri();
                    break;
                default:
                    d.nod();
                    break;
            }
        }
        return o;
    }
    function _encode_sc_pet_catch_request(self, st) {
        var se = Sproto.SprotoCore.GetSerialize(st, 2);
        if (self.monsterid != undefined) {
            se.wi(self.monsterid, 0);
        }
        if (self.catchtime != undefined) {
            se.wi(self.catchtime, 1);
        }
        return Sproto.SprotoCore.CloseSerialize(se);
    }
    Sproto.ALL_DICT["sc_pet_catch_request"] = { en: _encode_sc_pet_catch_request, de: _decode_sc_pet_catch_request };
    var sc_pet_catch_result_request = (function () {
        function sc_pet_catch_result_request() {
        }
        return sc_pet_catch_result_request;
    }());
    Sproto.sc_pet_catch_result_request = sc_pet_catch_result_request;
    __reflect(sc_pet_catch_result_request.prototype, "Sproto.sc_pet_catch_result_request");
    function _decode_sc_pet_catch_result_request(d) {
        var o = new sc_pet_catch_result_request;
        var t = -1;
        while (-1 != (t = d.rt())) {
            switch (t) {
                case 0:
                    o.result = d.rb();
                    break;
                default:
                    d.nod();
                    break;
            }
        }
        return o;
    }
    function _encode_sc_pet_catch_result_request(self, st) {
        var se = Sproto.SprotoCore.GetSerialize(st, 1);
        if (self.result != undefined) {
            se.wb(self.result, 0);
        }
        return Sproto.SprotoCore.CloseSerialize(se);
    }
    Sproto.ALL_DICT["sc_pet_catch_result_request"] = { en: _encode_sc_pet_catch_result_request, de: _decode_sc_pet_catch_result_request };
    var sc_pet_init_request = (function () {
        function sc_pet_init_request() {
        }
        return sc_pet_init_request;
    }());
    Sproto.sc_pet_init_request = sc_pet_init_request;
    __reflect(sc_pet_init_request.prototype, "Sproto.sc_pet_init_request");
    function _decode_sc_pet_init_request(d) {
        var o = new sc_pet_init_request;
        var t = -1;
        while (-1 != (t = d.rt())) {
            switch (t) {
                case 0:
                    o.list = d.roa("pet_info");
                    break;
                case 1:
                    o.outbound = d.ria();
                    break;
                case 2:
                    o.showid = d.ri();
                    break;
                default:
                    d.nod();
                    break;
            }
        }
        return o;
    }
    function _encode_sc_pet_init_request(self, st) {
        var se = Sproto.SprotoCore.GetSerialize(st, 3);
        if (self.list != undefined) {
            se.woa("pet_info", self.list, 0);
        }
        if (self.outbound != undefined) {
            se.wia(self.outbound, 1);
        }
        if (self.showid != undefined) {
            se.wi(self.showid, 2);
        }
        return Sproto.SprotoCore.CloseSerialize(se);
    }
    Sproto.ALL_DICT["sc_pet_init_request"] = { en: _encode_sc_pet_init_request, de: _decode_sc_pet_init_request };
    var sc_pet_update_request = (function () {
        function sc_pet_update_request() {
        }
        return sc_pet_update_request;
    }());
    Sproto.sc_pet_update_request = sc_pet_update_request;
    __reflect(sc_pet_update_request.prototype, "Sproto.sc_pet_update_request");
    function _decode_sc_pet_update_request(d) {
        var o = new sc_pet_update_request;
        var t = -1;
        while (-1 != (t = d.rt())) {
            switch (t) {
                case 0:
                    o.petinfo = d.ro("pet_info");
                    break;
                default:
                    d.nod();
                    break;
            }
        }
        return o;
    }
    function _encode_sc_pet_update_request(self, st) {
        var se = Sproto.SprotoCore.GetSerialize(st, 1);
        if (self.petinfo != undefined) {
            se.wo("pet_info", self.petinfo, 0);
        }
        return Sproto.SprotoCore.CloseSerialize(se);
    }
    Sproto.ALL_DICT["sc_pet_update_request"] = { en: _encode_sc_pet_update_request, de: _decode_sc_pet_update_request };
})(Sproto || (Sproto = {}));
//# sourceMappingURL=pet_s2c.js.map