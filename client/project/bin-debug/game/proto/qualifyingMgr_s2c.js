// Generated by sprotodump. DO NOT EDIT!
var __reflect = (this && this.__reflect) || function (p, c, t) {
    p.__class__ = c, t ? t.push(c) : t = [c], p.__types__ = p.__types__ ? t.concat(p.__types__) : t;
};
var Sproto;
(function (Sproto) {
    var qualifyingMgr_gamble_data = (function () {
        function qualifyingMgr_gamble_data() {
        }
        return qualifyingMgr_gamble_data;
    }());
    Sproto.qualifyingMgr_gamble_data = qualifyingMgr_gamble_data;
    __reflect(qualifyingMgr_gamble_data.prototype, "Sproto.qualifyingMgr_gamble_data");
    function _decode_qualifyingMgr_gamble_data(d) {
        var o = new qualifyingMgr_gamble_data;
        var t = -1;
        while (-1 != (t = d.rt())) {
            switch (t) {
                case 0:
                    o.field = d.ri();
                    break;
                case 1:
                    o.no = d.ri();
                    break;
                case 2:
                    o.typ = d.ri();
                    break;
                default:
                    d.nod();
                    break;
            }
        }
        return o;
    }
    function _encode_qualifyingMgr_gamble_data(self, st) {
        var se = Sproto.SprotoCore.GetSerialize(st, 3);
        if (self.field != undefined) {
            se.wi(self.field, 0);
        }
        if (self.no != undefined) {
            se.wi(self.no, 1);
        }
        if (self.typ != undefined) {
            se.wi(self.typ, 2);
        }
        return Sproto.SprotoCore.CloseSerialize(se);
    }
    Sproto.ALL_DICT["qualifyingMgr_gamble_data"] = { en: _encode_qualifyingMgr_gamble_data, de: _decode_qualifyingMgr_gamble_data };
    var qualifyingMgr_role_data = (function () {
        function qualifyingMgr_role_data() {
        }
        return qualifyingMgr_role_data;
    }());
    Sproto.qualifyingMgr_role_data = qualifyingMgr_role_data;
    __reflect(qualifyingMgr_role_data.prototype, "Sproto.qualifyingMgr_role_data");
    function _decode_qualifyingMgr_role_data(d) {
        var o = new qualifyingMgr_role_data;
        var t = -1;
        while (-1 != (t = d.rt())) {
            switch (t) {
                case 0:
                    o.win = d.rb();
                    break;
                case 1:
                    o.name = d.rs();
                    break;
                case 2:
                    o.serverid = d.ri();
                    break;
                case 3:
                    o.level = d.ri();
                    break;
                case 4:
                    o.power = d.ri();
                    break;
                case 5:
                    o.addpoint = d.ri();
                    break;
                default:
                    d.nod();
                    break;
            }
        }
        return o;
    }
    function _encode_qualifyingMgr_role_data(self, st) {
        var se = Sproto.SprotoCore.GetSerialize(st, 6);
        if (self.win != undefined) {
            se.wb(self.win, 0);
        }
        if (self.name != undefined) {
            se.ws(self.name, 1);
        }
        if (self.serverid != undefined) {
            se.wi(self.serverid, 2);
        }
        if (self.level != undefined) {
            se.wi(self.level, 3);
        }
        if (self.power != undefined) {
            se.wi(self.power, 4);
        }
        if (self.addpoint != undefined) {
            se.wi(self.addpoint, 5);
        }
        return Sproto.SprotoCore.CloseSerialize(se);
    }
    Sproto.ALL_DICT["qualifyingMgr_role_data"] = { en: _encode_qualifyingMgr_role_data, de: _decode_qualifyingMgr_role_data };
    var qualifying_player_data = (function () {
        function qualifying_player_data() {
        }
        return qualifying_player_data;
    }());
    Sproto.qualifying_player_data = qualifying_player_data;
    __reflect(qualifying_player_data.prototype, "Sproto.qualifying_player_data");
    function _decode_qualifying_player_data(d) {
        var o = new qualifying_player_data;
        var t = -1;
        while (-1 != (t = d.rt())) {
            switch (t) {
                case 0:
                    o.no = d.ri();
                    break;
                case 1:
                    o.name = d.rs();
                    break;
                case 2:
                    o.server = d.ri();
                    break;
                case 3:
                    o.lv = d.ri();
                    break;
                case 4:
                    o.power = d.ri();
                    break;
                case 5:
                    o.shows = d.ro("entity_shows");
                    break;
                case 6:
                    o.job = d.ri();
                    break;
                case 7:
                    o.sex = d.ri();
                    break;
                default:
                    d.nod();
                    break;
            }
        }
        return o;
    }
    function _encode_qualifying_player_data(self, st) {
        var se = Sproto.SprotoCore.GetSerialize(st, 8);
        if (self.no != undefined) {
            se.wi(self.no, 0);
        }
        if (self.name != undefined) {
            se.ws(self.name, 1);
        }
        if (self.server != undefined) {
            se.wi(self.server, 2);
        }
        if (self.lv != undefined) {
            se.wi(self.lv, 3);
        }
        if (self.power != undefined) {
            se.wi(self.power, 4);
        }
        if (self.shows != undefined) {
            se.wo("entity_shows", self.shows, 5);
        }
        if (self.job != undefined) {
            se.wi(self.job, 6);
        }
        if (self.sex != undefined) {
            se.wi(self.sex, 7);
        }
        return Sproto.SprotoCore.CloseSerialize(se);
    }
    Sproto.ALL_DICT["qualifying_player_data"] = { en: _encode_qualifying_player_data, de: _decode_qualifying_player_data };
    var qualifying_rank_data = (function () {
        function qualifying_rank_data() {
        }
        return qualifying_rank_data;
    }());
    Sproto.qualifying_rank_data = qualifying_rank_data;
    __reflect(qualifying_rank_data.prototype, "Sproto.qualifying_rank_data");
    function _decode_qualifying_rank_data(d) {
        var o = new qualifying_rank_data;
        var t = -1;
        while (-1 != (t = d.rt())) {
            switch (t) {
                case 0:
                    o.field = d.ri();
                    break;
                case 1:
                    o.noA = d.ri();
                    break;
                case 2:
                    o.noB = d.ri();
                    break;
                case 3:
                    o.winNo = d.ri();
                    break;
                case 4:
                    o.fightRecord = d.ria();
                    break;
                default:
                    d.nod();
                    break;
            }
        }
        return o;
    }
    function _encode_qualifying_rank_data(self, st) {
        var se = Sproto.SprotoCore.GetSerialize(st, 5);
        if (self.field != undefined) {
            se.wi(self.field, 0);
        }
        if (self.noA != undefined) {
            se.wi(self.noA, 1);
        }
        if (self.noB != undefined) {
            se.wi(self.noB, 2);
        }
        if (self.winNo != undefined) {
            se.wi(self.winNo, 3);
        }
        if (self.fightRecord != undefined) {
            se.wia(self.fightRecord, 4);
        }
        return Sproto.SprotoCore.CloseSerialize(se);
    }
    Sproto.ALL_DICT["qualifying_rank_data"] = { en: _encode_qualifying_rank_data, de: _decode_qualifying_rank_data };
    var sc_qualifyingMgr_info_res_request = (function () {
        function sc_qualifyingMgr_info_res_request() {
        }
        return sc_qualifyingMgr_info_res_request;
    }());
    Sproto.sc_qualifyingMgr_info_res_request = sc_qualifyingMgr_info_res_request;
    __reflect(sc_qualifyingMgr_info_res_request.prototype, "Sproto.sc_qualifyingMgr_info_res_request");
    function _decode_sc_qualifyingMgr_info_res_request(d) {
        var o = new sc_qualifyingMgr_info_res_request;
        var t = -1;
        while (-1 != (t = d.rt())) {
            switch (t) {
                case 0:
                    o.sign = d.rb();
                    break;
                case 1:
                    o.type = d.ri();
                    break;
                case 2:
                    o.rank = d.ri();
                    break;
                case 3:
                    o.ret = d.rb();
                    break;
                case 4:
                    o.player_data = d.roa("qualifying_player_data");
                    break;
                case 5:
                    o.knockouttime16 = d.roa("qualifying_rank_data");
                    break;
                case 6:
                    o.knockouttime8 = d.roa("qualifying_rank_data");
                    break;
                case 7:
                    o.knockouttime4 = d.roa("qualifying_rank_data");
                    break;
                case 8:
                    o.knockouttime2 = d.roa("qualifying_rank_data");
                    break;
                case 9:
                    o.champion = d.ri();
                    break;
                case 10:
                    o.gamble = d.roa("qualifyingMgr_gamble_data");
                    break;
                default:
                    d.nod();
                    break;
            }
        }
        return o;
    }
    function _encode_sc_qualifyingMgr_info_res_request(self, st) {
        var se = Sproto.SprotoCore.GetSerialize(st, 11);
        if (self.sign != undefined) {
            se.wb(self.sign, 0);
        }
        if (self.type != undefined) {
            se.wi(self.type, 1);
        }
        if (self.rank != undefined) {
            se.wi(self.rank, 2);
        }
        if (self.ret != undefined) {
            se.wb(self.ret, 3);
        }
        if (self.player_data != undefined) {
            se.woa("qualifying_player_data", self.player_data, 4);
        }
        if (self.knockouttime16 != undefined) {
            se.woa("qualifying_rank_data", self.knockouttime16, 5);
        }
        if (self.knockouttime8 != undefined) {
            se.woa("qualifying_rank_data", self.knockouttime8, 6);
        }
        if (self.knockouttime4 != undefined) {
            se.woa("qualifying_rank_data", self.knockouttime4, 7);
        }
        if (self.knockouttime2 != undefined) {
            se.woa("qualifying_rank_data", self.knockouttime2, 8);
        }
        if (self.champion != undefined) {
            se.wi(self.champion, 9);
        }
        if (self.gamble != undefined) {
            se.woa("qualifyingMgr_gamble_data", self.gamble, 10);
        }
        return Sproto.SprotoCore.CloseSerialize(se);
    }
    Sproto.ALL_DICT["sc_qualifyingMgr_info_res_request"] = { en: _encode_sc_qualifyingMgr_info_res_request, de: _decode_sc_qualifyingMgr_info_res_request };
    var sc_qualifyingMgr_map_info_res_request = (function () {
        function sc_qualifyingMgr_map_info_res_request() {
        }
        return sc_qualifyingMgr_map_info_res_request;
    }());
    Sproto.sc_qualifyingMgr_map_info_res_request = sc_qualifyingMgr_map_info_res_request;
    __reflect(sc_qualifyingMgr_map_info_res_request.prototype, "Sproto.sc_qualifyingMgr_map_info_res_request");
    function _decode_sc_qualifyingMgr_map_info_res_request(d) {
        var o = new sc_qualifyingMgr_map_info_res_request;
        var t = -1;
        while (-1 != (t = d.rt())) {
            switch (t) {
                case 0:
                    o.ret = d.ri();
                    break;
                case 1:
                    o.rank_data = d.roa("qualifyingMgr_rank_data");
                    break;
                case 2:
                    o.timeout = d.ri();
                    break;
                case 3:
                    o.rankNo = d.ri();
                    break;
                case 4:
                    o.point = d.ri();
                    break;
                default:
                    d.nod();
                    break;
            }
        }
        return o;
    }
    function _encode_sc_qualifyingMgr_map_info_res_request(self, st) {
        var se = Sproto.SprotoCore.GetSerialize(st, 5);
        if (self.ret != undefined) {
            se.wi(self.ret, 0);
        }
        if (self.rank_data != undefined) {
            se.woa("qualifyingMgr_rank_data", self.rank_data, 1);
        }
        if (self.timeout != undefined) {
            se.wi(self.timeout, 2);
        }
        if (self.rankNo != undefined) {
            se.wi(self.rankNo, 3);
        }
        if (self.point != undefined) {
            se.wi(self.point, 4);
        }
        return Sproto.SprotoCore.CloseSerialize(se);
    }
    Sproto.ALL_DICT["sc_qualifyingMgr_map_info_res_request"] = { en: _encode_sc_qualifyingMgr_map_info_res_request, de: _decode_sc_qualifyingMgr_map_info_res_request };
    var sc_qualifyingMgr_war_info_request = (function () {
        function sc_qualifyingMgr_war_info_request() {
        }
        return sc_qualifyingMgr_war_info_request;
    }());
    Sproto.sc_qualifyingMgr_war_info_request = sc_qualifyingMgr_war_info_request;
    __reflect(sc_qualifyingMgr_war_info_request.prototype, "Sproto.sc_qualifyingMgr_war_info_request");
    function _decode_sc_qualifyingMgr_war_info_request(d) {
        var o = new sc_qualifyingMgr_war_info_request;
        var t = -1;
        while (-1 != (t = d.rt())) {
            switch (t) {
                case 0:
                    o.win = d.rb();
                    break;
                case 1:
                    o.roleData = d.roa("qualifyingMgr_role_data");
                    break;
                default:
                    d.nod();
                    break;
            }
        }
        return o;
    }
    function _encode_sc_qualifyingMgr_war_info_request(self, st) {
        var se = Sproto.SprotoCore.GetSerialize(st, 2);
        if (self.win != undefined) {
            se.wb(self.win, 0);
        }
        if (self.roleData != undefined) {
            se.woa("qualifyingMgr_role_data", self.roleData, 1);
        }
        return Sproto.SprotoCore.CloseSerialize(se);
    }
    Sproto.ALL_DICT["sc_qualifyingMgr_war_info_request"] = { en: _encode_sc_qualifyingMgr_war_info_request, de: _decode_sc_qualifyingMgr_war_info_request };
})(Sproto || (Sproto = {}));
//# sourceMappingURL=qualifyingMgr_s2c.js.map