// Generated by sprotodump. DO NOT EDIT!
var __reflect = (this && this.__reflect) || function (p, c, t) {
    p.__class__ = c, t ? t.push(c) : t = [c], p.__types__ = p.__types__ ? t.concat(p.__types__) : t;
};
var Sproto;
(function (Sproto) {
    var cs_raid_add_count_request = (function () {
        function cs_raid_add_count_request() {
        }
        return cs_raid_add_count_request;
    }());
    Sproto.cs_raid_add_count_request = cs_raid_add_count_request;
    __reflect(cs_raid_add_count_request.prototype, "Sproto.cs_raid_add_count_request");
    function _decode_cs_raid_add_count_request(d) {
        var o = new cs_raid_add_count_request;
        var t = -1;
        while (-1 != (t = d.rt())) {
            switch (t) {
                case 0:
                    o.fbID = d.ri();
                    break;
                default:
                    d.nod();
                    break;
            }
        }
        return o;
    }
    function _encode_cs_raid_add_count_request(self, st) {
        var se = Sproto.SprotoCore.GetSerialize(st, 1);
        if (self.fbID != undefined) {
            se.wi(self.fbID, 0);
        }
        return Sproto.SprotoCore.CloseSerialize(se);
    }
    Sproto.ALL_DICT["cs_raid_add_count_request"] = { en: _encode_cs_raid_add_count_request, de: _decode_cs_raid_add_count_request };
    var cs_raid_assist_pkboss_request = (function () {
        function cs_raid_assist_pkboss_request() {
        }
        return cs_raid_assist_pkboss_request;
    }());
    Sproto.cs_raid_assist_pkboss_request = cs_raid_assist_pkboss_request;
    __reflect(cs_raid_assist_pkboss_request.prototype, "Sproto.cs_raid_assist_pkboss_request");
    function _decode_cs_raid_assist_pkboss_request(d) {
        var o = new cs_raid_assist_pkboss_request;
        var t = -1;
        while (-1 != (t = d.rt())) {
            switch (t) {
                case 0:
                    o.playerid = d.ri();
                    break;
                case 1:
                    o.chapterlevel = d.ri();
                    break;
                default:
                    d.nod();
                    break;
            }
        }
        return o;
    }
    function _encode_cs_raid_assist_pkboss_request(self, st) {
        var se = Sproto.SprotoCore.GetSerialize(st, 2);
        if (self.playerid != undefined) {
            se.wi(self.playerid, 0);
        }
        if (self.chapterlevel != undefined) {
            se.wi(self.chapterlevel, 1);
        }
        return Sproto.SprotoCore.CloseSerialize(se);
    }
    Sproto.ALL_DICT["cs_raid_assist_pkboss_request"] = { en: _encode_cs_raid_assist_pkboss_request, de: _decode_cs_raid_assist_pkboss_request };
    var cs_raid_assist_pkboss_response = (function () {
        function cs_raid_assist_pkboss_response() {
        }
        return cs_raid_assist_pkboss_response;
    }());
    Sproto.cs_raid_assist_pkboss_response = cs_raid_assist_pkboss_response;
    __reflect(cs_raid_assist_pkboss_response.prototype, "Sproto.cs_raid_assist_pkboss_response");
    function _decode_cs_raid_assist_pkboss_response(d) {
        var o = new cs_raid_assist_pkboss_response;
        var t = -1;
        while (-1 != (t = d.rt())) {
            switch (t) {
                case 0:
                    o.ret = d.ri();
                    break;
                default:
                    d.nod();
                    break;
            }
        }
        return o;
    }
    function _encode_cs_raid_assist_pkboss_response(self, st) {
        var se = Sproto.SprotoCore.GetSerialize(st, 1);
        if (self.ret != undefined) {
            se.wi(self.ret, 0);
        }
        return Sproto.SprotoCore.CloseSerialize(se);
    }
    Sproto.ALL_DICT["cs_raid_assist_pkboss_response"] = { en: _encode_cs_raid_assist_pkboss_response, de: _decode_cs_raid_assist_pkboss_response };
    var cs_raid_call_boss_play_request = (function () {
        function cs_raid_call_boss_play_request() {
        }
        return cs_raid_call_boss_play_request;
    }());
    Sproto.cs_raid_call_boss_play_request = cs_raid_call_boss_play_request;
    __reflect(cs_raid_call_boss_play_request.prototype, "Sproto.cs_raid_call_boss_play_request");
    function _decode_cs_raid_call_boss_play_request(d) {
        var o = new cs_raid_call_boss_play_request;
        var t = -1;
        while (-1 != (t = d.rt())) {
            switch (t) {
                case 0:
                    o.id = d.ri();
                    break;
                default:
                    d.nod();
                    break;
            }
        }
        return o;
    }
    function _encode_cs_raid_call_boss_play_request(self, st) {
        var se = Sproto.SprotoCore.GetSerialize(st, 1);
        if (self.id != undefined) {
            se.wi(self.id, 0);
        }
        return Sproto.SprotoCore.CloseSerialize(se);
    }
    Sproto.ALL_DICT["cs_raid_call_boss_play_request"] = { en: _encode_cs_raid_call_boss_play_request, de: _decode_cs_raid_call_boss_play_request };
    var cs_raid_challenget_request = (function () {
        function cs_raid_challenget_request() {
        }
        return cs_raid_challenget_request;
    }());
    Sproto.cs_raid_challenget_request = cs_raid_challenget_request;
    __reflect(cs_raid_challenget_request.prototype, "Sproto.cs_raid_challenget_request");
    function _decode_cs_raid_challenget_request(d) {
        var o = new cs_raid_challenget_request;
        var t = -1;
        while (-1 != (t = d.rt())) {
            switch (t) {
                case 0:
                    o.fbID = d.ri();
                    break;
                default:
                    d.nod();
                    break;
            }
        }
        return o;
    }
    function _encode_cs_raid_challenget_request(self, st) {
        var se = Sproto.SprotoCore.GetSerialize(st, 1);
        if (self.fbID != undefined) {
            se.wi(self.fbID, 0);
        }
        return Sproto.SprotoCore.CloseSerialize(se);
    }
    Sproto.ALL_DICT["cs_raid_challenget_request"] = { en: _encode_cs_raid_challenget_request, de: _decode_cs_raid_challenget_request };
    var cs_raid_chapter_config_request = (function () {
        function cs_raid_chapter_config_request() {
        }
        return cs_raid_chapter_config_request;
    }());
    Sproto.cs_raid_chapter_config_request = cs_raid_chapter_config_request;
    __reflect(cs_raid_chapter_config_request.prototype, "Sproto.cs_raid_chapter_config_request");
    function _decode_cs_raid_chapter_config_request(d) {
        var o = new cs_raid_chapter_config_request;
        var t = -1;
        while (-1 != (t = d.rt())) {
            switch (t) {
                case 0:
                    o.fbid = d.ri();
                    break;
                default:
                    d.nod();
                    break;
            }
        }
        return o;
    }
    function _encode_cs_raid_chapter_config_request(self, st) {
        var se = Sproto.SprotoCore.GetSerialize(st, 1);
        if (self.fbid != undefined) {
            se.wi(self.fbid, 0);
        }
        return Sproto.SprotoCore.CloseSerialize(se);
    }
    Sproto.ALL_DICT["cs_raid_chapter_config_request"] = { en: _encode_cs_raid_chapter_config_request, de: _decode_cs_raid_chapter_config_request };
    var cs_raid_chapter_config_response = (function () {
        function cs_raid_chapter_config_response() {
        }
        return cs_raid_chapter_config_response;
    }());
    Sproto.cs_raid_chapter_config_response = cs_raid_chapter_config_response;
    __reflect(cs_raid_chapter_config_response.prototype, "Sproto.cs_raid_chapter_config_response");
    function _decode_cs_raid_chapter_config_response(d) {
        var o = new cs_raid_chapter_config_response;
        var t = -1;
        while (-1 != (t = d.rt())) {
            switch (t) {
                case 0:
                    o.fbid = d.ri();
                    break;
                case 1:
                    o.manuallymode = d.ri();
                    break;
                case 2:
                    o.jbutton = d.ri();
                    break;
                case 3:
                    o.type = d.ri();
                    break;
                case 4:
                    o.totalTime = d.ri();
                    break;
                case 5:
                    o.closeTime = d.ri();
                    break;
                case 6:
                    o.scenes = d.ria();
                    break;
                case 7:
                    o.name = d.rs();
                    break;
                case 8:
                    o.desc = d.rs();
                    break;
                default:
                    d.nod();
                    break;
            }
        }
        return o;
    }
    function _encode_cs_raid_chapter_config_response(self, st) {
        var se = Sproto.SprotoCore.GetSerialize(st, 9);
        if (self.fbid != undefined) {
            se.wi(self.fbid, 0);
        }
        if (self.manuallymode != undefined) {
            se.wi(self.manuallymode, 1);
        }
        if (self.jbutton != undefined) {
            se.wi(self.jbutton, 2);
        }
        if (self.type != undefined) {
            se.wi(self.type, 3);
        }
        if (self.totalTime != undefined) {
            se.wi(self.totalTime, 4);
        }
        if (self.closeTime != undefined) {
            se.wi(self.closeTime, 5);
        }
        if (self.scenes != undefined) {
            se.wia(self.scenes, 6);
        }
        if (self.name != undefined) {
            se.ws(self.name, 7);
        }
        if (self.desc != undefined) {
            se.ws(self.desc, 8);
        }
        return Sproto.SprotoCore.CloseSerialize(se);
    }
    Sproto.ALL_DICT["cs_raid_chapter_config_response"] = { en: _encode_cs_raid_chapter_config_response, de: _decode_cs_raid_chapter_config_response };
    var cs_raid_exit_raid_request = (function () {
        function cs_raid_exit_raid_request() {
        }
        return cs_raid_exit_raid_request;
    }());
    Sproto.cs_raid_exit_raid_request = cs_raid_exit_raid_request;
    __reflect(cs_raid_exit_raid_request.prototype, "Sproto.cs_raid_exit_raid_request");
    function _decode_cs_raid_exit_raid_request(d) {
        var o = new cs_raid_exit_raid_request;
        var t = -1;
        while (-1 != (t = d.rt())) {
            switch (t) {
                default:
                    d.nod();
                    break;
            }
        }
        return o;
    }
    function _encode_cs_raid_exit_raid_request(self, st) {
        var se = Sproto.SprotoCore.GetSerialize(st, 0);
        return Sproto.SprotoCore.CloseSerialize(se);
    }
    Sproto.ALL_DICT["cs_raid_exit_raid_request"] = { en: _encode_cs_raid_exit_raid_request, de: _decode_cs_raid_exit_raid_request };
    var cs_raid_get_award_request = (function () {
        function cs_raid_get_award_request() {
        }
        return cs_raid_get_award_request;
    }());
    Sproto.cs_raid_get_award_request = cs_raid_get_award_request;
    __reflect(cs_raid_get_award_request.prototype, "Sproto.cs_raid_get_award_request");
    function _decode_cs_raid_get_award_request(d) {
        var o = new cs_raid_get_award_request;
        var t = -1;
        while (-1 != (t = d.rt())) {
            switch (t) {
                default:
                    d.nod();
                    break;
            }
        }
        return o;
    }
    function _encode_cs_raid_get_award_request(self, st) {
        var se = Sproto.SprotoCore.GetSerialize(st, 0);
        return Sproto.SprotoCore.CloseSerialize(se);
    }
    Sproto.ALL_DICT["cs_raid_get_award_request"] = { en: _encode_cs_raid_get_award_request, de: _decode_cs_raid_get_award_request };
    var cs_raid_get_boss_reward_request = (function () {
        function cs_raid_get_boss_reward_request() {
        }
        return cs_raid_get_boss_reward_request;
    }());
    Sproto.cs_raid_get_boss_reward_request = cs_raid_get_boss_reward_request;
    __reflect(cs_raid_get_boss_reward_request.prototype, "Sproto.cs_raid_get_boss_reward_request");
    function _decode_cs_raid_get_boss_reward_request(d) {
        var o = new cs_raid_get_boss_reward_request;
        var t = -1;
        while (-1 != (t = d.rt())) {
            switch (t) {
                default:
                    d.nod();
                    break;
            }
        }
        return o;
    }
    function _encode_cs_raid_get_boss_reward_request(self, st) {
        var se = Sproto.SprotoCore.GetSerialize(st, 0);
        return Sproto.SprotoCore.CloseSerialize(se);
    }
    Sproto.ALL_DICT["cs_raid_get_boss_reward_request"] = { en: _encode_cs_raid_get_boss_reward_request, de: _decode_cs_raid_get_boss_reward_request };
    var cs_raid_get_chapter_reward_request = (function () {
        function cs_raid_get_chapter_reward_request() {
        }
        return cs_raid_get_chapter_reward_request;
    }());
    Sproto.cs_raid_get_chapter_reward_request = cs_raid_get_chapter_reward_request;
    __reflect(cs_raid_get_chapter_reward_request.prototype, "Sproto.cs_raid_get_chapter_reward_request");
    function _decode_cs_raid_get_chapter_reward_request(d) {
        var o = new cs_raid_get_chapter_reward_request;
        var t = -1;
        while (-1 != (t = d.rt())) {
            switch (t) {
                case 0:
                    o.id = d.ri();
                    break;
                default:
                    d.nod();
                    break;
            }
        }
        return o;
    }
    function _encode_cs_raid_get_chapter_reward_request(self, st) {
        var se = Sproto.SprotoCore.GetSerialize(st, 1);
        if (self.id != undefined) {
            se.wi(self.id, 0);
        }
        return Sproto.SprotoCore.CloseSerialize(se);
    }
    Sproto.ALL_DICT["cs_raid_get_chapter_reward_request"] = { en: _encode_cs_raid_get_chapter_reward_request, de: _decode_cs_raid_get_chapter_reward_request };
    var cs_raid_get_chapter_reward_response = (function () {
        function cs_raid_get_chapter_reward_response() {
        }
        return cs_raid_get_chapter_reward_response;
    }());
    Sproto.cs_raid_get_chapter_reward_response = cs_raid_get_chapter_reward_response;
    __reflect(cs_raid_get_chapter_reward_response.prototype, "Sproto.cs_raid_get_chapter_reward_response");
    function _decode_cs_raid_get_chapter_reward_response(d) {
        var o = new cs_raid_get_chapter_reward_response;
        var t = -1;
        while (-1 != (t = d.rt())) {
            switch (t) {
                case 0:
                    o.ret = d.rb();
                    break;
                default:
                    d.nod();
                    break;
            }
        }
        return o;
    }
    function _encode_cs_raid_get_chapter_reward_response(self, st) {
        var se = Sproto.SprotoCore.GetSerialize(st, 1);
        if (self.ret != undefined) {
            se.wb(self.ret, 0);
        }
        return Sproto.SprotoCore.CloseSerialize(se);
    }
    Sproto.ALL_DICT["cs_raid_get_chapter_reward_response"] = { en: _encode_cs_raid_get_chapter_reward_response, de: _decode_cs_raid_get_chapter_reward_response };
    var cs_raid_get_world_award_request = (function () {
        function cs_raid_get_world_award_request() {
        }
        return cs_raid_get_world_award_request;
    }());
    Sproto.cs_raid_get_world_award_request = cs_raid_get_world_award_request;
    __reflect(cs_raid_get_world_award_request.prototype, "Sproto.cs_raid_get_world_award_request");
    function _decode_cs_raid_get_world_award_request(d) {
        var o = new cs_raid_get_world_award_request;
        var t = -1;
        while (-1 != (t = d.rt())) {
            switch (t) {
                case 0:
                    o.pass = d.ri();
                    break;
                default:
                    d.nod();
                    break;
            }
        }
        return o;
    }
    function _encode_cs_raid_get_world_award_request(self, st) {
        var se = Sproto.SprotoCore.GetSerialize(st, 1);
        if (self.pass != undefined) {
            se.wi(self.pass, 0);
        }
        return Sproto.SprotoCore.CloseSerialize(se);
    }
    Sproto.ALL_DICT["cs_raid_get_world_award_request"] = { en: _encode_cs_raid_get_world_award_request, de: _decode_cs_raid_get_world_award_request };
    var cs_raid_open_auto_request = (function () {
        function cs_raid_open_auto_request() {
        }
        return cs_raid_open_auto_request;
    }());
    Sproto.cs_raid_open_auto_request = cs_raid_open_auto_request;
    __reflect(cs_raid_open_auto_request.prototype, "Sproto.cs_raid_open_auto_request");
    function _decode_cs_raid_open_auto_request(d) {
        var o = new cs_raid_open_auto_request;
        var t = -1;
        while (-1 != (t = d.rt())) {
            switch (t) {
                case 0:
                    o.auto = d.rb();
                    break;
                default:
                    d.nod();
                    break;
            }
        }
        return o;
    }
    function _encode_cs_raid_open_auto_request(self, st) {
        var se = Sproto.SprotoCore.GetSerialize(st, 1);
        if (self.auto != undefined) {
            se.wb(self.auto, 0);
        }
        return Sproto.SprotoCore.CloseSerialize(se);
    }
    Sproto.ALL_DICT["cs_raid_open_auto_request"] = { en: _encode_cs_raid_open_auto_request, de: _decode_cs_raid_open_auto_request };
    var cs_raid_pk_boss_request = (function () {
        function cs_raid_pk_boss_request() {
        }
        return cs_raid_pk_boss_request;
    }());
    Sproto.cs_raid_pk_boss_request = cs_raid_pk_boss_request;
    __reflect(cs_raid_pk_boss_request.prototype, "Sproto.cs_raid_pk_boss_request");
    function _decode_cs_raid_pk_boss_request(d) {
        var o = new cs_raid_pk_boss_request;
        var t = -1;
        while (-1 != (t = d.rt())) {
            switch (t) {
                default:
                    d.nod();
                    break;
            }
        }
        return o;
    }
    function _encode_cs_raid_pk_boss_request(self, st) {
        var se = Sproto.SprotoCore.GetSerialize(st, 0);
        return Sproto.SprotoCore.CloseSerialize(se);
    }
    Sproto.ALL_DICT["cs_raid_pk_boss_request"] = { en: _encode_cs_raid_pk_boss_request, de: _decode_cs_raid_pk_boss_request };
    var cs_raid_wave_complete_request = (function () {
        function cs_raid_wave_complete_request() {
        }
        return cs_raid_wave_complete_request;
    }());
    Sproto.cs_raid_wave_complete_request = cs_raid_wave_complete_request;
    __reflect(cs_raid_wave_complete_request.prototype, "Sproto.cs_raid_wave_complete_request");
    function _decode_cs_raid_wave_complete_request(d) {
        var o = new cs_raid_wave_complete_request;
        var t = -1;
        while (-1 != (t = d.rt())) {
            switch (t) {
                case 0:
                    o.killCount = d.ri();
                    break;
                default:
                    d.nod();
                    break;
            }
        }
        return o;
    }
    function _encode_cs_raid_wave_complete_request(self, st) {
        var se = Sproto.SprotoCore.GetSerialize(st, 1);
        if (self.killCount != undefined) {
            se.wi(self.killCount, 0);
        }
        return Sproto.SprotoCore.CloseSerialize(se);
    }
    Sproto.ALL_DICT["cs_raid_wave_complete_request"] = { en: _encode_cs_raid_wave_complete_request, de: _decode_cs_raid_wave_complete_request };
    var sc_raid_clear_cd_request = (function () {
        function sc_raid_clear_cd_request() {
        }
        return sc_raid_clear_cd_request;
    }());
    Sproto.sc_raid_clear_cd_request = sc_raid_clear_cd_request;
    __reflect(sc_raid_clear_cd_request.prototype, "Sproto.sc_raid_clear_cd_request");
    function _decode_sc_raid_clear_cd_request(d) {
        var o = new sc_raid_clear_cd_request;
        var t = -1;
        while (-1 != (t = d.rt())) {
            switch (t) {
                case 0:
                    o.index = d.ri();
                    break;
                default:
                    d.nod();
                    break;
            }
        }
        return o;
    }
    function _encode_sc_raid_clear_cd_request(self, st) {
        var se = Sproto.SprotoCore.GetSerialize(st, 1);
        if (self.index != undefined) {
            se.wi(self.index, 0);
        }
        return Sproto.SprotoCore.CloseSerialize(se);
    }
    Sproto.ALL_DICT["sc_raid_clear_cd_request"] = { en: _encode_sc_raid_clear_cd_request, de: _decode_sc_raid_clear_cd_request };
})(Sproto || (Sproto = {}));
//# sourceMappingURL=raid_c2s.js.map