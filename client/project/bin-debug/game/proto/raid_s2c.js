// Generated by sprotodump. DO NOT EDIT!
var __reflect = (this && this.__reflect) || function (p, c, t) {
    p.__class__ = c, t ? t.push(c) : t = [c], p.__types__ = p.__types__ ? t.concat(p.__types__) : t;
};
var Sproto;
(function (Sproto) {
    var chapter_mondata = (function () {
        function chapter_mondata() {
        }
        return chapter_mondata;
    }());
    Sproto.chapter_mondata = chapter_mondata;
    __reflect(chapter_mondata.prototype, "Sproto.chapter_mondata");
    function _decode_chapter_mondata(d) {
        var o = new chapter_mondata;
        var t = -1;
        while (-1 != (t = d.rt())) {
            switch (t) {
                case 0:
                    o.id = d.ri();
                    break;
                case 1:
                    o.name = d.rs();
                    break;
                case 2:
                    o.type = d.ri();
                    break;
                case 3:
                    o.level = d.ri();
                    break;
                case 4:
                    o.hp = d.ri();
                    break;
                case 5:
                    o.atk = d.ri();
                    break;
                case 6:
                    o.def = d.ri();
                    break;
                case 7:
                    o.speed = d.ri();
                    break;
                case 8:
                    o.crit = d.ri();
                    break;
                case 9:
                    o.tough = d.ri();
                    break;
                case 10:
                    o.hitrate = d.ri();
                    break;
                case 11:
                    o.evade = d.ri();
                    break;
                case 12:
                    o.ms = d.ri();
                    break;
                case 13:
                    o.avatar = d.ri();
                    break;
                case 14:
                    o.head = d.rs();
                    break;
                case 15:
                    o.talk = d.rs();
                    break;
                default:
                    d.nod();
                    break;
            }
        }
        return o;
    }
    function _encode_chapter_mondata(self, st) {
        var se = Sproto.SprotoCore.GetSerialize(st, 16);
        if (self.id != undefined) {
            se.wi(self.id, 0);
        }
        if (self.name != undefined) {
            se.ws(self.name, 1);
        }
        if (self.type != undefined) {
            se.wi(self.type, 2);
        }
        if (self.level != undefined) {
            se.wi(self.level, 3);
        }
        if (self.hp != undefined) {
            se.wi(self.hp, 4);
        }
        if (self.atk != undefined) {
            se.wi(self.atk, 5);
        }
        if (self.def != undefined) {
            se.wi(self.def, 6);
        }
        if (self.speed != undefined) {
            se.wi(self.speed, 7);
        }
        if (self.crit != undefined) {
            se.wi(self.crit, 8);
        }
        if (self.tough != undefined) {
            se.wi(self.tough, 9);
        }
        if (self.hitrate != undefined) {
            se.wi(self.hitrate, 10);
        }
        if (self.evade != undefined) {
            se.wi(self.evade, 11);
        }
        if (self.ms != undefined) {
            se.wi(self.ms, 12);
        }
        if (self.avatar != undefined) {
            se.wi(self.avatar, 13);
        }
        if (self.head != undefined) {
            se.ws(self.head, 14);
        }
        if (self.talk != undefined) {
            se.ws(self.talk, 15);
        }
        return Sproto.SprotoCore.CloseSerialize(se);
    }
    Sproto.ALL_DICT["chapter_mondata"] = { en: _encode_chapter_mondata, de: _decode_chapter_mondata };
    var fbcfg = (function () {
        function fbcfg() {
        }
        return fbcfg;
    }());
    Sproto.fbcfg = fbcfg;
    __reflect(fbcfg.prototype, "Sproto.fbcfg");
    function _decode_fbcfg(d) {
        var o = new fbcfg;
        var t = -1;
        while (-1 != (t = d.rt())) {
            switch (t) {
                case 0:
                    o.fbid = d.ri();
                    break;
                case 1:
                    o.manuallymode = d.ri();
                    break;
                case 2:
                    o.jbutton = d.ri();
                    break;
                case 3:
                    o.type = d.ri();
                    break;
                case 4:
                    o.totalTime = d.ri();
                    break;
                case 5:
                    o.closeTime = d.ri();
                    break;
                case 6:
                    o.scenes = d.ria();
                    break;
                case 7:
                    o.name = d.rs();
                    break;
                case 8:
                    o.desc = d.rs();
                    break;
                default:
                    d.nod();
                    break;
            }
        }
        return o;
    }
    function _encode_fbcfg(self, st) {
        var se = Sproto.SprotoCore.GetSerialize(st, 9);
        if (self.fbid != undefined) {
            se.wi(self.fbid, 0);
        }
        if (self.manuallymode != undefined) {
            se.wi(self.manuallymode, 1);
        }
        if (self.jbutton != undefined) {
            se.wi(self.jbutton, 2);
        }
        if (self.type != undefined) {
            se.wi(self.type, 3);
        }
        if (self.totalTime != undefined) {
            se.wi(self.totalTime, 4);
        }
        if (self.closeTime != undefined) {
            se.wi(self.closeTime, 5);
        }
        if (self.scenes != undefined) {
            se.wia(self.scenes, 6);
        }
        if (self.name != undefined) {
            se.ws(self.name, 7);
        }
        if (self.desc != undefined) {
            se.ws(self.desc, 8);
        }
        return Sproto.SprotoCore.CloseSerialize(se);
    }
    Sproto.ALL_DICT["fbcfg"] = { en: _encode_fbcfg, de: _decode_fbcfg };
    var offline_data = (function () {
        function offline_data() {
        }
        return offline_data;
    }());
    Sproto.offline_data = offline_data;
    __reflect(offline_data.prototype, "Sproto.offline_data");
    function _decode_offline_data(d) {
        var o = new offline_data;
        var t = -1;
        while (-1 != (t = d.rt())) {
            switch (t) {
                case 0:
                    o.type = d.ri();
                    break;
                case 1:
                    o.exp = d.ri();
                    break;
                case 2:
                    o.gold = d.ri();
                    break;
                default:
                    d.nod();
                    break;
            }
        }
        return o;
    }
    function _encode_offline_data(self, st) {
        var se = Sproto.SprotoCore.GetSerialize(st, 3);
        if (self.type != undefined) {
            se.wi(self.type, 0);
        }
        if (self.exp != undefined) {
            se.wi(self.exp, 1);
        }
        if (self.gold != undefined) {
            se.wi(self.gold, 2);
        }
        return Sproto.SprotoCore.CloseSerialize(se);
    }
    Sproto.ALL_DICT["offline_data"] = { en: _encode_offline_data, de: _decode_offline_data };
    var raid_data = (function () {
        function raid_data() {
        }
        return raid_data;
    }());
    Sproto.raid_data = raid_data;
    __reflect(raid_data.prototype, "Sproto.raid_data");
    function _decode_raid_data(d) {
        var o = new raid_data;
        var t = -1;
        while (-1 != (t = d.rt())) {
            switch (t) {
                case 0:
                    o.fbId = d.ri();
                    break;
                case 1:
                    o.useCount = d.ri();
                    break;
                case 2:
                    o.vipBuyCount = d.ri();
                    break;
                case 3:
                    o.vipHoldCount = d.ri();
                    break;
                case 4:
                    o.totalCount = d.ri();
                    break;
                default:
                    d.nod();
                    break;
            }
        }
        return o;
    }
    function _encode_raid_data(self, st) {
        var se = Sproto.SprotoCore.GetSerialize(st, 5);
        if (self.fbId != undefined) {
            se.wi(self.fbId, 0);
        }
        if (self.useCount != undefined) {
            se.wi(self.useCount, 1);
        }
        if (self.vipBuyCount != undefined) {
            se.wi(self.vipBuyCount, 2);
        }
        if (self.vipHoldCount != undefined) {
            se.wi(self.vipHoldCount, 3);
        }
        if (self.totalCount != undefined) {
            se.wi(self.totalCount, 4);
        }
        return Sproto.SprotoCore.CloseSerialize(se);
    }
    Sproto.ALL_DICT["raid_data"] = { en: _encode_raid_data, de: _decode_raid_data };
    var raid_material_data = (function () {
        function raid_material_data() {
        }
        return raid_material_data;
    }());
    Sproto.raid_material_data = raid_material_data;
    __reflect(raid_material_data.prototype, "Sproto.raid_material_data");
    function _decode_raid_material_data(d) {
        var o = new raid_material_data;
        var t = -1;
        while (-1 != (t = d.rt())) {
            switch (t) {
                case 0:
                    o.kind = d.ri();
                    break;
                case 1:
                    o.useCount = d.ri();
                    break;
                case 2:
                    o.vipBuyCount = d.ri();
                    break;
                case 3:
                    o.vipHoldCount = d.ri();
                    break;
                case 4:
                    o.starRecord = d.roa("raid_material_star");
                    break;
                default:
                    d.nod();
                    break;
            }
        }
        return o;
    }
    function _encode_raid_material_data(self, st) {
        var se = Sproto.SprotoCore.GetSerialize(st, 5);
        if (self.kind != undefined) {
            se.wi(self.kind, 0);
        }
        if (self.useCount != undefined) {
            se.wi(self.useCount, 1);
        }
        if (self.vipBuyCount != undefined) {
            se.wi(self.vipBuyCount, 2);
        }
        if (self.vipHoldCount != undefined) {
            se.wi(self.vipHoldCount, 3);
        }
        if (self.starRecord != undefined) {
            se.woa("raid_material_star", self.starRecord, 4);
        }
        return Sproto.SprotoCore.CloseSerialize(se);
    }
    Sproto.ALL_DICT["raid_material_data"] = { en: _encode_raid_material_data, de: _decode_raid_material_data };
    var raid_material_star = (function () {
        function raid_material_star() {
        }
        return raid_material_star;
    }());
    Sproto.raid_material_star = raid_material_star;
    __reflect(raid_material_star.prototype, "Sproto.raid_material_star");
    function _decode_raid_material_star(d) {
        var o = new raid_material_star;
        var t = -1;
        while (-1 != (t = d.rt())) {
            switch (t) {
                case 0:
                    o.fbId = d.ri();
                    break;
                case 1:
                    o.star = d.ri();
                    break;
                default:
                    d.nod();
                    break;
            }
        }
        return o;
    }
    function _encode_raid_material_star(self, st) {
        var se = Sproto.SprotoCore.GetSerialize(st, 2);
        if (self.fbId != undefined) {
            se.wi(self.fbId, 0);
        }
        if (self.star != undefined) {
            se.wi(self.star, 1);
        }
        return Sproto.SprotoCore.CloseSerialize(se);
    }
    Sproto.ALL_DICT["raid_material_star"] = { en: _encode_raid_material_star, de: _decode_raid_material_star };
    var sc_raid_boss_box_num_request = (function () {
        function sc_raid_boss_box_num_request() {
        }
        return sc_raid_boss_box_num_request;
    }());
    Sproto.sc_raid_boss_box_num_request = sc_raid_boss_box_num_request;
    __reflect(sc_raid_boss_box_num_request.prototype, "Sproto.sc_raid_boss_box_num_request");
    function _decode_sc_raid_boss_box_num_request(d) {
        var o = new sc_raid_boss_box_num_request;
        var t = -1;
        while (-1 != (t = d.rt())) {
            switch (t) {
                case 0:
                    o.bossCallNum = d.ri();
                    break;
                default:
                    d.nod();
                    break;
            }
        }
        return o;
    }
    function _encode_sc_raid_boss_box_num_request(self, st) {
        var se = Sproto.SprotoCore.GetSerialize(st, 1);
        if (self.bossCallNum != undefined) {
            se.wi(self.bossCallNum, 0);
        }
        return Sproto.SprotoCore.CloseSerialize(se);
    }
    Sproto.ALL_DICT["sc_raid_boss_box_num_request"] = { en: _encode_sc_raid_boss_box_num_request, de: _decode_sc_raid_boss_box_num_request };
    var sc_raid_chapter_boss_result_request = (function () {
        function sc_raid_chapter_boss_result_request() {
        }
        return sc_raid_chapter_boss_result_request;
    }());
    Sproto.sc_raid_chapter_boss_result_request = sc_raid_chapter_boss_result_request;
    __reflect(sc_raid_chapter_boss_result_request.prototype, "Sproto.sc_raid_chapter_boss_result_request");
    function _decode_sc_raid_chapter_boss_result_request(d) {
        var o = new sc_raid_chapter_boss_result_request;
        var t = -1;
        while (-1 != (t = d.rt())) {
            switch (t) {
                case 0:
                    o.result = d.ri();
                    break;
                case 1:
                    o.rewards = d.roa("reward_data");
                    break;
                case 2:
                    o.star = d.ri();
                    break;
                default:
                    d.nod();
                    break;
            }
        }
        return o;
    }
    function _encode_sc_raid_chapter_boss_result_request(self, st) {
        var se = Sproto.SprotoCore.GetSerialize(st, 3);
        if (self.result != undefined) {
            se.wi(self.result, 0);
        }
        if (self.rewards != undefined) {
            se.woa("reward_data", self.rewards, 1);
        }
        if (self.star != undefined) {
            se.wi(self.star, 2);
        }
        return Sproto.SprotoCore.CloseSerialize(se);
    }
    Sproto.ALL_DICT["sc_raid_chapter_boss_result_request"] = { en: _encode_sc_raid_chapter_boss_result_request, de: _decode_sc_raid_chapter_boss_result_request };
    var sc_raid_chapter_collaborate_request = (function () {
        function sc_raid_chapter_collaborate_request() {
        }
        return sc_raid_chapter_collaborate_request;
    }());
    Sproto.sc_raid_chapter_collaborate_request = sc_raid_chapter_collaborate_request;
    __reflect(sc_raid_chapter_collaborate_request.prototype, "Sproto.sc_raid_chapter_collaborate_request");
    function _decode_sc_raid_chapter_collaborate_request(d) {
        var o = new sc_raid_chapter_collaborate_request;
        var t = -1;
        while (-1 != (t = d.rt())) {
            switch (t) {
                case 0:
                    o.appealtime = d.ri();
                    break;
                case 1:
                    o.helptime = d.ri();
                    break;
                default:
                    d.nod();
                    break;
            }
        }
        return o;
    }
    function _encode_sc_raid_chapter_collaborate_request(self, st) {
        var se = Sproto.SprotoCore.GetSerialize(st, 2);
        if (self.appealtime != undefined) {
            se.wi(self.appealtime, 0);
        }
        if (self.helptime != undefined) {
            se.wi(self.helptime, 1);
        }
        return Sproto.SprotoCore.CloseSerialize(se);
    }
    Sproto.ALL_DICT["sc_raid_chapter_collaborate_request"] = { en: _encode_sc_raid_chapter_collaborate_request, de: _decode_sc_raid_chapter_collaborate_request };
    var sc_raid_chapter_init_info_request = (function () {
        function sc_raid_chapter_init_info_request() {
        }
        return sc_raid_chapter_init_info_request;
    }());
    Sproto.sc_raid_chapter_init_info_request = sc_raid_chapter_init_info_request;
    __reflect(sc_raid_chapter_init_info_request.prototype, "Sproto.sc_raid_chapter_init_info_request");
    function _decode_sc_raid_chapter_init_info_request(d) {
        var o = new sc_raid_chapter_init_info_request;
        var t = -1;
        while (-1 != (t = d.rt())) {
            switch (t) {
                case 0:
                    o.cid = d.ri();
                    break;
                case 1:
                    o.chapterid = d.ri();
                    break;
                case 2:
                    o.sid = d.ri();
                    break;
                case 3:
                    o.minunm = d.ri();
                    break;
                case 4:
                    o.maxnum = d.ri();
                    break;
                case 5:
                    o.waveMonsterId = d.roa("chapter_mondata");
                    break;
                case 6:
                    o.bossNeedWave = d.ri();
                    break;
                case 7:
                    o.bossId = d.ro("sc_raid_chapter_mon_simple_data");
                    break;
                case 8:
                    o.showAward = d.roa("reward_data");
                    break;
                case 9:
                    o.desc = d.rs();
                    break;
                case 10:
                    o.goldEff = d.ri();
                    break;
                case 11:
                    o.expEff = d.ri();
                    break;
                case 12:
                    o.killMonsterCount = d.ri();
                    break;
                case 13:
                    o.nextmap = d.rb();
                    break;
                case 14:
                    o.chapterreward = d.ria();
                    break;
                default:
                    d.nod();
                    break;
            }
        }
        return o;
    }
    function _encode_sc_raid_chapter_init_info_request(self, st) {
        var se = Sproto.SprotoCore.GetSerialize(st, 15);
        if (self.cid != undefined) {
            se.wi(self.cid, 0);
        }
        if (self.chapterid != undefined) {
            se.wi(self.chapterid, 1);
        }
        if (self.sid != undefined) {
            se.wi(self.sid, 2);
        }
        if (self.minunm != undefined) {
            se.wi(self.minunm, 3);
        }
        if (self.maxnum != undefined) {
            se.wi(self.maxnum, 4);
        }
        if (self.waveMonsterId != undefined) {
            se.woa("chapter_mondata", self.waveMonsterId, 5);
        }
        if (self.bossNeedWave != undefined) {
            se.wi(self.bossNeedWave, 6);
        }
        if (self.bossId != undefined) {
            se.wo("sc_raid_chapter_mon_simple_data", self.bossId, 7);
        }
        if (self.showAward != undefined) {
            se.woa("reward_data", self.showAward, 8);
        }
        if (self.desc != undefined) {
            se.ws(self.desc, 9);
        }
        if (self.goldEff != undefined) {
            se.wi(self.goldEff, 10);
        }
        if (self.expEff != undefined) {
            se.wi(self.expEff, 11);
        }
        if (self.killMonsterCount != undefined) {
            se.wi(self.killMonsterCount, 12);
        }
        if (self.nextmap != undefined) {
            se.wb(self.nextmap, 13);
        }
        if (self.chapterreward != undefined) {
            se.wia(self.chapterreward, 14);
        }
        return Sproto.SprotoCore.CloseSerialize(se);
    }
    Sproto.ALL_DICT["sc_raid_chapter_init_info_request"] = { en: _encode_sc_raid_chapter_init_info_request, de: _decode_sc_raid_chapter_init_info_request };
    var sc_raid_chapter_mon_data = (function () {
        function sc_raid_chapter_mon_data() {
        }
        return sc_raid_chapter_mon_data;
    }());
    Sproto.sc_raid_chapter_mon_data = sc_raid_chapter_mon_data;
    __reflect(sc_raid_chapter_mon_data.prototype, "Sproto.sc_raid_chapter_mon_data");
    function _decode_sc_raid_chapter_mon_data(d) {
        var o = new sc_raid_chapter_mon_data;
        var t = -1;
        while (-1 != (t = d.rt())) {
            switch (t) {
                case 1:
                    o.hp = d.ri();
                    break;
                case 2:
                    o.atk = d.ri();
                    break;
                case 3:
                    o.def = d.ri();
                    break;
                case 4:
                    o.res = d.ri();
                    break;
                case 5:
                    o.crit = d.ri();
                    break;
                case 6:
                    o.tough = d.ri();
                    break;
                case 7:
                    o.ms = d.ri();
                    break;
                case 8:
                    o.as = d.ri();
                    break;
                default:
                    d.nod();
                    break;
            }
        }
        return o;
    }
    function _encode_sc_raid_chapter_mon_data(self, st) {
        var se = Sproto.SprotoCore.GetSerialize(st, 9);
        if (self.hp != undefined) {
            se.wi(self.hp, 1);
        }
        if (self.atk != undefined) {
            se.wi(self.atk, 2);
        }
        if (self.def != undefined) {
            se.wi(self.def, 3);
        }
        if (self.res != undefined) {
            se.wi(self.res, 4);
        }
        if (self.crit != undefined) {
            se.wi(self.crit, 5);
        }
        if (self.tough != undefined) {
            se.wi(self.tough, 6);
        }
        if (self.ms != undefined) {
            se.wi(self.ms, 7);
        }
        if (self.as != undefined) {
            se.wi(self.as, 8);
        }
        return Sproto.SprotoCore.CloseSerialize(se);
    }
    Sproto.ALL_DICT["sc_raid_chapter_mon_data"] = { en: _encode_sc_raid_chapter_mon_data, de: _decode_sc_raid_chapter_mon_data };
    var sc_raid_chapter_mon_simple_data = (function () {
        function sc_raid_chapter_mon_simple_data() {
        }
        return sc_raid_chapter_mon_simple_data;
    }());
    Sproto.sc_raid_chapter_mon_simple_data = sc_raid_chapter_mon_simple_data;
    __reflect(sc_raid_chapter_mon_simple_data.prototype, "Sproto.sc_raid_chapter_mon_simple_data");
    function _decode_sc_raid_chapter_mon_simple_data(d) {
        var o = new sc_raid_chapter_mon_simple_data;
        var t = -1;
        while (-1 != (t = d.rt())) {
            switch (t) {
                case 0:
                    o.configId = d.ri();
                    break;
                case 1:
                    o.name = d.rs();
                    break;
                case 2:
                    o.level = d.ri();
                    break;
                case 3:
                    o.avatar = d.ri();
                    break;
                case 4:
                    o.talk = d.rs();
                    break;
                default:
                    d.nod();
                    break;
            }
        }
        return o;
    }
    function _encode_sc_raid_chapter_mon_simple_data(self, st) {
        var se = Sproto.SprotoCore.GetSerialize(st, 5);
        if (self.configId != undefined) {
            se.wi(self.configId, 0);
        }
        if (self.name != undefined) {
            se.ws(self.name, 1);
        }
        if (self.level != undefined) {
            se.wi(self.level, 2);
        }
        if (self.avatar != undefined) {
            se.wi(self.avatar, 3);
        }
        if (self.talk != undefined) {
            se.ws(self.talk, 4);
        }
        return Sproto.SprotoCore.CloseSerialize(se);
    }
    Sproto.ALL_DICT["sc_raid_chapter_mon_simple_data"] = { en: _encode_sc_raid_chapter_mon_simple_data, de: _decode_sc_raid_chapter_mon_simple_data };
    var sc_raid_chapter_mondata_request = (function () {
        function sc_raid_chapter_mondata_request() {
        }
        return sc_raid_chapter_mondata_request;
    }());
    Sproto.sc_raid_chapter_mondata_request = sc_raid_chapter_mondata_request;
    __reflect(sc_raid_chapter_mondata_request.prototype, "Sproto.sc_raid_chapter_mondata_request");
    function _decode_sc_raid_chapter_mondata_request(d) {
        var o = new sc_raid_chapter_mondata_request;
        var t = -1;
        while (-1 != (t = d.rt())) {
            switch (t) {
                case 0:
                    o.mondata = d.roa("chapter_mondata");
                    break;
                case 1:
                    o.fbcfg = d.ro("fbcfg");
                    break;
                default:
                    d.nod();
                    break;
            }
        }
        return o;
    }
    function _encode_sc_raid_chapter_mondata_request(self, st) {
        var se = Sproto.SprotoCore.GetSerialize(st, 2);
        if (self.mondata != undefined) {
            se.woa("chapter_mondata", self.mondata, 0);
        }
        if (self.fbcfg != undefined) {
            se.wo("fbcfg", self.fbcfg, 1);
        }
        return Sproto.SprotoCore.CloseSerialize(se);
    }
    Sproto.ALL_DICT["sc_raid_chapter_mondata_request"] = { en: _encode_sc_raid_chapter_mondata_request, de: _decode_sc_raid_chapter_mondata_request };
    var sc_raid_chapter_offline_reward_request = (function () {
        function sc_raid_chapter_offline_reward_request() {
        }
        return sc_raid_chapter_offline_reward_request;
    }());
    Sproto.sc_raid_chapter_offline_reward_request = sc_raid_chapter_offline_reward_request;
    __reflect(sc_raid_chapter_offline_reward_request.prototype, "Sproto.sc_raid_chapter_offline_reward_request");
    function _decode_sc_raid_chapter_offline_reward_request(d) {
        var o = new sc_raid_chapter_offline_reward_request;
        var t = -1;
        while (-1 != (t = d.rt())) {
            switch (t) {
                case 0:
                    o.offlineTime = d.ri();
                    break;
                case 1:
                    o.exp = d.ri();
                    break;
                case 2:
                    o.money = d.ri();
                    break;
                case 3:
                    o.equipNum1 = d.ri();
                    break;
                case 4:
                    o.equipNum2 = d.ri();
                    break;
                case 5:
                    o.offlineData = d.roa("offline_data");
                    break;
                default:
                    d.nod();
                    break;
            }
        }
        return o;
    }
    function _encode_sc_raid_chapter_offline_reward_request(self, st) {
        var se = Sproto.SprotoCore.GetSerialize(st, 6);
        if (self.offlineTime != undefined) {
            se.wi(self.offlineTime, 0);
        }
        if (self.exp != undefined) {
            se.wi(self.exp, 1);
        }
        if (self.money != undefined) {
            se.wi(self.money, 2);
        }
        if (self.equipNum1 != undefined) {
            se.wi(self.equipNum1, 3);
        }
        if (self.equipNum2 != undefined) {
            se.wi(self.equipNum2, 4);
        }
        if (self.offlineData != undefined) {
            se.woa("offline_data", self.offlineData, 5);
        }
        return Sproto.SprotoCore.CloseSerialize(se);
    }
    Sproto.ALL_DICT["sc_raid_chapter_offline_reward_request"] = { en: _encode_sc_raid_chapter_offline_reward_request, de: _decode_sc_raid_chapter_offline_reward_request };
    var sc_raid_chapter_reward_request = (function () {
        function sc_raid_chapter_reward_request() {
        }
        return sc_raid_chapter_reward_request;
    }());
    Sproto.sc_raid_chapter_reward_request = sc_raid_chapter_reward_request;
    __reflect(sc_raid_chapter_reward_request.prototype, "Sproto.sc_raid_chapter_reward_request");
    function _decode_sc_raid_chapter_reward_request(d) {
        var o = new sc_raid_chapter_reward_request;
        var t = -1;
        while (-1 != (t = d.rt())) {
            switch (t) {
                case 0:
                    o.result = d.ri();
                    break;
                default:
                    d.nod();
                    break;
            }
        }
        return o;
    }
    function _encode_sc_raid_chapter_reward_request(self, st) {
        var se = Sproto.SprotoCore.GetSerialize(st, 1);
        if (self.result != undefined) {
            se.wi(self.result, 0);
        }
        return Sproto.SprotoCore.CloseSerialize(se);
    }
    Sproto.ALL_DICT["sc_raid_chapter_reward_request"] = { en: _encode_sc_raid_chapter_reward_request, de: _decode_sc_raid_chapter_reward_request };
    var sc_raid_chapter_wave_data_request = (function () {
        function sc_raid_chapter_wave_data_request() {
        }
        return sc_raid_chapter_wave_data_request;
    }());
    Sproto.sc_raid_chapter_wave_data_request = sc_raid_chapter_wave_data_request;
    __reflect(sc_raid_chapter_wave_data_request.prototype, "Sproto.sc_raid_chapter_wave_data_request");
    function _decode_sc_raid_chapter_wave_data_request(d) {
        var o = new sc_raid_chapter_wave_data_request;
        var t = -1;
        while (-1 != (t = d.rt())) {
            switch (t) {
                case 0:
                    o.wave = d.ri();
                    break;
                case 1:
                    o.kills = d.ri();
                    break;
                case 2:
                    o.count = d.ri();
                    break;
                case 3:
                    o.rewards = d.roa("wave_drop_data");
                    break;
                default:
                    d.nod();
                    break;
            }
        }
        return o;
    }
    function _encode_sc_raid_chapter_wave_data_request(self, st) {
        var se = Sproto.SprotoCore.GetSerialize(st, 4);
        if (self.wave != undefined) {
            se.wi(self.wave, 0);
        }
        if (self.kills != undefined) {
            se.wi(self.kills, 1);
        }
        if (self.count != undefined) {
            se.wi(self.count, 2);
        }
        if (self.rewards != undefined) {
            se.woa("wave_drop_data", self.rewards, 3);
        }
        return Sproto.SprotoCore.CloseSerialize(se);
    }
    Sproto.ALL_DICT["sc_raid_chapter_wave_data_request"] = { en: _encode_sc_raid_chapter_wave_data_request, de: _decode_sc_raid_chapter_wave_data_request };
    var sc_raid_chapter_world_reward_request = (function () {
        function sc_raid_chapter_world_reward_request() {
        }
        return sc_raid_chapter_world_reward_request;
    }());
    Sproto.sc_raid_chapter_world_reward_request = sc_raid_chapter_world_reward_request;
    __reflect(sc_raid_chapter_world_reward_request.prototype, "Sproto.sc_raid_chapter_world_reward_request");
    function _decode_sc_raid_chapter_world_reward_request(d) {
        var o = new sc_raid_chapter_world_reward_request;
        var t = -1;
        while (-1 != (t = d.rt())) {
            switch (t) {
                case 0:
                    o.isReceive = d.ria();
                    break;
                default:
                    d.nod();
                    break;
            }
        }
        return o;
    }
    function _encode_sc_raid_chapter_world_reward_request(self, st) {
        var se = Sproto.SprotoCore.GetSerialize(st, 1);
        if (self.isReceive != undefined) {
            se.wia(self.isReceive, 0);
        }
        return Sproto.SprotoCore.CloseSerialize(se);
    }
    Sproto.ALL_DICT["sc_raid_chapter_world_reward_request"] = { en: _encode_sc_raid_chapter_world_reward_request, de: _decode_sc_raid_chapter_world_reward_request };
    var sc_raid_info_init_request = (function () {
        function sc_raid_info_init_request() {
        }
        return sc_raid_info_init_request;
    }());
    Sproto.sc_raid_info_init_request = sc_raid_info_init_request;
    __reflect(sc_raid_info_init_request.prototype, "Sproto.sc_raid_info_init_request");
    function _decode_sc_raid_info_init_request(d) {
        var o = new sc_raid_info_init_request;
        var t = -1;
        while (-1 != (t = d.rt())) {
            switch (t) {
                case 0:
                    o.raidModel = d.roa("raid_data");
                    break;
                case 1:
                    o.bossIndex = d.ri();
                    break;
                default:
                    d.nod();
                    break;
            }
        }
        return o;
    }
    function _encode_sc_raid_info_init_request(self, st) {
        var se = Sproto.SprotoCore.GetSerialize(st, 2);
        if (self.raidModel != undefined) {
            se.woa("raid_data", self.raidModel, 0);
        }
        if (self.bossIndex != undefined) {
            se.wi(self.bossIndex, 1);
        }
        return Sproto.SprotoCore.CloseSerialize(se);
    }
    Sproto.ALL_DICT["sc_raid_info_init_request"] = { en: _encode_sc_raid_info_init_request, de: _decode_sc_raid_info_init_request };
    var sc_raid_material_info_init_request = (function () {
        function sc_raid_material_info_init_request() {
        }
        return sc_raid_material_info_init_request;
    }());
    Sproto.sc_raid_material_info_init_request = sc_raid_material_info_init_request;
    __reflect(sc_raid_material_info_init_request.prototype, "Sproto.sc_raid_material_info_init_request");
    function _decode_sc_raid_material_info_init_request(d) {
        var o = new sc_raid_material_info_init_request;
        var t = -1;
        while (-1 != (t = d.rt())) {
            switch (t) {
                case 0:
                    o.raidModel = d.roa("raid_material_data");
                    break;
                case 1:
                    o.bossIndex = d.ri();
                    break;
                default:
                    d.nod();
                    break;
            }
        }
        return o;
    }
    function _encode_sc_raid_material_info_init_request(self, st) {
        var se = Sproto.SprotoCore.GetSerialize(st, 2);
        if (self.raidModel != undefined) {
            se.woa("raid_material_data", self.raidModel, 0);
        }
        if (self.bossIndex != undefined) {
            se.wi(self.bossIndex, 1);
        }
        return Sproto.SprotoCore.CloseSerialize(se);
    }
    Sproto.ALL_DICT["sc_raid_material_info_init_request"] = { en: _encode_sc_raid_material_info_init_request, de: _decode_sc_raid_material_info_init_request };
    var sc_raid_material_result_request = (function () {
        function sc_raid_material_result_request() {
        }
        return sc_raid_material_result_request;
    }());
    Sproto.sc_raid_material_result_request = sc_raid_material_result_request;
    __reflect(sc_raid_material_result_request.prototype, "Sproto.sc_raid_material_result_request");
    function _decode_sc_raid_material_result_request(d) {
        var o = new sc_raid_material_result_request;
        var t = -1;
        while (-1 != (t = d.rt())) {
            switch (t) {
                case 0:
                    o.result = d.ri();
                    break;
                case 1:
                    o.rewards = d.roa("reward_data");
                    break;
                case 2:
                    o.star = d.ri();
                    break;
                case 3:
                    o.dead = d.ri();
                    break;
                default:
                    d.nod();
                    break;
            }
        }
        return o;
    }
    function _encode_sc_raid_material_result_request(self, st) {
        var se = Sproto.SprotoCore.GetSerialize(st, 4);
        if (self.result != undefined) {
            se.wi(self.result, 0);
        }
        if (self.rewards != undefined) {
            se.woa("reward_data", self.rewards, 1);
        }
        if (self.star != undefined) {
            se.wi(self.star, 2);
        }
        if (self.dead != undefined) {
            se.wi(self.dead, 3);
        }
        return Sproto.SprotoCore.CloseSerialize(se);
    }
    Sproto.ALL_DICT["sc_raid_material_result_request"] = { en: _encode_sc_raid_material_result_request, de: _decode_sc_raid_material_result_request };
    var sc_raid_material_update_info_request = (function () {
        function sc_raid_material_update_info_request() {
        }
        return sc_raid_material_update_info_request;
    }());
    Sproto.sc_raid_material_update_info_request = sc_raid_material_update_info_request;
    __reflect(sc_raid_material_update_info_request.prototype, "Sproto.sc_raid_material_update_info_request");
    function _decode_sc_raid_material_update_info_request(d) {
        var o = new sc_raid_material_update_info_request;
        var t = -1;
        while (-1 != (t = d.rt())) {
            switch (t) {
                case 0:
                    o.raidData = d.ro("raid_material_data");
                    break;
                default:
                    d.nod();
                    break;
            }
        }
        return o;
    }
    function _encode_sc_raid_material_update_info_request(self, st) {
        var se = Sproto.SprotoCore.GetSerialize(st, 1);
        if (self.raidData != undefined) {
            se.wo("raid_material_data", self.raidData, 0);
        }
        return Sproto.SprotoCore.CloseSerialize(se);
    }
    Sproto.ALL_DICT["sc_raid_material_update_info_request"] = { en: _encode_sc_raid_material_update_info_request, de: _decode_sc_raid_material_update_info_request };
    var sc_raid_myboss_top_request = (function () {
        function sc_raid_myboss_top_request() {
        }
        return sc_raid_myboss_top_request;
    }());
    Sproto.sc_raid_myboss_top_request = sc_raid_myboss_top_request;
    __reflect(sc_raid_myboss_top_request.prototype, "Sproto.sc_raid_myboss_top_request");
    function _decode_sc_raid_myboss_top_request(d) {
        var o = new sc_raid_myboss_top_request;
        var t = -1;
        while (-1 != (t = d.rt())) {
            switch (t) {
                case 0:
                    o.mybossTop = d.ri();
                    break;
                default:
                    d.nod();
                    break;
            }
        }
        return o;
    }
    function _encode_sc_raid_myboss_top_request(self, st) {
        var se = Sproto.SprotoCore.GetSerialize(st, 1);
        if (self.mybossTop != undefined) {
            se.wi(self.mybossTop, 0);
        }
        return Sproto.SprotoCore.CloseSerialize(se);
    }
    Sproto.ALL_DICT["sc_raid_myboss_top_request"] = { en: _encode_sc_raid_myboss_top_request, de: _decode_sc_raid_myboss_top_request };
    var sc_raid_reborn_cd_request = (function () {
        function sc_raid_reborn_cd_request() {
        }
        return sc_raid_reborn_cd_request;
    }());
    Sproto.sc_raid_reborn_cd_request = sc_raid_reborn_cd_request;
    __reflect(sc_raid_reborn_cd_request.prototype, "Sproto.sc_raid_reborn_cd_request");
    function _decode_sc_raid_reborn_cd_request(d) {
        var o = new sc_raid_reborn_cd_request;
        var t = -1;
        while (-1 != (t = d.rt())) {
            switch (t) {
                case 0:
                    o.cdtime = d.ri();
                    break;
                default:
                    d.nod();
                    break;
            }
        }
        return o;
    }
    function _encode_sc_raid_reborn_cd_request(self, st) {
        var se = Sproto.SprotoCore.GetSerialize(st, 1);
        if (self.cdtime != undefined) {
            se.wi(self.cdtime, 0);
        }
        return Sproto.SprotoCore.CloseSerialize(se);
    }
    Sproto.ALL_DICT["sc_raid_reborn_cd_request"] = { en: _encode_sc_raid_reborn_cd_request, de: _decode_sc_raid_reborn_cd_request };
    var sc_raid_role_all_die_request = (function () {
        function sc_raid_role_all_die_request() {
        }
        return sc_raid_role_all_die_request;
    }());
    Sproto.sc_raid_role_all_die_request = sc_raid_role_all_die_request;
    __reflect(sc_raid_role_all_die_request.prototype, "Sproto.sc_raid_role_all_die_request");
    function _decode_sc_raid_role_all_die_request(d) {
        var o = new sc_raid_role_all_die_request;
        var t = -1;
        while (-1 != (t = d.rt())) {
            switch (t) {
                default:
                    d.nod();
                    break;
            }
        }
        return o;
    }
    function _encode_sc_raid_role_all_die_request(self, st) {
        var se = Sproto.SprotoCore.GetSerialize(st, 0);
        return Sproto.SprotoCore.CloseSerialize(se);
    }
    Sproto.ALL_DICT["sc_raid_role_all_die_request"] = { en: _encode_sc_raid_role_all_die_request, de: _decode_sc_raid_role_all_die_request };
    var sc_raid_sweep_reward_request = (function () {
        function sc_raid_sweep_reward_request() {
        }
        return sc_raid_sweep_reward_request;
    }());
    Sproto.sc_raid_sweep_reward_request = sc_raid_sweep_reward_request;
    __reflect(sc_raid_sweep_reward_request.prototype, "Sproto.sc_raid_sweep_reward_request");
    function _decode_sc_raid_sweep_reward_request(d) {
        var o = new sc_raid_sweep_reward_request;
        var t = -1;
        while (-1 != (t = d.rt())) {
            switch (t) {
                case 0:
                    o.result = d.ri();
                    break;
                case 1:
                    o.rewards = d.roa("reward_data");
                    break;
                default:
                    d.nod();
                    break;
            }
        }
        return o;
    }
    function _encode_sc_raid_sweep_reward_request(self, st) {
        var se = Sproto.SprotoCore.GetSerialize(st, 2);
        if (self.result != undefined) {
            se.wi(self.result, 0);
        }
        if (self.rewards != undefined) {
            se.woa("reward_data", self.rewards, 1);
        }
        return Sproto.SprotoCore.CloseSerialize(se);
    }
    Sproto.ALL_DICT["sc_raid_sweep_reward_request"] = { en: _encode_sc_raid_sweep_reward_request, de: _decode_sc_raid_sweep_reward_request };
    var sc_raid_time_request = (function () {
        function sc_raid_time_request() {
        }
        return sc_raid_time_request;
    }());
    Sproto.sc_raid_time_request = sc_raid_time_request;
    __reflect(sc_raid_time_request.prototype, "Sproto.sc_raid_time_request");
    function _decode_sc_raid_time_request(d) {
        var o = new sc_raid_time_request;
        var t = -1;
        while (-1 != (t = d.rt())) {
            switch (t) {
                default:
                    d.nod();
                    break;
            }
        }
        return o;
    }
    function _encode_sc_raid_time_request(self, st) {
        var se = Sproto.SprotoCore.GetSerialize(st, 0);
        return Sproto.SprotoCore.CloseSerialize(se);
    }
    Sproto.ALL_DICT["sc_raid_time_request"] = { en: _encode_sc_raid_time_request, de: _decode_sc_raid_time_request };
    var sc_raid_update_info_request = (function () {
        function sc_raid_update_info_request() {
        }
        return sc_raid_update_info_request;
    }());
    Sproto.sc_raid_update_info_request = sc_raid_update_info_request;
    __reflect(sc_raid_update_info_request.prototype, "Sproto.sc_raid_update_info_request");
    function _decode_sc_raid_update_info_request(d) {
        var o = new sc_raid_update_info_request;
        var t = -1;
        while (-1 != (t = d.rt())) {
            switch (t) {
                case 0:
                    o.raidData = d.ro("raid_data");
                    break;
                default:
                    d.nod();
                    break;
            }
        }
        return o;
    }
    function _encode_sc_raid_update_info_request(self, st) {
        var se = Sproto.SprotoCore.GetSerialize(st, 1);
        if (self.raidData != undefined) {
            se.wo("raid_data", self.raidData, 0);
        }
        return Sproto.SprotoCore.CloseSerialize(se);
    }
    Sproto.ALL_DICT["sc_raid_update_info_request"] = { en: _encode_sc_raid_update_info_request, de: _decode_sc_raid_update_info_request };
    var wave_drop_data = (function () {
        function wave_drop_data() {
        }
        return wave_drop_data;
    }());
    Sproto.wave_drop_data = wave_drop_data;
    __reflect(wave_drop_data.prototype, "Sproto.wave_drop_data");
    function _decode_wave_drop_data(d) {
        var o = new wave_drop_data;
        var t = -1;
        while (-1 != (t = d.rt())) {
            switch (t) {
                case 0:
                    o.index = d.ri();
                    break;
                case 1:
                    o.drops = d.roa("reward_data");
                    break;
                default:
                    d.nod();
                    break;
            }
        }
        return o;
    }
    function _encode_wave_drop_data(self, st) {
        var se = Sproto.SprotoCore.GetSerialize(st, 2);
        if (self.index != undefined) {
            se.wi(self.index, 0);
        }
        if (self.drops != undefined) {
            se.woa("reward_data", self.drops, 1);
        }
        return Sproto.SprotoCore.CloseSerialize(se);
    }
    Sproto.ALL_DICT["wave_drop_data"] = { en: _encode_wave_drop_data, de: _decode_wave_drop_data };
})(Sproto || (Sproto = {}));
//# sourceMappingURL=raid_s2c.js.map