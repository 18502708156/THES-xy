// Generated by sprotodump. DO NOT EDIT!
var __reflect = (this && this.__reflect) || function (p, c, t) {
    p.__class__ = c, t ? t.push(c) : t = [c], p.__types__ = p.__types__ ? t.concat(p.__types__) : t;
};
var Sproto;
(function (Sproto) {
    var sc_task_info_request = (function () {
        function sc_task_info_request() {
        }
        return sc_task_info_request;
    }());
    Sproto.sc_task_info_request = sc_task_info_request;
    __reflect(sc_task_info_request.prototype, "Sproto.sc_task_info_request");
    function _decode_sc_task_info_request(d) {
        var o = new sc_task_info_request;
        var t = -1;
        while (-1 != (t = d.rt())) {
            switch (t) {
                case 0:
                    o.type = d.ri();
                    break;
                case 1:
                    o.tasks = d.roa("task_data");
                    break;
                default:
                    d.nod();
                    break;
            }
        }
        return o;
    }
    function _encode_sc_task_info_request(self, st) {
        var se = Sproto.SprotoCore.GetSerialize(st, 2);
        if (self.type != undefined) {
            se.wi(self.type, 0);
        }
        if (self.tasks != undefined) {
            se.woa("task_data", self.tasks, 1);
        }
        return Sproto.SprotoCore.CloseSerialize(se);
    }
    Sproto.ALL_DICT["sc_task_info_request"] = { en: _encode_sc_task_info_request, de: _decode_sc_task_info_request };
    var sc_task_update_request = (function () {
        function sc_task_update_request() {
        }
        return sc_task_update_request;
    }());
    Sproto.sc_task_update_request = sc_task_update_request;
    __reflect(sc_task_update_request.prototype, "Sproto.sc_task_update_request");
    function _decode_sc_task_update_request(d) {
        var o = new sc_task_update_request;
        var t = -1;
        while (-1 != (t = d.rt())) {
            switch (t) {
                case 0:
                    o.type = d.ri();
                    break;
                case 1:
                    o.data = d.ro("task_data");
                    break;
                default:
                    d.nod();
                    break;
            }
        }
        return o;
    }
    function _encode_sc_task_update_request(self, st) {
        var se = Sproto.SprotoCore.GetSerialize(st, 2);
        if (self.type != undefined) {
            se.wi(self.type, 0);
        }
        if (self.data != undefined) {
            se.wo("task_data", self.data, 1);
        }
        return Sproto.SprotoCore.CloseSerialize(se);
    }
    Sproto.ALL_DICT["sc_task_update_request"] = { en: _encode_sc_task_update_request, de: _decode_sc_task_update_request };
    var task_data = (function () {
        function task_data() {
        }
        return task_data;
    }());
    Sproto.task_data = task_data;
    __reflect(task_data.prototype, "Sproto.task_data");
    function _decode_task_data(d) {
        var o = new task_data;
        var t = -1;
        while (-1 != (t = d.rt())) {
            switch (t) {
                case 0:
                    o.id = d.ri();
                    break;
                case 1:
                    o.status = d.ri();
                    break;
                case 2:
                    o.progress = d.ro("task_progress_data");
                    break;
                default:
                    d.nod();
                    break;
            }
        }
        return o;
    }
    function _encode_task_data(self, st) {
        var se = Sproto.SprotoCore.GetSerialize(st, 3);
        if (self.id != undefined) {
            se.wi(self.id, 0);
        }
        if (self.status != undefined) {
            se.wi(self.status, 1);
        }
        if (self.progress != undefined) {
            se.wo("task_progress_data", self.progress, 2);
        }
        return Sproto.SprotoCore.CloseSerialize(se);
    }
    Sproto.ALL_DICT["task_data"] = { en: _encode_task_data, de: _decode_task_data };
    var task_progress_data = (function () {
        function task_progress_data() {
        }
        return task_progress_data;
    }());
    Sproto.task_progress_data = task_progress_data;
    __reflect(task_progress_data.prototype, "Sproto.task_progress_data");
    function _decode_task_progress_data(d) {
        var o = new task_progress_data;
        var t = -1;
        while (-1 != (t = d.rt())) {
            switch (t) {
                case 0:
                    o.value = d.ri();
                    break;
                default:
                    d.nod();
                    break;
            }
        }
        return o;
    }
    function _encode_task_progress_data(self, st) {
        var se = Sproto.SprotoCore.GetSerialize(st, 1);
        if (self.value != undefined) {
            se.wi(self.value, 0);
        }
        return Sproto.SprotoCore.CloseSerialize(se);
    }
    Sproto.ALL_DICT["task_progress_data"] = { en: _encode_task_progress_data, de: _decode_task_progress_data };
})(Sproto || (Sproto = {}));
//# sourceMappingURL=task_s2c.js.map