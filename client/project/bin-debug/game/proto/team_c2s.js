// Generated by sprotodump. DO NOT EDIT!
var __reflect = (this && this.__reflect) || function (p, c, t) {
    p.__class__ = c, t ? t.push(c) : t = [c], p.__types__ = p.__types__ ? t.concat(p.__types__) : t;
};
var Sproto;
(function (Sproto) {
    var cs_team_call_robot_request = (function () {
        function cs_team_call_robot_request() {
        }
        return cs_team_call_robot_request;
    }());
    Sproto.cs_team_call_robot_request = cs_team_call_robot_request;
    __reflect(cs_team_call_robot_request.prototype, "Sproto.cs_team_call_robot_request");
    function _decode_cs_team_call_robot_request(d) {
        var o = new cs_team_call_robot_request;
        var t = -1;
        while (-1 != (t = d.rt())) {
            switch (t) {
                case 0:
                    o.raidtype = d.ri();
                    break;
                case 1:
                    o.level = d.ri();
                    break;
                default:
                    d.nod();
                    break;
            }
        }
        return o;
    }
    function _encode_cs_team_call_robot_request(self, st) {
        var se = Sproto.SprotoCore.GetSerialize(st, 2);
        if (self.raidtype != undefined) {
            se.wi(self.raidtype, 0);
        }
        if (self.level != undefined) {
            se.wi(self.level, 1);
        }
        return Sproto.SprotoCore.CloseSerialize(se);
    }
    Sproto.ALL_DICT["cs_team_call_robot_request"] = { en: _encode_cs_team_call_robot_request, de: _decode_cs_team_call_robot_request };
    var cs_team_condition_request = (function () {
        function cs_team_condition_request() {
        }
        return cs_team_condition_request;
    }());
    Sproto.cs_team_condition_request = cs_team_condition_request;
    __reflect(cs_team_condition_request.prototype, "Sproto.cs_team_condition_request");
    function _decode_cs_team_condition_request(d) {
        var o = new cs_team_condition_request;
        var t = -1;
        while (-1 != (t = d.rt())) {
            switch (t) {
                case 0:
                    o.raidtype = d.ri();
                    break;
                case 1:
                    o.level = d.ri();
                    break;
                case 2:
                    o.needpower = d.ri();
                    break;
                default:
                    d.nod();
                    break;
            }
        }
        return o;
    }
    function _encode_cs_team_condition_request(self, st) {
        var se = Sproto.SprotoCore.GetSerialize(st, 3);
        if (self.raidtype != undefined) {
            se.wi(self.raidtype, 0);
        }
        if (self.level != undefined) {
            se.wi(self.level, 1);
        }
        if (self.needpower != undefined) {
            se.wi(self.needpower, 2);
        }
        return Sproto.SprotoCore.CloseSerialize(se);
    }
    Sproto.ALL_DICT["cs_team_condition_request"] = { en: _encode_cs_team_condition_request, de: _decode_cs_team_condition_request };
    var cs_team_create_request = (function () {
        function cs_team_create_request() {
        }
        return cs_team_create_request;
    }());
    Sproto.cs_team_create_request = cs_team_create_request;
    __reflect(cs_team_create_request.prototype, "Sproto.cs_team_create_request");
    function _decode_cs_team_create_request(d) {
        var o = new cs_team_create_request;
        var t = -1;
        while (-1 != (t = d.rt())) {
            switch (t) {
                case 0:
                    o.raidtype = d.ri();
                    break;
                case 1:
                    o.level = d.ri();
                    break;
                default:
                    d.nod();
                    break;
            }
        }
        return o;
    }
    function _encode_cs_team_create_request(self, st) {
        var se = Sproto.SprotoCore.GetSerialize(st, 2);
        if (self.raidtype != undefined) {
            se.wi(self.raidtype, 0);
        }
        if (self.level != undefined) {
            se.wi(self.level, 1);
        }
        return Sproto.SprotoCore.CloseSerialize(se);
    }
    Sproto.ALL_DICT["cs_team_create_request"] = { en: _encode_cs_team_create_request, de: _decode_cs_team_create_request };
    var cs_team_create_response = (function () {
        function cs_team_create_response() {
        }
        return cs_team_create_response;
    }());
    Sproto.cs_team_create_response = cs_team_create_response;
    __reflect(cs_team_create_response.prototype, "Sproto.cs_team_create_response");
    function _decode_cs_team_create_response(d) {
        var o = new cs_team_create_response;
        var t = -1;
        while (-1 != (t = d.rt())) {
            switch (t) {
                case 0:
                    o.ret = d.rb();
                    break;
                default:
                    d.nod();
                    break;
            }
        }
        return o;
    }
    function _encode_cs_team_create_response(self, st) {
        var se = Sproto.SprotoCore.GetSerialize(st, 1);
        if (self.ret != undefined) {
            se.wb(self.ret, 0);
        }
        return Sproto.SprotoCore.CloseSerialize(se);
    }
    Sproto.ALL_DICT["cs_team_create_response"] = { en: _encode_cs_team_create_response, de: _decode_cs_team_create_response };
    var cs_team_fight_request = (function () {
        function cs_team_fight_request() {
        }
        return cs_team_fight_request;
    }());
    Sproto.cs_team_fight_request = cs_team_fight_request;
    __reflect(cs_team_fight_request.prototype, "Sproto.cs_team_fight_request");
    function _decode_cs_team_fight_request(d) {
        var o = new cs_team_fight_request;
        var t = -1;
        while (-1 != (t = d.rt())) {
            switch (t) {
                case 0:
                    o.raidtype = d.ri();
                    break;
                case 1:
                    o.level = d.ri();
                    break;
                case 2:
                    o.ext = d.ri();
                    break;
                default:
                    d.nod();
                    break;
            }
        }
        return o;
    }
    function _encode_cs_team_fight_request(self, st) {
        var se = Sproto.SprotoCore.GetSerialize(st, 3);
        if (self.raidtype != undefined) {
            se.wi(self.raidtype, 0);
        }
        if (self.level != undefined) {
            se.wi(self.level, 1);
        }
        if (self.ext != undefined) {
            se.wi(self.ext, 2);
        }
        return Sproto.SprotoCore.CloseSerialize(se);
    }
    Sproto.ALL_DICT["cs_team_fight_request"] = { en: _encode_cs_team_fight_request, de: _decode_cs_team_fight_request };
    var cs_team_fight_response = (function () {
        function cs_team_fight_response() {
        }
        return cs_team_fight_response;
    }());
    Sproto.cs_team_fight_response = cs_team_fight_response;
    __reflect(cs_team_fight_response.prototype, "Sproto.cs_team_fight_response");
    function _decode_cs_team_fight_response(d) {
        var o = new cs_team_fight_response;
        var t = -1;
        while (-1 != (t = d.rt())) {
            switch (t) {
                case 0:
                    o.ret = d.rb();
                    break;
                default:
                    d.nod();
                    break;
            }
        }
        return o;
    }
    function _encode_cs_team_fight_response(self, st) {
        var se = Sproto.SprotoCore.GetSerialize(st, 1);
        if (self.ret != undefined) {
            se.wb(self.ret, 0);
        }
        return Sproto.SprotoCore.CloseSerialize(se);
    }
    Sproto.ALL_DICT["cs_team_fight_response"] = { en: _encode_cs_team_fight_response, de: _decode_cs_team_fight_response };
    var cs_team_info_request = (function () {
        function cs_team_info_request() {
        }
        return cs_team_info_request;
    }());
    Sproto.cs_team_info_request = cs_team_info_request;
    __reflect(cs_team_info_request.prototype, "Sproto.cs_team_info_request");
    function _decode_cs_team_info_request(d) {
        var o = new cs_team_info_request;
        var t = -1;
        while (-1 != (t = d.rt())) {
            switch (t) {
                default:
                    d.nod();
                    break;
            }
        }
        return o;
    }
    function _encode_cs_team_info_request(self, st) {
        var se = Sproto.SprotoCore.GetSerialize(st, 0);
        return Sproto.SprotoCore.CloseSerialize(se);
    }
    Sproto.ALL_DICT["cs_team_info_request"] = { en: _encode_cs_team_info_request, de: _decode_cs_team_info_request };
    var cs_team_join_request = (function () {
        function cs_team_join_request() {
        }
        return cs_team_join_request;
    }());
    Sproto.cs_team_join_request = cs_team_join_request;
    __reflect(cs_team_join_request.prototype, "Sproto.cs_team_join_request");
    function _decode_cs_team_join_request(d) {
        var o = new cs_team_join_request;
        var t = -1;
        while (-1 != (t = d.rt())) {
            switch (t) {
                case 0:
                    o.raidtype = d.ri();
                    break;
                case 1:
                    o.level = d.ri();
                    break;
                case 2:
                    o.leaderid = d.ri();
                    break;
                default:
                    d.nod();
                    break;
            }
        }
        return o;
    }
    function _encode_cs_team_join_request(self, st) {
        var se = Sproto.SprotoCore.GetSerialize(st, 3);
        if (self.raidtype != undefined) {
            se.wi(self.raidtype, 0);
        }
        if (self.level != undefined) {
            se.wi(self.level, 1);
        }
        if (self.leaderid != undefined) {
            se.wi(self.leaderid, 2);
        }
        return Sproto.SprotoCore.CloseSerialize(se);
    }
    Sproto.ALL_DICT["cs_team_join_request"] = { en: _encode_cs_team_join_request, de: _decode_cs_team_join_request };
    var cs_team_join_response = (function () {
        function cs_team_join_response() {
        }
        return cs_team_join_response;
    }());
    Sproto.cs_team_join_response = cs_team_join_response;
    __reflect(cs_team_join_response.prototype, "Sproto.cs_team_join_response");
    function _decode_cs_team_join_response(d) {
        var o = new cs_team_join_response;
        var t = -1;
        while (-1 != (t = d.rt())) {
            switch (t) {
                case 0:
                    o.ret = d.rb();
                    break;
                default:
                    d.nod();
                    break;
            }
        }
        return o;
    }
    function _encode_cs_team_join_response(self, st) {
        var se = Sproto.SprotoCore.GetSerialize(st, 1);
        if (self.ret != undefined) {
            se.wb(self.ret, 0);
        }
        return Sproto.SprotoCore.CloseSerialize(se);
    }
    Sproto.ALL_DICT["cs_team_join_response"] = { en: _encode_cs_team_join_response, de: _decode_cs_team_join_response };
    var cs_team_kick_request = (function () {
        function cs_team_kick_request() {
        }
        return cs_team_kick_request;
    }());
    Sproto.cs_team_kick_request = cs_team_kick_request;
    __reflect(cs_team_kick_request.prototype, "Sproto.cs_team_kick_request");
    function _decode_cs_team_kick_request(d) {
        var o = new cs_team_kick_request;
        var t = -1;
        while (-1 != (t = d.rt())) {
            switch (t) {
                case 0:
                    o.raidtype = d.ri();
                    break;
                case 1:
                    o.level = d.ri();
                    break;
                case 2:
                    o.memberid = d.ri();
                    break;
                default:
                    d.nod();
                    break;
            }
        }
        return o;
    }
    function _encode_cs_team_kick_request(self, st) {
        var se = Sproto.SprotoCore.GetSerialize(st, 3);
        if (self.raidtype != undefined) {
            se.wi(self.raidtype, 0);
        }
        if (self.level != undefined) {
            se.wi(self.level, 1);
        }
        if (self.memberid != undefined) {
            se.wi(self.memberid, 2);
        }
        return Sproto.SprotoCore.CloseSerialize(se);
    }
    Sproto.ALL_DICT["cs_team_kick_request"] = { en: _encode_cs_team_kick_request, de: _decode_cs_team_kick_request };
    var cs_team_kick_response = (function () {
        function cs_team_kick_response() {
        }
        return cs_team_kick_response;
    }());
    Sproto.cs_team_kick_response = cs_team_kick_response;
    __reflect(cs_team_kick_response.prototype, "Sproto.cs_team_kick_response");
    function _decode_cs_team_kick_response(d) {
        var o = new cs_team_kick_response;
        var t = -1;
        while (-1 != (t = d.rt())) {
            switch (t) {
                case 0:
                    o.ret = d.rb();
                    break;
                default:
                    d.nod();
                    break;
            }
        }
        return o;
    }
    function _encode_cs_team_kick_response(self, st) {
        var se = Sproto.SprotoCore.GetSerialize(st, 1);
        if (self.ret != undefined) {
            se.wb(self.ret, 0);
        }
        return Sproto.SprotoCore.CloseSerialize(se);
    }
    Sproto.ALL_DICT["cs_team_kick_response"] = { en: _encode_cs_team_kick_response, de: _decode_cs_team_kick_response };
    var cs_team_leave_request = (function () {
        function cs_team_leave_request() {
        }
        return cs_team_leave_request;
    }());
    Sproto.cs_team_leave_request = cs_team_leave_request;
    __reflect(cs_team_leave_request.prototype, "Sproto.cs_team_leave_request");
    function _decode_cs_team_leave_request(d) {
        var o = new cs_team_leave_request;
        var t = -1;
        while (-1 != (t = d.rt())) {
            switch (t) {
                case 0:
                    o.raidtype = d.ri();
                    break;
                case 1:
                    o.level = d.ri();
                    break;
                default:
                    d.nod();
                    break;
            }
        }
        return o;
    }
    function _encode_cs_team_leave_request(self, st) {
        var se = Sproto.SprotoCore.GetSerialize(st, 2);
        if (self.raidtype != undefined) {
            se.wi(self.raidtype, 0);
        }
        if (self.level != undefined) {
            se.wi(self.level, 1);
        }
        return Sproto.SprotoCore.CloseSerialize(se);
    }
    Sproto.ALL_DICT["cs_team_leave_request"] = { en: _encode_cs_team_leave_request, de: _decode_cs_team_leave_request };
    var cs_team_leave_response = (function () {
        function cs_team_leave_response() {
        }
        return cs_team_leave_response;
    }());
    Sproto.cs_team_leave_response = cs_team_leave_response;
    __reflect(cs_team_leave_response.prototype, "Sproto.cs_team_leave_response");
    function _decode_cs_team_leave_response(d) {
        var o = new cs_team_leave_response;
        var t = -1;
        while (-1 != (t = d.rt())) {
            switch (t) {
                case 0:
                    o.ret = d.rb();
                    break;
                default:
                    d.nod();
                    break;
            }
        }
        return o;
    }
    function _encode_cs_team_leave_response(self, st) {
        var se = Sproto.SprotoCore.GetSerialize(st, 1);
        if (self.ret != undefined) {
            se.wb(self.ret, 0);
        }
        return Sproto.SprotoCore.CloseSerialize(se);
    }
    Sproto.ALL_DICT["cs_team_leave_response"] = { en: _encode_cs_team_leave_response, de: _decode_cs_team_leave_response };
    var cs_team_list_request = (function () {
        function cs_team_list_request() {
        }
        return cs_team_list_request;
    }());
    Sproto.cs_team_list_request = cs_team_list_request;
    __reflect(cs_team_list_request.prototype, "Sproto.cs_team_list_request");
    function _decode_cs_team_list_request(d) {
        var o = new cs_team_list_request;
        var t = -1;
        while (-1 != (t = d.rt())) {
            switch (t) {
                case 0:
                    o.raidtype = d.ri();
                    break;
                case 1:
                    o.level = d.ri();
                    break;
                default:
                    d.nod();
                    break;
            }
        }
        return o;
    }
    function _encode_cs_team_list_request(self, st) {
        var se = Sproto.SprotoCore.GetSerialize(st, 2);
        if (self.raidtype != undefined) {
            se.wi(self.raidtype, 0);
        }
        if (self.level != undefined) {
            se.wi(self.level, 1);
        }
        return Sproto.SprotoCore.CloseSerialize(se);
    }
    Sproto.ALL_DICT["cs_team_list_request"] = { en: _encode_cs_team_list_request, de: _decode_cs_team_list_request };
    var cs_team_quick_request = (function () {
        function cs_team_quick_request() {
        }
        return cs_team_quick_request;
    }());
    Sproto.cs_team_quick_request = cs_team_quick_request;
    __reflect(cs_team_quick_request.prototype, "Sproto.cs_team_quick_request");
    function _decode_cs_team_quick_request(d) {
        var o = new cs_team_quick_request;
        var t = -1;
        while (-1 != (t = d.rt())) {
            switch (t) {
                case 0:
                    o.raidtype = d.ri();
                    break;
                case 1:
                    o.level = d.ri();
                    break;
                default:
                    d.nod();
                    break;
            }
        }
        return o;
    }
    function _encode_cs_team_quick_request(self, st) {
        var se = Sproto.SprotoCore.GetSerialize(st, 2);
        if (self.raidtype != undefined) {
            se.wi(self.raidtype, 0);
        }
        if (self.level != undefined) {
            se.wi(self.level, 1);
        }
        return Sproto.SprotoCore.CloseSerialize(se);
    }
    Sproto.ALL_DICT["cs_team_quick_request"] = { en: _encode_cs_team_quick_request, de: _decode_cs_team_quick_request };
    var cs_team_quick_response = (function () {
        function cs_team_quick_response() {
        }
        return cs_team_quick_response;
    }());
    Sproto.cs_team_quick_response = cs_team_quick_response;
    __reflect(cs_team_quick_response.prototype, "Sproto.cs_team_quick_response");
    function _decode_cs_team_quick_response(d) {
        var o = new cs_team_quick_response;
        var t = -1;
        while (-1 != (t = d.rt())) {
            switch (t) {
                case 0:
                    o.ret = d.rb();
                    break;
                default:
                    d.nod();
                    break;
            }
        }
        return o;
    }
    function _encode_cs_team_quick_response(self, st) {
        var se = Sproto.SprotoCore.GetSerialize(st, 1);
        if (self.ret != undefined) {
            se.wb(self.ret, 0);
        }
        return Sproto.SprotoCore.CloseSerialize(se);
    }
    Sproto.ALL_DICT["cs_team_quick_response"] = { en: _encode_cs_team_quick_response, de: _decode_cs_team_quick_response };
})(Sproto || (Sproto = {}));
//# sourceMappingURL=team_c2s.js.map