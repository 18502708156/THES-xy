// Generated by sprotodump. DO NOT EDIT!
var __reflect = (this && this.__reflect) || function (p, c, t) {
    p.__class__ = c, t ? t.push(c) : t = [c], p.__types__ = p.__types__ ? t.concat(p.__types__) : t;
};
var Sproto;
(function (Sproto) {
    var member_data = (function () {
        function member_data() {
        }
        return member_data;
    }());
    Sproto.member_data = member_data;
    __reflect(member_data.prototype, "Sproto.member_data");
    function _decode_member_data(d) {
        var o = new member_data;
        var t = -1;
        while (-1 != (t = d.rt())) {
            switch (t) {
                case 0:
                    o.dbid = d.ri();
                    break;
                case 1:
                    o.power = d.ri();
                    break;
                case 2:
                    o.name = d.rs();
                    break;
                case 3:
                    o.level = d.ri();
                    break;
                case 4:
                    o.job = d.ri();
                    break;
                case 5:
                    o.sex = d.ri();
                    break;
                default:
                    d.nod();
                    break;
            }
        }
        return o;
    }
    function _encode_member_data(self, st) {
        var se = Sproto.SprotoCore.GetSerialize(st, 6);
        if (self.dbid != undefined) {
            se.wi(self.dbid, 0);
        }
        if (self.power != undefined) {
            se.wi(self.power, 1);
        }
        if (self.name != undefined) {
            se.ws(self.name, 2);
        }
        if (self.level != undefined) {
            se.wi(self.level, 3);
        }
        if (self.job != undefined) {
            se.wi(self.job, 4);
        }
        if (self.sex != undefined) {
            se.wi(self.sex, 5);
        }
        return Sproto.SprotoCore.CloseSerialize(se);
    }
    Sproto.ALL_DICT["member_data"] = { en: _encode_member_data, de: _decode_member_data };
    var sc_team_info_request = (function () {
        function sc_team_info_request() {
        }
        return sc_team_info_request;
    }());
    Sproto.sc_team_info_request = sc_team_info_request;
    __reflect(sc_team_info_request.prototype, "Sproto.sc_team_info_request");
    function _decode_sc_team_info_request(d) {
        var o = new sc_team_info_request;
        var t = -1;
        while (-1 != (t = d.rt())) {
            switch (t) {
                case 0:
                    o.members = d.roa("member_data");
                    break;
                case 1:
                    o.leaderid = d.ri();
                    break;
                case 2:
                    o.raidtype = d.ri();
                    break;
                case 3:
                    o.level = d.ri();
                    break;
                case 4:
                    o.needpower = d.ri();
                    break;
                default:
                    d.nod();
                    break;
            }
        }
        return o;
    }
    function _encode_sc_team_info_request(self, st) {
        var se = Sproto.SprotoCore.GetSerialize(st, 5);
        if (self.members != undefined) {
            se.woa("member_data", self.members, 0);
        }
        if (self.leaderid != undefined) {
            se.wi(self.leaderid, 1);
        }
        if (self.raidtype != undefined) {
            se.wi(self.raidtype, 2);
        }
        if (self.level != undefined) {
            se.wi(self.level, 3);
        }
        if (self.needpower != undefined) {
            se.wi(self.needpower, 4);
        }
        return Sproto.SprotoCore.CloseSerialize(se);
    }
    Sproto.ALL_DICT["sc_team_info_request"] = { en: _encode_sc_team_info_request, de: _decode_sc_team_info_request };
    var sc_team_list_request = (function () {
        function sc_team_list_request() {
        }
        return sc_team_list_request;
    }());
    Sproto.sc_team_list_request = sc_team_list_request;
    __reflect(sc_team_list_request.prototype, "Sproto.sc_team_list_request");
    function _decode_sc_team_list_request(d) {
        var o = new sc_team_list_request;
        var t = -1;
        while (-1 != (t = d.rt())) {
            switch (t) {
                case 0:
                    o.teamlist = d.roa("team_data");
                    break;
                case 1:
                    o.raidtype = d.ri();
                    break;
                case 2:
                    o.level = d.ri();
                    break;
                default:
                    d.nod();
                    break;
            }
        }
        return o;
    }
    function _encode_sc_team_list_request(self, st) {
        var se = Sproto.SprotoCore.GetSerialize(st, 3);
        if (self.teamlist != undefined) {
            se.woa("team_data", self.teamlist, 0);
        }
        if (self.raidtype != undefined) {
            se.wi(self.raidtype, 1);
        }
        if (self.level != undefined) {
            se.wi(self.level, 2);
        }
        return Sproto.SprotoCore.CloseSerialize(se);
    }
    Sproto.ALL_DICT["sc_team_list_request"] = { en: _encode_sc_team_list_request, de: _decode_sc_team_list_request };
    var sc_team_one_request = (function () {
        function sc_team_one_request() {
        }
        return sc_team_one_request;
    }());
    Sproto.sc_team_one_request = sc_team_one_request;
    __reflect(sc_team_one_request.prototype, "Sproto.sc_team_one_request");
    function _decode_sc_team_one_request(d) {
        var o = new sc_team_one_request;
        var t = -1;
        while (-1 != (t = d.rt())) {
            switch (t) {
                case 0:
                    o.members = d.roa("member_data");
                    break;
                case 1:
                    o.leaderid = d.ri();
                    break;
                case 2:
                    o.raidtype = d.ri();
                    break;
                case 3:
                    o.level = d.ri();
                    break;
                case 4:
                    o.needpower = d.ri();
                    break;
                default:
                    d.nod();
                    break;
            }
        }
        return o;
    }
    function _encode_sc_team_one_request(self, st) {
        var se = Sproto.SprotoCore.GetSerialize(st, 5);
        if (self.members != undefined) {
            se.woa("member_data", self.members, 0);
        }
        if (self.leaderid != undefined) {
            se.wi(self.leaderid, 1);
        }
        if (self.raidtype != undefined) {
            se.wi(self.raidtype, 2);
        }
        if (self.level != undefined) {
            se.wi(self.level, 3);
        }
        if (self.needpower != undefined) {
            se.wi(self.needpower, 4);
        }
        return Sproto.SprotoCore.CloseSerialize(se);
    }
    Sproto.ALL_DICT["sc_team_one_request"] = { en: _encode_sc_team_one_request, de: _decode_sc_team_one_request };
    var team_data = (function () {
        function team_data() {
        }
        return team_data;
    }());
    Sproto.team_data = team_data;
    __reflect(team_data.prototype, "Sproto.team_data");
    function _decode_team_data(d) {
        var o = new team_data;
        var t = -1;
        while (-1 != (t = d.rt())) {
            switch (t) {
                case 0:
                    o.leaderid = d.ri();
                    break;
                case 1:
                    o.count = d.ri();
                    break;
                case 2:
                    o.members = d.roa("member_data");
                    break;
                case 3:
                    o.needpower = d.ri();
                    break;
                default:
                    d.nod();
                    break;
            }
        }
        return o;
    }
    function _encode_team_data(self, st) {
        var se = Sproto.SprotoCore.GetSerialize(st, 4);
        if (self.leaderid != undefined) {
            se.wi(self.leaderid, 0);
        }
        if (self.count != undefined) {
            se.wi(self.count, 1);
        }
        if (self.members != undefined) {
            se.woa("member_data", self.members, 2);
        }
        if (self.needpower != undefined) {
            se.wi(self.needpower, 3);
        }
        return Sproto.SprotoCore.CloseSerialize(se);
    }
    Sproto.ALL_DICT["team_data"] = { en: _encode_team_data, de: _decode_team_data };
})(Sproto || (Sproto = {}));
//# sourceMappingURL=team_s2c.js.map