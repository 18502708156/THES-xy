// Generated by sprotodump. DO NOT EDIT!
var __reflect = (this && this.__reflect) || function (p, c, t) {
    p.__class__ = c, t ? t.push(c) : t = [c], p.__types__ = p.__types__ ? t.concat(p.__types__) : t;
};
var Sproto;
(function (Sproto) {
    var cs_totems_add_exp_request = (function () {
        function cs_totems_add_exp_request() {
        }
        return cs_totems_add_exp_request;
    }());
    Sproto.cs_totems_add_exp_request = cs_totems_add_exp_request;
    __reflect(cs_totems_add_exp_request.prototype, "Sproto.cs_totems_add_exp_request");
    function _decode_cs_totems_add_exp_request(d) {
        var o = new cs_totems_add_exp_request;
        var t = -1;
        while (-1 != (t = d.rt())) {
            switch (t) {
                case 0:
                    o.id = d.ri();
                    break;
                case 1:
                    o.num = d.ri();
                    break;
                case 2:
                    o.autobuy = d.ri();
                    break;
                default:
                    d.nod();
                    break;
            }
        }
        return o;
    }
    function _encode_cs_totems_add_exp_request(self, st) {
        var se = Sproto.SprotoCore.GetSerialize(st, 3);
        if (self.id != undefined) {
            se.wi(self.id, 0);
        }
        if (self.num != undefined) {
            se.wi(self.num, 1);
        }
        if (self.autobuy != undefined) {
            se.wi(self.autobuy, 2);
        }
        return Sproto.SprotoCore.CloseSerialize(se);
    }
    Sproto.ALL_DICT["cs_totems_add_exp_request"] = { en: _encode_cs_totems_add_exp_request, de: _decode_cs_totems_add_exp_request };
    var cs_totems_add_exp_response = (function () {
        function cs_totems_add_exp_response() {
        }
        return cs_totems_add_exp_response;
    }());
    Sproto.cs_totems_add_exp_response = cs_totems_add_exp_response;
    __reflect(cs_totems_add_exp_response.prototype, "Sproto.cs_totems_add_exp_response");
    function _decode_cs_totems_add_exp_response(d) {
        var o = new cs_totems_add_exp_response;
        var t = -1;
        while (-1 != (t = d.rt())) {
            switch (t) {
                case 0:
                    o.ret = d.rb();
                    break;
                case 1:
                    o.id = d.ri();
                    break;
                case 2:
                    o.lv = d.ri();
                    break;
                case 3:
                    o.upNum = d.ri();
                    break;
                case 4:
                    o.todayNum = d.ri();
                    break;
                case 5:
                    o.todayId = d.ri();
                    break;
                case 6:
                    o.breach = d.ri();
                    break;
                default:
                    d.nod();
                    break;
            }
        }
        return o;
    }
    function _encode_cs_totems_add_exp_response(self, st) {
        var se = Sproto.SprotoCore.GetSerialize(st, 7);
        if (self.ret != undefined) {
            se.wb(self.ret, 0);
        }
        if (self.id != undefined) {
            se.wi(self.id, 1);
        }
        if (self.lv != undefined) {
            se.wi(self.lv, 2);
        }
        if (self.upNum != undefined) {
            se.wi(self.upNum, 3);
        }
        if (self.todayNum != undefined) {
            se.wi(self.todayNum, 4);
        }
        if (self.todayId != undefined) {
            se.wi(self.todayId, 5);
        }
        if (self.breach != undefined) {
            se.wi(self.breach, 6);
        }
        return Sproto.SprotoCore.CloseSerialize(se);
    }
    Sproto.ALL_DICT["cs_totems_add_exp_response"] = { en: _encode_cs_totems_add_exp_response, de: _decode_cs_totems_add_exp_response };
    var cs_totems_breach_request = (function () {
        function cs_totems_breach_request() {
        }
        return cs_totems_breach_request;
    }());
    Sproto.cs_totems_breach_request = cs_totems_breach_request;
    __reflect(cs_totems_breach_request.prototype, "Sproto.cs_totems_breach_request");
    function _decode_cs_totems_breach_request(d) {
        var o = new cs_totems_breach_request;
        var t = -1;
        while (-1 != (t = d.rt())) {
            switch (t) {
                case 0:
                    o.id = d.ri();
                    break;
                default:
                    d.nod();
                    break;
            }
        }
        return o;
    }
    function _encode_cs_totems_breach_request(self, st) {
        var se = Sproto.SprotoCore.GetSerialize(st, 1);
        if (self.id != undefined) {
            se.wi(self.id, 0);
        }
        return Sproto.SprotoCore.CloseSerialize(se);
    }
    Sproto.ALL_DICT["cs_totems_breach_request"] = { en: _encode_cs_totems_breach_request, de: _decode_cs_totems_breach_request };
    var cs_totems_breach_response = (function () {
        function cs_totems_breach_response() {
        }
        return cs_totems_breach_response;
    }());
    Sproto.cs_totems_breach_response = cs_totems_breach_response;
    __reflect(cs_totems_breach_response.prototype, "Sproto.cs_totems_breach_response");
    function _decode_cs_totems_breach_response(d) {
        var o = new cs_totems_breach_response;
        var t = -1;
        while (-1 != (t = d.rt())) {
            switch (t) {
                case 0:
                    o.ret = d.rb();
                    break;
                case 1:
                    o.id = d.ri();
                    break;
                case 2:
                    o.lv = d.ri();
                    break;
                case 3:
                    o.upNum = d.ri();
                    break;
                case 4:
                    o.todayNum = d.ri();
                    break;
                case 5:
                    o.todayId = d.ri();
                    break;
                case 6:
                    o.breach = d.ri();
                    break;
                default:
                    d.nod();
                    break;
            }
        }
        return o;
    }
    function _encode_cs_totems_breach_response(self, st) {
        var se = Sproto.SprotoCore.GetSerialize(st, 7);
        if (self.ret != undefined) {
            se.wb(self.ret, 0);
        }
        if (self.id != undefined) {
            se.wi(self.id, 1);
        }
        if (self.lv != undefined) {
            se.wi(self.lv, 2);
        }
        if (self.upNum != undefined) {
            se.wi(self.upNum, 3);
        }
        if (self.todayNum != undefined) {
            se.wi(self.todayNum, 4);
        }
        if (self.todayId != undefined) {
            se.wi(self.todayId, 5);
        }
        if (self.breach != undefined) {
            se.wi(self.breach, 6);
        }
        return Sproto.SprotoCore.CloseSerialize(se);
    }
    Sproto.ALL_DICT["cs_totems_breach_response"] = { en: _encode_cs_totems_breach_response, de: _decode_cs_totems_breach_response };
    var cs_totems_open_request = (function () {
        function cs_totems_open_request() {
        }
        return cs_totems_open_request;
    }());
    Sproto.cs_totems_open_request = cs_totems_open_request;
    __reflect(cs_totems_open_request.prototype, "Sproto.cs_totems_open_request");
    function _decode_cs_totems_open_request(d) {
        var o = new cs_totems_open_request;
        var t = -1;
        while (-1 != (t = d.rt())) {
            switch (t) {
                case 0:
                    o.id = d.ri();
                    break;
                default:
                    d.nod();
                    break;
            }
        }
        return o;
    }
    function _encode_cs_totems_open_request(self, st) {
        var se = Sproto.SprotoCore.GetSerialize(st, 1);
        if (self.id != undefined) {
            se.wi(self.id, 0);
        }
        return Sproto.SprotoCore.CloseSerialize(se);
    }
    Sproto.ALL_DICT["cs_totems_open_request"] = { en: _encode_cs_totems_open_request, de: _decode_cs_totems_open_request };
    var cs_totems_open_response = (function () {
        function cs_totems_open_response() {
        }
        return cs_totems_open_response;
    }());
    Sproto.cs_totems_open_response = cs_totems_open_response;
    __reflect(cs_totems_open_response.prototype, "Sproto.cs_totems_open_response");
    function _decode_cs_totems_open_response(d) {
        var o = new cs_totems_open_response;
        var t = -1;
        while (-1 != (t = d.rt())) {
            switch (t) {
                case 0:
                    o.ret = d.rb();
                    break;
                case 1:
                    o.id = d.ri();
                    break;
                case 2:
                    o.lv = d.ri();
                    break;
                case 3:
                    o.upNum = d.ri();
                    break;
                case 4:
                    o.todayNum = d.ri();
                    break;
                case 5:
                    o.todayId = d.ri();
                    break;
                case 6:
                    o.breach = d.ri();
                    break;
                default:
                    d.nod();
                    break;
            }
        }
        return o;
    }
    function _encode_cs_totems_open_response(self, st) {
        var se = Sproto.SprotoCore.GetSerialize(st, 7);
        if (self.ret != undefined) {
            se.wb(self.ret, 0);
        }
        if (self.id != undefined) {
            se.wi(self.id, 1);
        }
        if (self.lv != undefined) {
            se.wi(self.lv, 2);
        }
        if (self.upNum != undefined) {
            se.wi(self.upNum, 3);
        }
        if (self.todayNum != undefined) {
            se.wi(self.todayNum, 4);
        }
        if (self.todayId != undefined) {
            se.wi(self.todayId, 5);
        }
        if (self.breach != undefined) {
            se.wi(self.breach, 6);
        }
        return Sproto.SprotoCore.CloseSerialize(se);
    }
    Sproto.ALL_DICT["cs_totems_open_response"] = { en: _encode_cs_totems_open_response, de: _decode_cs_totems_open_response };
})(Sproto || (Sproto = {}));
//# sourceMappingURL=totems_c2s.js.map