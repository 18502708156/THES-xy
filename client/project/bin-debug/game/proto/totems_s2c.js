// Generated by sprotodump. DO NOT EDIT!
var __reflect = (this && this.__reflect) || function (p, c, t) {
    p.__class__ = c, t ? t.push(c) : t = [c], p.__types__ = p.__types__ ? t.concat(p.__types__) : t;
};
var Sproto;
(function (Sproto) {
    var sc_totems_info_request = (function () {
        function sc_totems_info_request() {
        }
        return sc_totems_info_request;
    }());
    Sproto.sc_totems_info_request = sc_totems_info_request;
    __reflect(sc_totems_info_request.prototype, "Sproto.sc_totems_info_request");
    function _decode_sc_totems_info_request(d) {
        var o = new sc_totems_info_request;
        var t = -1;
        while (-1 != (t = d.rt())) {
            switch (t) {
                case 0:
                    o.data = d.roa("totems_data");
                    break;
                default:
                    d.nod();
                    break;
            }
        }
        return o;
    }
    function _encode_sc_totems_info_request(self, st) {
        var se = Sproto.SprotoCore.GetSerialize(st, 1);
        if (self.data != undefined) {
            se.woa("totems_data", self.data, 0);
        }
        return Sproto.SprotoCore.CloseSerialize(se);
    }
    Sproto.ALL_DICT["sc_totems_info_request"] = { en: _encode_sc_totems_info_request, de: _decode_sc_totems_info_request };
    var totems_data = (function () {
        function totems_data() {
        }
        return totems_data;
    }());
    Sproto.totems_data = totems_data;
    __reflect(totems_data.prototype, "Sproto.totems_data");
    function _decode_totems_data(d) {
        var o = new totems_data;
        var t = -1;
        while (-1 != (t = d.rt())) {
            switch (t) {
                case 0:
                    o.id = d.ri();
                    break;
                case 1:
                    o.lv = d.ri();
                    break;
                case 2:
                    o.upNum = d.ri();
                    break;
                case 3:
                    o.todayNum = d.ri();
                    break;
                case 4:
                    o.todayId = d.ri();
                    break;
                case 5:
                    o.breach = d.ri();
                    break;
                default:
                    d.nod();
                    break;
            }
        }
        return o;
    }
    function _encode_totems_data(self, st) {
        var se = Sproto.SprotoCore.GetSerialize(st, 6);
        if (self.id != undefined) {
            se.wi(self.id, 0);
        }
        if (self.lv != undefined) {
            se.wi(self.lv, 1);
        }
        if (self.upNum != undefined) {
            se.wi(self.upNum, 2);
        }
        if (self.todayNum != undefined) {
            se.wi(self.todayNum, 3);
        }
        if (self.todayId != undefined) {
            se.wi(self.todayId, 4);
        }
        if (self.breach != undefined) {
            se.wi(self.breach, 5);
        }
        return Sproto.SprotoCore.CloseSerialize(se);
    }
    Sproto.ALL_DICT["totems_data"] = { en: _encode_totems_data, de: _decode_totems_data };
})(Sproto || (Sproto = {}));
//# sourceMappingURL=totems_s2c.js.map