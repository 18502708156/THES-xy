// Generated by sprotodump. DO NOT EDIT!
var __reflect = (this && this.__reflect) || function (p, c, t) {
    p.__class__ = c, t ? t.push(c) : t = [c], p.__types__ = p.__types__ ? t.concat(p.__types__) : t;
};
var Sproto;
(function (Sproto) {
    var activity_base_config = (function () {
        function activity_base_config() {
        }
        return activity_base_config;
    }());
    Sproto.activity_base_config = activity_base_config;
    __reflect(activity_base_config.prototype, "Sproto.activity_base_config");
    function _decode_activity_base_config(d) {
        var o = new activity_base_config;
        var t = -1;
        while (-1 != (t = d.rt())) {
            switch (t) {
                case 0:
                    o.Id = d.ri();
                    break;
                case 1:
                    o.timeType = d.ri();
                    break;
                case 2:
                    o.startTime = d.rs();
                    break;
                case 3:
                    o.endTime = d.rs();
                    break;
                case 4:
                    o.closetime = d.ri();
                    break;
                case 5:
                    o.activityType = d.ri();
                    break;
                case 6:
                    o.openLV = d.ri();
                    break;
                case 7:
                    o.tabicon = d.rs();
                    break;
                case 8:
                    o.desc = d.rs();
                    break;
                case 9:
                    o.openType = d.ri();
                    break;
                case 10:
                    o.source1 = d.rs();
                    break;
                case 11:
                    o.source2 = d.rs();
                    break;
                case 12:
                    o.notice = d.rs();
                    break;
                default:
                    d.nod();
                    break;
            }
        }
        return o;
    }
    function _encode_activity_base_config(self, st) {
        var se = Sproto.SprotoCore.GetSerialize(st, 13);
        if (self.Id != undefined) {
            se.wi(self.Id, 0);
        }
        if (self.timeType != undefined) {
            se.wi(self.timeType, 1);
        }
        if (self.startTime != undefined) {
            se.ws(self.startTime, 2);
        }
        if (self.endTime != undefined) {
            se.ws(self.endTime, 3);
        }
        if (self.closetime != undefined) {
            se.wi(self.closetime, 4);
        }
        if (self.activityType != undefined) {
            se.wi(self.activityType, 5);
        }
        if (self.openLV != undefined) {
            se.wi(self.openLV, 6);
        }
        if (self.tabicon != undefined) {
            se.ws(self.tabicon, 7);
        }
        if (self.desc != undefined) {
            se.ws(self.desc, 8);
        }
        if (self.openType != undefined) {
            se.wi(self.openType, 9);
        }
        if (self.source1 != undefined) {
            se.ws(self.source1, 10);
        }
        if (self.source2 != undefined) {
            se.ws(self.source2, 11);
        }
        if (self.notice != undefined) {
            se.ws(self.notice, 12);
        }
        return Sproto.SprotoCore.CloseSerialize(se);
    }
    Sproto.ALL_DICT["activity_base_config"] = { en: _encode_activity_base_config, de: _decode_activity_base_config };
    var activity_base_type = (function () {
        function activity_base_type() {
        }
        return activity_base_type;
    }());
    Sproto.activity_base_type = activity_base_type;
    __reflect(activity_base_type.prototype, "Sproto.activity_base_type");
    function _decode_activity_base_type(d) {
        var o = new activity_base_type;
        var t = -1;
        while (-1 != (t = d.rt())) {
            switch (t) {
                case 0:
                    o.id = d.ri();
                    break;
                case 1:
                    o.startTime = d.ri();
                    break;
                case 2:
                    o.endTime = d.ri();
                    break;
                case 3:
                    o.type = d.ri();
                    break;
                case 4:
                    o.openState = d.ri();
                    break;
                default:
                    d.nod();
                    break;
            }
        }
        return o;
    }
    function _encode_activity_base_type(self, st) {
        var se = Sproto.SprotoCore.GetSerialize(st, 5);
        if (self.id != undefined) {
            se.wi(self.id, 0);
        }
        if (self.startTime != undefined) {
            se.wi(self.startTime, 1);
        }
        if (self.endTime != undefined) {
            se.wi(self.endTime, 2);
        }
        if (self.type != undefined) {
            se.wi(self.type, 3);
        }
        if (self.openState != undefined) {
            se.wi(self.openState, 4);
        }
        return Sproto.SprotoCore.CloseSerialize(se);
    }
    Sproto.ALL_DICT["activity_base_type"] = { en: _encode_activity_base_type, de: _decode_activity_base_type };
    var activity_dabiao_data = (function () {
        function activity_dabiao_data() {
        }
        return activity_dabiao_data;
    }());
    Sproto.activity_dabiao_data = activity_dabiao_data;
    __reflect(activity_dabiao_data.prototype, "Sproto.activity_dabiao_data");
    function _decode_activity_dabiao_data(d) {
        var o = new activity_dabiao_data;
        var t = -1;
        while (-1 != (t = d.rt())) {
            switch (t) {
                case 0:
                    o.name = d.rs();
                    break;
                case 1:
                    o.value = d.ri();
                    break;
                default:
                    d.nod();
                    break;
            }
        }
        return o;
    }
    function _encode_activity_dabiao_data(self, st) {
        var se = Sproto.SprotoCore.GetSerialize(st, 2);
        if (self.name != undefined) {
            se.ws(self.name, 0);
        }
        if (self.value != undefined) {
            se.wi(self.value, 1);
        }
        return Sproto.SprotoCore.CloseSerialize(se);
    }
    Sproto.ALL_DICT["activity_dabiao_data"] = { en: _encode_activity_dabiao_data, de: _decode_activity_dabiao_data };
    var activity_data_collection = (function () {
        function activity_data_collection() {
        }
        return activity_data_collection;
    }());
    Sproto.activity_data_collection = activity_data_collection;
    __reflect(activity_data_collection.prototype, "Sproto.activity_data_collection");
    function _decode_activity_data_collection(d) {
        var o = new activity_data_collection;
        var t = -1;
        while (-1 != (t = d.rt())) {
            switch (t) {
                case 0:
                    o.type01 = d.ro("activity_type01");
                    break;
                case 1:
                    o.type02 = d.ro("activity_type02");
                    break;
                case 2:
                    o.type03 = d.ro("activity_type03");
                    break;
                case 3:
                    o.type04 = d.ro("activity_type04");
                    break;
                case 4:
                    o.type05 = d.ro("activity_type05");
                    break;
                case 5:
                    o.type06 = d.ro("activity_type06");
                    break;
                case 6:
                    o.type07 = d.ro("activity_type07");
                    break;
                case 7:
                    o.type08 = d.ro("activity_type08");
                    break;
                case 8:
                    o.type09 = d.ro("activity_type09");
                    break;
                case 9:
                    o.type10 = d.ro("activity_type10");
                    break;
                case 10:
                    o.type11 = d.ro("activity_type11");
                    break;
                case 11:
                    o.type12 = d.ro("activity_type12");
                    break;
                case 12:
                    o.type13 = d.ro("activity_type13");
                    break;
                case 13:
                    o.type14 = d.ro("activity_type14");
                    break;
                case 14:
                    o.type15 = d.ro("activity_type15");
                    break;
                case 15:
                    o.type16 = d.ro("activity_type16");
                    break;
                case 16:
                    o.type17 = d.ro("activity_type17");
                    break;
                case 17:
                    o.type18 = d.ro("activity_type18");
                    break;
                case 19:
                    o.type19 = d.ro("activity_type19");
                    break;
                case 20:
                    o.type20 = d.ro("activity_type20");
                    break;
                case 21:
                    o.type21 = d.ro("activity_type21");
                    break;
                case 22:
                    o.type22 = d.ro("activity_type22");
                    break;
                case 23:
                    o.type23 = d.ro("activity_type23");
                    break;
                case 24:
                    o.type24 = d.ro("activity_type24");
                    break;
                case 25:
                    o.type25 = d.ro("activity_type25");
                    break;
                case 26:
                    o.type26 = d.ro("activity_type26");
                    break;
                case 27:
                    o.type27 = d.ro("activity_type27");
                    break;
                case 28:
                    o.basecfg = d.ro("activity_base_config");
                    break;
                case 29:
                    o.btncfg = d.rs();
                    break;
                case 30:
                    o.config = d.rs();
                    break;
                case 31:
                    o.type28 = d.ro("activity_type28");
                    break;
                default:
                    d.nod();
                    break;
            }
        }
        return o;
    }
    function _encode_activity_data_collection(self, st) {
        var se = Sproto.SprotoCore.GetSerialize(st, 32);
        if (self.type01 != undefined) {
            se.wo("activity_type01", self.type01, 0);
        }
        if (self.type02 != undefined) {
            se.wo("activity_type02", self.type02, 1);
        }
        if (self.type03 != undefined) {
            se.wo("activity_type03", self.type03, 2);
        }
        if (self.type04 != undefined) {
            se.wo("activity_type04", self.type04, 3);
        }
        if (self.type05 != undefined) {
            se.wo("activity_type05", self.type05, 4);
        }
        if (self.type06 != undefined) {
            se.wo("activity_type06", self.type06, 5);
        }
        if (self.type07 != undefined) {
            se.wo("activity_type07", self.type07, 6);
        }
        if (self.type08 != undefined) {
            se.wo("activity_type08", self.type08, 7);
        }
        if (self.type09 != undefined) {
            se.wo("activity_type09", self.type09, 8);
        }
        if (self.type10 != undefined) {
            se.wo("activity_type10", self.type10, 9);
        }
        if (self.type11 != undefined) {
            se.wo("activity_type11", self.type11, 10);
        }
        if (self.type12 != undefined) {
            se.wo("activity_type12", self.type12, 11);
        }
        if (self.type13 != undefined) {
            se.wo("activity_type13", self.type13, 12);
        }
        if (self.type14 != undefined) {
            se.wo("activity_type14", self.type14, 13);
        }
        if (self.type15 != undefined) {
            se.wo("activity_type15", self.type15, 14);
        }
        if (self.type16 != undefined) {
            se.wo("activity_type16", self.type16, 15);
        }
        if (self.type17 != undefined) {
            se.wo("activity_type17", self.type17, 16);
        }
        if (self.type18 != undefined) {
            se.wo("activity_type18", self.type18, 17);
        }
        if (self.type19 != undefined) {
            se.wo("activity_type19", self.type19, 19);
        }
        if (self.type20 != undefined) {
            se.wo("activity_type20", self.type20, 20);
        }
        if (self.type21 != undefined) {
            se.wo("activity_type21", self.type21, 21);
        }
        if (self.type22 != undefined) {
            se.wo("activity_type22", self.type22, 22);
        }
        if (self.type23 != undefined) {
            se.wo("activity_type23", self.type23, 23);
        }
        if (self.type24 != undefined) {
            se.wo("activity_type24", self.type24, 24);
        }
        if (self.type25 != undefined) {
            se.wo("activity_type25", self.type25, 25);
        }
        if (self.type26 != undefined) {
            se.wo("activity_type26", self.type26, 26);
        }
        if (self.type27 != undefined) {
            se.wo("activity_type27", self.type27, 27);
        }
        if (self.basecfg != undefined) {
            se.wo("activity_base_config", self.basecfg, 28);
        }
        if (self.btncfg != undefined) {
            se.ws(self.btncfg, 29);
        }
        if (self.config != undefined) {
            se.ws(self.config, 30);
        }
        if (self.type28 != undefined) {
            se.wo("activity_type28", self.type28, 31);
        }
        return Sproto.SprotoCore.CloseSerialize(se);
    }
    Sproto.ALL_DICT["activity_data_collection"] = { en: _encode_activity_data_collection, de: _decode_activity_data_collection };
    var activity_rebate = (function () {
        function activity_rebate() {
        }
        return activity_rebate;
    }());
    Sproto.activity_rebate = activity_rebate;
    __reflect(activity_rebate.prototype, "Sproto.activity_rebate");
    function _decode_activity_rebate(d) {
        var o = new activity_rebate;
        var t = -1;
        while (-1 != (t = d.rt())) {
            switch (t) {
                case 0:
                    o.no = d.ri();
                    break;
                case 1:
                    o.num = d.ri();
                    break;
                default:
                    d.nod();
                    break;
            }
        }
        return o;
    }
    function _encode_activity_rebate(self, st) {
        var se = Sproto.SprotoCore.GetSerialize(st, 2);
        if (self.no != undefined) {
            se.wi(self.no, 0);
        }
        if (self.num != undefined) {
            se.wi(self.num, 1);
        }
        return Sproto.SprotoCore.CloseSerialize(se);
    }
    Sproto.ALL_DICT["activity_rebate"] = { en: _encode_activity_rebate, de: _decode_activity_rebate };
    var activity_type01 = (function () {
        function activity_type01() {
        }
        return activity_type01;
    }());
    Sproto.activity_type01 = activity_type01;
    __reflect(activity_type01.prototype, "Sproto.activity_type01");
    function _decode_activity_type01(d) {
        var o = new activity_type01;
        var t = -1;
        while (-1 != (t = d.rt())) {
            switch (t) {
                case 0:
                    o.baseData = d.ro("activity_base_type");
                    break;
                case 1:
                    o.record = d.ria();
                    break;
                default:
                    d.nod();
                    break;
            }
        }
        return o;
    }
    function _encode_activity_type01(self, st) {
        var se = Sproto.SprotoCore.GetSerialize(st, 2);
        if (self.baseData != undefined) {
            se.wo("activity_base_type", self.baseData, 0);
        }
        if (self.record != undefined) {
            se.wia(self.record, 1);
        }
        return Sproto.SprotoCore.CloseSerialize(se);
    }
    Sproto.ALL_DICT["activity_type01"] = { en: _encode_activity_type01, de: _decode_activity_type01 };
    var activity_type02 = (function () {
        function activity_type02() {
        }
        return activity_type02;
    }());
    Sproto.activity_type02 = activity_type02;
    __reflect(activity_type02.prototype, "Sproto.activity_type02");
    function _decode_activity_type02(d) {
        var o = new activity_type02;
        var t = -1;
        while (-1 != (t = d.rt())) {
            switch (t) {
                case 0:
                    o.baseData = d.ro("activity_base_type");
                    break;
                case 1:
                    o.buyData = d.ria();
                    break;
                default:
                    d.nod();
                    break;
            }
        }
        return o;
    }
    function _encode_activity_type02(self, st) {
        var se = Sproto.SprotoCore.GetSerialize(st, 2);
        if (self.baseData != undefined) {
            se.wo("activity_base_type", self.baseData, 0);
        }
        if (self.buyData != undefined) {
            se.wia(self.buyData, 1);
        }
        return Sproto.SprotoCore.CloseSerialize(se);
    }
    Sproto.ALL_DICT["activity_type02"] = { en: _encode_activity_type02, de: _decode_activity_type02 };
    var activity_type03 = (function () {
        function activity_type03() {
        }
        return activity_type03;
    }());
    Sproto.activity_type03 = activity_type03;
    __reflect(activity_type03.prototype, "Sproto.activity_type03");
    function _decode_activity_type03(d) {
        var o = new activity_type03;
        var t = -1;
        while (-1 != (t = d.rt())) {
            switch (t) {
                case 0:
                    o.baseData = d.ro("activity_base_type");
                    break;
                case 1:
                    o.record = d.ria();
                    break;
                case 2:
                    o.day = d.ri();
                    break;
                case 4:
                    o.rechargeCount = d.ri();
                    break;
                default:
                    d.nod();
                    break;
            }
        }
        return o;
    }
    function _encode_activity_type03(self, st) {
        var se = Sproto.SprotoCore.GetSerialize(st, 5);
        if (self.baseData != undefined) {
            se.wo("activity_base_type", self.baseData, 0);
        }
        if (self.record != undefined) {
            se.wia(self.record, 1);
        }
        if (self.day != undefined) {
            se.wi(self.day, 2);
        }
        if (self.rechargeCount != undefined) {
            se.wi(self.rechargeCount, 4);
        }
        return Sproto.SprotoCore.CloseSerialize(se);
    }
    Sproto.ALL_DICT["activity_type03"] = { en: _encode_activity_type03, de: _decode_activity_type03 };
    var activity_type04 = (function () {
        function activity_type04() {
        }
        return activity_type04;
    }());
    Sproto.activity_type04 = activity_type04;
    __reflect(activity_type04.prototype, "Sproto.activity_type04");
    function _decode_activity_type04(d) {
        var o = new activity_type04;
        var t = -1;
        while (-1 != (t = d.rt())) {
            switch (t) {
                case 0:
                    o.baseData = d.ro("activity_base_type");
                    break;
                default:
                    d.nod();
                    break;
            }
        }
        return o;
    }
    function _encode_activity_type04(self, st) {
        var se = Sproto.SprotoCore.GetSerialize(st, 1);
        if (self.baseData != undefined) {
            se.wo("activity_base_type", self.baseData, 0);
        }
        return Sproto.SprotoCore.CloseSerialize(se);
    }
    Sproto.ALL_DICT["activity_type04"] = { en: _encode_activity_type04, de: _decode_activity_type04 };
    var activity_type05 = (function () {
        function activity_type05() {
        }
        return activity_type05;
    }());
    Sproto.activity_type05 = activity_type05;
    __reflect(activity_type05.prototype, "Sproto.activity_type05");
    function _decode_activity_type05(d) {
        var o = new activity_type05;
        var t = -1;
        while (-1 != (t = d.rt())) {
            switch (t) {
                case 0:
                    o.baseData = d.ro("activity_base_type");
                    break;
                case 1:
                    o.record = d.ri();
                    break;
                case 2:
                    o.logTime = d.ri();
                    break;
                default:
                    d.nod();
                    break;
            }
        }
        return o;
    }
    function _encode_activity_type05(self, st) {
        var se = Sproto.SprotoCore.GetSerialize(st, 3);
        if (self.baseData != undefined) {
            se.wo("activity_base_type", self.baseData, 0);
        }
        if (self.record != undefined) {
            se.wi(self.record, 1);
        }
        if (self.logTime != undefined) {
            se.wi(self.logTime, 2);
        }
        return Sproto.SprotoCore.CloseSerialize(se);
    }
    Sproto.ALL_DICT["activity_type05"] = { en: _encode_activity_type05, de: _decode_activity_type05 };
    var activity_type06 = (function () {
        function activity_type06() {
        }
        return activity_type06;
    }());
    Sproto.activity_type06 = activity_type06;
    __reflect(activity_type06.prototype, "Sproto.activity_type06");
    function _decode_activity_type06(d) {
        var o = new activity_type06;
        var t = -1;
        while (-1 != (t = d.rt())) {
            switch (t) {
                case 0:
                    o.baseData = d.ro("activity_base_type");
                    break;
                case 1:
                    o.reachindex = d.ri();
                    break;
                case 2:
                    o.value = d.ri();
                    break;
                case 3:
                    o.drawrecord = d.ri();
                    break;
                case 4:
                    o.drawtime = d.ri();
                    break;
                default:
                    d.nod();
                    break;
            }
        }
        return o;
    }
    function _encode_activity_type06(self, st) {
        var se = Sproto.SprotoCore.GetSerialize(st, 5);
        if (self.baseData != undefined) {
            se.wo("activity_base_type", self.baseData, 0);
        }
        if (self.reachindex != undefined) {
            se.wi(self.reachindex, 1);
        }
        if (self.value != undefined) {
            se.wi(self.value, 2);
        }
        if (self.drawrecord != undefined) {
            se.wi(self.drawrecord, 3);
        }
        if (self.drawtime != undefined) {
            se.wi(self.drawtime, 4);
        }
        return Sproto.SprotoCore.CloseSerialize(se);
    }
    Sproto.ALL_DICT["activity_type06"] = { en: _encode_activity_type06, de: _decode_activity_type06 };
    var activity_type07 = (function () {
        function activity_type07() {
        }
        return activity_type07;
    }());
    Sproto.activity_type07 = activity_type07;
    __reflect(activity_type07.prototype, "Sproto.activity_type07");
    function _decode_activity_type07(d) {
        var o = new activity_type07;
        var t = -1;
        while (-1 != (t = d.rt())) {
            switch (t) {
                case 0:
                    o.baseData = d.ro("activity_base_type");
                    break;
                case 1:
                    o.record = d.ria();
                    break;
                case 2:
                    o.recharge = d.ri();
                    break;
                default:
                    d.nod();
                    break;
            }
        }
        return o;
    }
    function _encode_activity_type07(self, st) {
        var se = Sproto.SprotoCore.GetSerialize(st, 3);
        if (self.baseData != undefined) {
            se.wo("activity_base_type", self.baseData, 0);
        }
        if (self.record != undefined) {
            se.wia(self.record, 1);
        }
        if (self.recharge != undefined) {
            se.wi(self.recharge, 2);
        }
        return Sproto.SprotoCore.CloseSerialize(se);
    }
    Sproto.ALL_DICT["activity_type07"] = { en: _encode_activity_type07, de: _decode_activity_type07 };
    var activity_type08 = (function () {
        function activity_type08() {
        }
        return activity_type08;
    }());
    Sproto.activity_type08 = activity_type08;
    __reflect(activity_type08.prototype, "Sproto.activity_type08");
    function _decode_activity_type08(d) {
        var o = new activity_type08;
        var t = -1;
        while (-1 != (t = d.rt())) {
            switch (t) {
                case 0:
                    o.baseData = d.ro("activity_base_type");
                    break;
                case 1:
                    o.status = d.ri();
                    break;
                case 2:
                    o.day = d.ri();
                    break;
                default:
                    d.nod();
                    break;
            }
        }
        return o;
    }
    function _encode_activity_type08(self, st) {
        var se = Sproto.SprotoCore.GetSerialize(st, 3);
        if (self.baseData != undefined) {
            se.wo("activity_base_type", self.baseData, 0);
        }
        if (self.status != undefined) {
            se.wi(self.status, 1);
        }
        if (self.day != undefined) {
            se.wi(self.day, 2);
        }
        return Sproto.SprotoCore.CloseSerialize(se);
    }
    Sproto.ALL_DICT["activity_type08"] = { en: _encode_activity_type08, de: _decode_activity_type08 };
    var activity_type09 = (function () {
        function activity_type09() {
        }
        return activity_type09;
    }());
    Sproto.activity_type09 = activity_type09;
    __reflect(activity_type09.prototype, "Sproto.activity_type09");
    function _decode_activity_type09(d) {
        var o = new activity_type09;
        var t = -1;
        while (-1 != (t = d.rt())) {
            switch (t) {
                case 0:
                    o.baseData = d.ro("activity_base_type");
                    break;
                case 1:
                    o.buyData = d.ria();
                    break;
                case 2:
                    o.day = d.ri();
                    break;
                default:
                    d.nod();
                    break;
            }
        }
        return o;
    }
    function _encode_activity_type09(self, st) {
        var se = Sproto.SprotoCore.GetSerialize(st, 3);
        if (self.baseData != undefined) {
            se.wo("activity_base_type", self.baseData, 0);
        }
        if (self.buyData != undefined) {
            se.wia(self.buyData, 1);
        }
        if (self.day != undefined) {
            se.wi(self.day, 2);
        }
        return Sproto.SprotoCore.CloseSerialize(se);
    }
    Sproto.ALL_DICT["activity_type09"] = { en: _encode_activity_type09, de: _decode_activity_type09 };
    var activity_type10 = (function () {
        function activity_type10() {
        }
        return activity_type10;
    }());
    Sproto.activity_type10 = activity_type10;
    __reflect(activity_type10.prototype, "Sproto.activity_type10");
    function _decode_activity_type10(d) {
        var o = new activity_type10;
        var t = -1;
        while (-1 != (t = d.rt())) {
            switch (t) {
                case 0:
                    o.baseData = d.ro("activity_base_type");
                    break;
                default:
                    d.nod();
                    break;
            }
        }
        return o;
    }
    function _encode_activity_type10(self, st) {
        var se = Sproto.SprotoCore.GetSerialize(st, 1);
        if (self.baseData != undefined) {
            se.wo("activity_base_type", self.baseData, 0);
        }
        return Sproto.SprotoCore.CloseSerialize(se);
    }
    Sproto.ALL_DICT["activity_type10"] = { en: _encode_activity_type10, de: _decode_activity_type10 };
    var activity_type11 = (function () {
        function activity_type11() {
        }
        return activity_type11;
    }());
    Sproto.activity_type11 = activity_type11;
    __reflect(activity_type11.prototype, "Sproto.activity_type11");
    function _decode_activity_type11(d) {
        var o = new activity_type11;
        var t = -1;
        while (-1 != (t = d.rt())) {
            switch (t) {
                case 0:
                    o.baseData = d.ro("activity_base_type");
                    break;
                case 1:
                    o.reachBin = d.ri();
                    break;
                case 2:
                    o.drawBin = d.ri();
                    break;
                default:
                    d.nod();
                    break;
            }
        }
        return o;
    }
    function _encode_activity_type11(self, st) {
        var se = Sproto.SprotoCore.GetSerialize(st, 3);
        if (self.baseData != undefined) {
            se.wo("activity_base_type", self.baseData, 0);
        }
        if (self.reachBin != undefined) {
            se.wi(self.reachBin, 1);
        }
        if (self.drawBin != undefined) {
            se.wi(self.drawBin, 2);
        }
        return Sproto.SprotoCore.CloseSerialize(se);
    }
    Sproto.ALL_DICT["activity_type11"] = { en: _encode_activity_type11, de: _decode_activity_type11 };
    var activity_type12 = (function () {
        function activity_type12() {
        }
        return activity_type12;
    }());
    Sproto.activity_type12 = activity_type12;
    __reflect(activity_type12.prototype, "Sproto.activity_type12");
    function _decode_activity_type12(d) {
        var o = new activity_type12;
        var t = -1;
        while (-1 != (t = d.rt())) {
            switch (t) {
                case 0:
                    o.baseData = d.ro("activity_base_type");
                    break;
                case 1:
                    o.recharge = d.ri();
                    break;
                case 2:
                    o.drawBin = d.ri();
                    break;
                default:
                    d.nod();
                    break;
            }
        }
        return o;
    }
    function _encode_activity_type12(self, st) {
        var se = Sproto.SprotoCore.GetSerialize(st, 3);
        if (self.baseData != undefined) {
            se.wo("activity_base_type", self.baseData, 0);
        }
        if (self.recharge != undefined) {
            se.wi(self.recharge, 1);
        }
        if (self.drawBin != undefined) {
            se.wi(self.drawBin, 2);
        }
        return Sproto.SprotoCore.CloseSerialize(se);
    }
    Sproto.ALL_DICT["activity_type12"] = { en: _encode_activity_type12, de: _decode_activity_type12 };
    var activity_type13 = (function () {
        function activity_type13() {
        }
        return activity_type13;
    }());
    Sproto.activity_type13 = activity_type13;
    __reflect(activity_type13.prototype, "Sproto.activity_type13");
    function _decode_activity_type13(d) {
        var o = new activity_type13;
        var t = -1;
        while (-1 != (t = d.rt())) {
            switch (t) {
                case 0:
                    o.baseData = d.ro("activity_base_type");
                    break;
                case 1:
                    o.recharge = d.ri();
                    break;
                case 2:
                    o.drawBin = d.ri();
                    break;
                default:
                    d.nod();
                    break;
            }
        }
        return o;
    }
    function _encode_activity_type13(self, st) {
        var se = Sproto.SprotoCore.GetSerialize(st, 3);
        if (self.baseData != undefined) {
            se.wo("activity_base_type", self.baseData, 0);
        }
        if (self.recharge != undefined) {
            se.wi(self.recharge, 1);
        }
        if (self.drawBin != undefined) {
            se.wi(self.drawBin, 2);
        }
        return Sproto.SprotoCore.CloseSerialize(se);
    }
    Sproto.ALL_DICT["activity_type13"] = { en: _encode_activity_type13, de: _decode_activity_type13 };
    var activity_type14 = (function () {
        function activity_type14() {
        }
        return activity_type14;
    }());
    Sproto.activity_type14 = activity_type14;
    __reflect(activity_type14.prototype, "Sproto.activity_type14");
    function _decode_activity_type14(d) {
        var o = new activity_type14;
        var t = -1;
        while (-1 != (t = d.rt())) {
            switch (t) {
                case 0:
                    o.baseData = d.ro("activity_base_type");
                    break;
                default:
                    d.nod();
                    break;
            }
        }
        return o;
    }
    function _encode_activity_type14(self, st) {
        var se = Sproto.SprotoCore.GetSerialize(st, 1);
        if (self.baseData != undefined) {
            se.wo("activity_base_type", self.baseData, 0);
        }
        return Sproto.SprotoCore.CloseSerialize(se);
    }
    Sproto.ALL_DICT["activity_type14"] = { en: _encode_activity_type14, de: _decode_activity_type14 };
    var activity_type15 = (function () {
        function activity_type15() {
        }
        return activity_type15;
    }());
    Sproto.activity_type15 = activity_type15;
    __reflect(activity_type15.prototype, "Sproto.activity_type15");
    function _decode_activity_type15(d) {
        var o = new activity_type15;
        var t = -1;
        while (-1 != (t = d.rt())) {
            switch (t) {
                case 0:
                    o.baseData = d.ro("activity_base_type");
                    break;
                case 1:
                    o.datas = d.roa("activity_type15_item");
                    break;
                default:
                    d.nod();
                    break;
            }
        }
        return o;
    }
    function _encode_activity_type15(self, st) {
        var se = Sproto.SprotoCore.GetSerialize(st, 2);
        if (self.baseData != undefined) {
            se.wo("activity_base_type", self.baseData, 0);
        }
        if (self.datas != undefined) {
            se.woa("activity_type15_item", self.datas, 1);
        }
        return Sproto.SprotoCore.CloseSerialize(se);
    }
    Sproto.ALL_DICT["activity_type15"] = { en: _encode_activity_type15, de: _decode_activity_type15 };
    var activity_type15_item = (function () {
        function activity_type15_item() {
        }
        return activity_type15_item;
    }());
    Sproto.activity_type15_item = activity_type15_item;
    __reflect(activity_type15_item.prototype, "Sproto.activity_type15_item");
    function _decode_activity_type15_item(d) {
        var o = new activity_type15_item;
        var t = -1;
        while (-1 != (t = d.rt())) {
            switch (t) {
                case 0:
                    o.times = d.ri();
                    break;
                case 1:
                    o.rewardTimes = d.ri();
                    break;
                default:
                    d.nod();
                    break;
            }
        }
        return o;
    }
    function _encode_activity_type15_item(self, st) {
        var se = Sproto.SprotoCore.GetSerialize(st, 2);
        if (self.times != undefined) {
            se.wi(self.times, 0);
        }
        if (self.rewardTimes != undefined) {
            se.wi(self.rewardTimes, 1);
        }
        return Sproto.SprotoCore.CloseSerialize(se);
    }
    Sproto.ALL_DICT["activity_type15_item"] = { en: _encode_activity_type15_item, de: _decode_activity_type15_item };
    var activity_type16 = (function () {
        function activity_type16() {
        }
        return activity_type16;
    }());
    Sproto.activity_type16 = activity_type16;
    __reflect(activity_type16.prototype, "Sproto.activity_type16");
    function _decode_activity_type16(d) {
        var o = new activity_type16;
        var t = -1;
        while (-1 != (t = d.rt())) {
            switch (t) {
                case 0:
                    o.baseData = d.ro("activity_base_type");
                    break;
                case 1:
                    o.record = d.ri();
                    break;
                case 2:
                    o.logrecord = d.ri();
                    break;
                default:
                    d.nod();
                    break;
            }
        }
        return o;
    }
    function _encode_activity_type16(self, st) {
        var se = Sproto.SprotoCore.GetSerialize(st, 3);
        if (self.baseData != undefined) {
            se.wo("activity_base_type", self.baseData, 0);
        }
        if (self.record != undefined) {
            se.wi(self.record, 1);
        }
        if (self.logrecord != undefined) {
            se.wi(self.logrecord, 2);
        }
        return Sproto.SprotoCore.CloseSerialize(se);
    }
    Sproto.ALL_DICT["activity_type16"] = { en: _encode_activity_type16, de: _decode_activity_type16 };
    var activity_type17 = (function () {
        function activity_type17() {
        }
        return activity_type17;
    }());
    Sproto.activity_type17 = activity_type17;
    __reflect(activity_type17.prototype, "Sproto.activity_type17");
    function _decode_activity_type17(d) {
        var o = new activity_type17;
        var t = -1;
        while (-1 != (t = d.rt())) {
            switch (t) {
                case 0:
                    o.baseData = d.ro("activity_base_type");
                    break;
                case 1:
                    o.record = d.ria();
                    break;
                case 2:
                    o.target = d.ria();
                    break;
                default:
                    d.nod();
                    break;
            }
        }
        return o;
    }
    function _encode_activity_type17(self, st) {
        var se = Sproto.SprotoCore.GetSerialize(st, 3);
        if (self.baseData != undefined) {
            se.wo("activity_base_type", self.baseData, 0);
        }
        if (self.record != undefined) {
            se.wia(self.record, 1);
        }
        if (self.target != undefined) {
            se.wia(self.target, 2);
        }
        return Sproto.SprotoCore.CloseSerialize(se);
    }
    Sproto.ALL_DICT["activity_type17"] = { en: _encode_activity_type17, de: _decode_activity_type17 };
    var activity_type18 = (function () {
        function activity_type18() {
        }
        return activity_type18;
    }());
    Sproto.activity_type18 = activity_type18;
    __reflect(activity_type18.prototype, "Sproto.activity_type18");
    function _decode_activity_type18(d) {
        var o = new activity_type18;
        var t = -1;
        while (-1 != (t = d.rt())) {
            switch (t) {
                case 0:
                    o.baseData = d.ro("activity_base_type");
                    break;
                case 1:
                    o.record = d.ria();
                    break;
                case 2:
                    o.dayrecharge = d.ri();
                    break;
                default:
                    d.nod();
                    break;
            }
        }
        return o;
    }
    function _encode_activity_type18(self, st) {
        var se = Sproto.SprotoCore.GetSerialize(st, 3);
        if (self.baseData != undefined) {
            se.wo("activity_base_type", self.baseData, 0);
        }
        if (self.record != undefined) {
            se.wia(self.record, 1);
        }
        if (self.dayrecharge != undefined) {
            se.wi(self.dayrecharge, 2);
        }
        return Sproto.SprotoCore.CloseSerialize(se);
    }
    Sproto.ALL_DICT["activity_type18"] = { en: _encode_activity_type18, de: _decode_activity_type18 };
    var activity_type19 = (function () {
        function activity_type19() {
        }
        return activity_type19;
    }());
    Sproto.activity_type19 = activity_type19;
    __reflect(activity_type19.prototype, "Sproto.activity_type19");
    function _decode_activity_type19(d) {
        var o = new activity_type19;
        var t = -1;
        while (-1 != (t = d.rt())) {
            switch (t) {
                case 0:
                    o.baseData = d.ro("activity_base_type");
                    break;
                case 1:
                    o.runday = d.ri();
                    break;
                case 2:
                    o.reachday = d.ri();
                    break;
                case 3:
                    o.record = d.ria();
                    break;
                default:
                    d.nod();
                    break;
            }
        }
        return o;
    }
    function _encode_activity_type19(self, st) {
        var se = Sproto.SprotoCore.GetSerialize(st, 4);
        if (self.baseData != undefined) {
            se.wo("activity_base_type", self.baseData, 0);
        }
        if (self.runday != undefined) {
            se.wi(self.runday, 1);
        }
        if (self.reachday != undefined) {
            se.wi(self.reachday, 2);
        }
        if (self.record != undefined) {
            se.wia(self.record, 3);
        }
        return Sproto.SprotoCore.CloseSerialize(se);
    }
    Sproto.ALL_DICT["activity_type19"] = { en: _encode_activity_type19, de: _decode_activity_type19 };
    var activity_type20 = (function () {
        function activity_type20() {
        }
        return activity_type20;
    }());
    Sproto.activity_type20 = activity_type20;
    __reflect(activity_type20.prototype, "Sproto.activity_type20");
    function _decode_activity_type20(d) {
        var o = new activity_type20;
        var t = -1;
        while (-1 != (t = d.rt())) {
            switch (t) {
                case 0:
                    o.baseData = d.ro("activity_base_type");
                    break;
                case 1:
                    o.record = d.ria();
                    break;
                default:
                    d.nod();
                    break;
            }
        }
        return o;
    }
    function _encode_activity_type20(self, st) {
        var se = Sproto.SprotoCore.GetSerialize(st, 2);
        if (self.baseData != undefined) {
            se.wo("activity_base_type", self.baseData, 0);
        }
        if (self.record != undefined) {
            se.wia(self.record, 1);
        }
        return Sproto.SprotoCore.CloseSerialize(se);
    }
    Sproto.ALL_DICT["activity_type20"] = { en: _encode_activity_type20, de: _decode_activity_type20 };
    var activity_type21 = (function () {
        function activity_type21() {
        }
        return activity_type21;
    }());
    Sproto.activity_type21 = activity_type21;
    __reflect(activity_type21.prototype, "Sproto.activity_type21");
    function _decode_activity_type21(d) {
        var o = new activity_type21;
        var t = -1;
        while (-1 != (t = d.rt())) {
            switch (t) {
                case 0:
                    o.baseData = d.ro("activity_base_type");
                    break;
                case 1:
                    o.record = d.ria();
                    break;
                case 2:
                    o.people = d.ri();
                    break;
                case 3:
                    o.rechargeNum = d.ri();
                    break;
                default:
                    d.nod();
                    break;
            }
        }
        return o;
    }
    function _encode_activity_type21(self, st) {
        var se = Sproto.SprotoCore.GetSerialize(st, 4);
        if (self.baseData != undefined) {
            se.wo("activity_base_type", self.baseData, 0);
        }
        if (self.record != undefined) {
            se.wia(self.record, 1);
        }
        if (self.people != undefined) {
            se.wi(self.people, 2);
        }
        if (self.rechargeNum != undefined) {
            se.wi(self.rechargeNum, 3);
        }
        return Sproto.SprotoCore.CloseSerialize(se);
    }
    Sproto.ALL_DICT["activity_type21"] = { en: _encode_activity_type21, de: _decode_activity_type21 };
    var activity_type22 = (function () {
        function activity_type22() {
        }
        return activity_type22;
    }());
    Sproto.activity_type22 = activity_type22;
    __reflect(activity_type22.prototype, "Sproto.activity_type22");
    function _decode_activity_type22(d) {
        var o = new activity_type22;
        var t = -1;
        while (-1 != (t = d.rt())) {
            switch (t) {
                case 0:
                    o.baseData = d.ro("activity_base_type");
                    break;
                case 1:
                    o.gid = d.ri();
                    break;
                case 2:
                    o.record = d.ria();
                    break;
                default:
                    d.nod();
                    break;
            }
        }
        return o;
    }
    function _encode_activity_type22(self, st) {
        var se = Sproto.SprotoCore.GetSerialize(st, 3);
        if (self.baseData != undefined) {
            se.wo("activity_base_type", self.baseData, 0);
        }
        if (self.gid != undefined) {
            se.wi(self.gid, 1);
        }
        if (self.record != undefined) {
            se.wia(self.record, 2);
        }
        return Sproto.SprotoCore.CloseSerialize(se);
    }
    Sproto.ALL_DICT["activity_type22"] = { en: _encode_activity_type22, de: _decode_activity_type22 };
    var activity_type23 = (function () {
        function activity_type23() {
        }
        return activity_type23;
    }());
    Sproto.activity_type23 = activity_type23;
    __reflect(activity_type23.prototype, "Sproto.activity_type23");
    function _decode_activity_type23(d) {
        var o = new activity_type23;
        var t = -1;
        while (-1 != (t = d.rt())) {
            switch (t) {
                case 0:
                    o.baseData = d.ro("activity_base_type");
                    break;
                case 1:
                    o.record = d.ri();
                    break;
                case 2:
                    o.runday = d.ri();
                    break;
                case 3:
                    o.rechargeNumber = d.ri();
                    break;
                default:
                    d.nod();
                    break;
            }
        }
        return o;
    }
    function _encode_activity_type23(self, st) {
        var se = Sproto.SprotoCore.GetSerialize(st, 4);
        if (self.baseData != undefined) {
            se.wo("activity_base_type", self.baseData, 0);
        }
        if (self.record != undefined) {
            se.wi(self.record, 1);
        }
        if (self.runday != undefined) {
            se.wi(self.runday, 2);
        }
        if (self.rechargeNumber != undefined) {
            se.wi(self.rechargeNumber, 3);
        }
        return Sproto.SprotoCore.CloseSerialize(se);
    }
    Sproto.ALL_DICT["activity_type23"] = { en: _encode_activity_type23, de: _decode_activity_type23 };
    var activity_type24 = (function () {
        function activity_type24() {
        }
        return activity_type24;
    }());
    Sproto.activity_type24 = activity_type24;
    __reflect(activity_type24.prototype, "Sproto.activity_type24");
    function _decode_activity_type24(d) {
        var o = new activity_type24;
        var t = -1;
        while (-1 != (t = d.rt())) {
            switch (t) {
                case 0:
                    o.baseData = d.ro("activity_base_type");
                    break;
                case 1:
                    o.status = d.ri();
                    break;
                case 2:
                    o.reward = d.ria();
                    break;
                default:
                    d.nod();
                    break;
            }
        }
        return o;
    }
    function _encode_activity_type24(self, st) {
        var se = Sproto.SprotoCore.GetSerialize(st, 3);
        if (self.baseData != undefined) {
            se.wo("activity_base_type", self.baseData, 0);
        }
        if (self.status != undefined) {
            se.wi(self.status, 1);
        }
        if (self.reward != undefined) {
            se.wia(self.reward, 2);
        }
        return Sproto.SprotoCore.CloseSerialize(se);
    }
    Sproto.ALL_DICT["activity_type24"] = { en: _encode_activity_type24, de: _decode_activity_type24 };
    var activity_type25 = (function () {
        function activity_type25() {
        }
        return activity_type25;
    }());
    Sproto.activity_type25 = activity_type25;
    __reflect(activity_type25.prototype, "Sproto.activity_type25");
    function _decode_activity_type25(d) {
        var o = new activity_type25;
        var t = -1;
        while (-1 != (t = d.rt())) {
            switch (t) {
                case 0:
                    o.baseData = d.ro("activity_base_type");
                    break;
                case 1:
                    o.RechargeNum = d.ri();
                    break;
                case 2:
                    o.reward = d.ri();
                    break;
                default:
                    d.nod();
                    break;
            }
        }
        return o;
    }
    function _encode_activity_type25(self, st) {
        var se = Sproto.SprotoCore.GetSerialize(st, 3);
        if (self.baseData != undefined) {
            se.wo("activity_base_type", self.baseData, 0);
        }
        if (self.RechargeNum != undefined) {
            se.wi(self.RechargeNum, 1);
        }
        if (self.reward != undefined) {
            se.wi(self.reward, 2);
        }
        return Sproto.SprotoCore.CloseSerialize(se);
    }
    Sproto.ALL_DICT["activity_type25"] = { en: _encode_activity_type25, de: _decode_activity_type25 };
    var activity_type26 = (function () {
        function activity_type26() {
        }
        return activity_type26;
    }());
    Sproto.activity_type26 = activity_type26;
    __reflect(activity_type26.prototype, "Sproto.activity_type26");
    function _decode_activity_type26(d) {
        var o = new activity_type26;
        var t = -1;
        while (-1 != (t = d.rt())) {
            switch (t) {
                case 0:
                    o.baseData = d.ro("activity_base_type");
                    break;
                case 1:
                    o.buynums = d.ria();
                    break;
                default:
                    d.nod();
                    break;
            }
        }
        return o;
    }
    function _encode_activity_type26(self, st) {
        var se = Sproto.SprotoCore.GetSerialize(st, 2);
        if (self.baseData != undefined) {
            se.wo("activity_base_type", self.baseData, 0);
        }
        if (self.buynums != undefined) {
            se.wia(self.buynums, 1);
        }
        return Sproto.SprotoCore.CloseSerialize(se);
    }
    Sproto.ALL_DICT["activity_type26"] = { en: _encode_activity_type26, de: _decode_activity_type26 };
    var activity_type27 = (function () {
        function activity_type27() {
        }
        return activity_type27;
    }());
    Sproto.activity_type27 = activity_type27;
    __reflect(activity_type27.prototype, "Sproto.activity_type27");
    function _decode_activity_type27(d) {
        var o = new activity_type27;
        var t = -1;
        while (-1 != (t = d.rt())) {
            switch (t) {
                case 0:
                    o.baseData = d.ro("activity_base_type");
                    break;
                case 1:
                    o.data = d.roa("activity_rebate");
                    break;
                default:
                    d.nod();
                    break;
            }
        }
        return o;
    }
    function _encode_activity_type27(self, st) {
        var se = Sproto.SprotoCore.GetSerialize(st, 2);
        if (self.baseData != undefined) {
            se.wo("activity_base_type", self.baseData, 0);
        }
        if (self.data != undefined) {
            se.woa("activity_rebate", self.data, 1);
        }
        return Sproto.SprotoCore.CloseSerialize(se);
    }
    Sproto.ALL_DICT["activity_type27"] = { en: _encode_activity_type27, de: _decode_activity_type27 };
    var activity_type28 = (function () {
        function activity_type28() {
        }
        return activity_type28;
    }());
    Sproto.activity_type28 = activity_type28;
    __reflect(activity_type28.prototype, "Sproto.activity_type28");
    function _decode_activity_type28(d) {
        var o = new activity_type28;
        var t = -1;
        while (-1 != (t = d.rt())) {
            switch (t) {
                case 0:
                    o.baseData = d.ro("activity_base_type");
                    break;
                case 1:
                    o.runday = d.ri();
                    break;
                case 2:
                    o.record = d.ria();
                    break;
                case 3:
                    o.recharge = d.ri();
                    break;
                default:
                    d.nod();
                    break;
            }
        }
        return o;
    }
    function _encode_activity_type28(self, st) {
        var se = Sproto.SprotoCore.GetSerialize(st, 4);
        if (self.baseData != undefined) {
            se.wo("activity_base_type", self.baseData, 0);
        }
        if (self.runday != undefined) {
            se.wi(self.runday, 1);
        }
        if (self.record != undefined) {
            se.wia(self.record, 2);
        }
        if (self.recharge != undefined) {
            se.wi(self.recharge, 3);
        }
        return Sproto.SprotoCore.CloseSerialize(se);
    }
    Sproto.ALL_DICT["activity_type28"] = { en: _encode_activity_type28, de: _decode_activity_type28 };
    var race_history = (function () {
        function race_history() {
        }
        return race_history;
    }());
    Sproto.race_history = race_history;
    __reflect(race_history.prototype, "Sproto.race_history");
    function _decode_race_history(d) {
        var o = new race_history;
        var t = -1;
        while (-1 != (t = d.rt())) {
            switch (t) {
                case 0:
                    o.id = d.ri();
                    break;
                case 1:
                    o.name = d.rs();
                    break;
                case 2:
                    o.value = d.ri();
                    break;
                case 3:
                    o.vip = d.ri();
                    break;
                case 4:
                    o.monthCard = d.ri();
                    break;
                case 5:
                    o.monthcard_super = d.ri();
                    break;
                case 6:
                    o.headId = d.ri();
                    break;
                default:
                    d.nod();
                    break;
            }
        }
        return o;
    }
    function _encode_race_history(self, st) {
        var se = Sproto.SprotoCore.GetSerialize(st, 7);
        if (self.id != undefined) {
            se.wi(self.id, 0);
        }
        if (self.name != undefined) {
            se.ws(self.name, 1);
        }
        if (self.value != undefined) {
            se.wi(self.value, 2);
        }
        if (self.vip != undefined) {
            se.wi(self.vip, 3);
        }
        if (self.monthCard != undefined) {
            se.wi(self.monthCard, 4);
        }
        if (self.monthcard_super != undefined) {
            se.wi(self.monthcard_super, 5);
        }
        if (self.headId != undefined) {
            se.wi(self.headId, 6);
        }
        return Sproto.SprotoCore.CloseSerialize(se);
    }
    Sproto.ALL_DICT["race_history"] = { en: _encode_race_history, de: _decode_race_history };
    var sc_activity_dabiao_info_request = (function () {
        function sc_activity_dabiao_info_request() {
        }
        return sc_activity_dabiao_info_request;
    }());
    Sproto.sc_activity_dabiao_info_request = sc_activity_dabiao_info_request;
    __reflect(sc_activity_dabiao_info_request.prototype, "Sproto.sc_activity_dabiao_info_request");
    function _decode_sc_activity_dabiao_info_request(d) {
        var o = new sc_activity_dabiao_info_request;
        var t = -1;
        while (-1 != (t = d.rt())) {
            switch (t) {
                case 1:
                    o.acId = d.ri();
                    break;
                case 2:
                    o.index = d.ri();
                    break;
                case 3:
                    o.draw = d.ri();
                    break;
                case 4:
                    o.value = d.ri();
                    break;
                case 5:
                    o.rankInfo = d.roa("activity_dabiao_data");
                    break;
                default:
                    d.nod();
                    break;
            }
        }
        return o;
    }
    function _encode_sc_activity_dabiao_info_request(self, st) {
        var se = Sproto.SprotoCore.GetSerialize(st, 6);
        if (self.acId != undefined) {
            se.wi(self.acId, 1);
        }
        if (self.index != undefined) {
            se.wi(self.index, 2);
        }
        if (self.draw != undefined) {
            se.wi(self.draw, 3);
        }
        if (self.value != undefined) {
            se.wi(self.value, 4);
        }
        if (self.rankInfo != undefined) {
            se.woa("activity_dabiao_data", self.rankInfo, 5);
        }
        return Sproto.SprotoCore.CloseSerialize(se);
    }
    Sproto.ALL_DICT["sc_activity_dabiao_info_request"] = { en: _encode_sc_activity_dabiao_info_request, de: _decode_sc_activity_dabiao_info_request };
    var sc_activity_dabiao_reward_request = (function () {
        function sc_activity_dabiao_reward_request() {
        }
        return sc_activity_dabiao_reward_request;
    }());
    Sproto.sc_activity_dabiao_reward_request = sc_activity_dabiao_reward_request;
    __reflect(sc_activity_dabiao_reward_request.prototype, "Sproto.sc_activity_dabiao_reward_request");
    function _decode_sc_activity_dabiao_reward_request(d) {
        var o = new sc_activity_dabiao_reward_request;
        var t = -1;
        while (-1 != (t = d.rt())) {
            switch (t) {
                case 0:
                    o.draw = d.ri();
                    break;
                default:
                    d.nod();
                    break;
            }
        }
        return o;
    }
    function _encode_sc_activity_dabiao_reward_request(self, st) {
        var se = Sproto.SprotoCore.GetSerialize(st, 1);
        if (self.draw != undefined) {
            se.wi(self.draw, 0);
        }
        return Sproto.SprotoCore.CloseSerialize(se);
    }
    Sproto.ALL_DICT["sc_activity_dabiao_reward_request"] = { en: _encode_sc_activity_dabiao_reward_request, de: _decode_sc_activity_dabiao_reward_request };
    var sc_activity_init_info_request = (function () {
        function sc_activity_init_info_request() {
        }
        return sc_activity_init_info_request;
    }());
    Sproto.sc_activity_init_info_request = sc_activity_init_info_request;
    __reflect(sc_activity_init_info_request.prototype, "Sproto.sc_activity_init_info_request");
    function _decode_sc_activity_init_info_request(d) {
        var o = new sc_activity_init_info_request;
        var t = -1;
        while (-1 != (t = d.rt())) {
            switch (t) {
                case 0:
                    o.datas = d.roa("activity_data_collection");
                    break;
                default:
                    d.nod();
                    break;
            }
        }
        return o;
    }
    function _encode_sc_activity_init_info_request(self, st) {
        var se = Sproto.SprotoCore.GetSerialize(st, 1);
        if (self.datas != undefined) {
            se.woa("activity_data_collection", self.datas, 0);
        }
        return Sproto.SprotoCore.CloseSerialize(se);
    }
    Sproto.ALL_DICT["sc_activity_init_info_request"] = { en: _encode_sc_activity_init_info_request, de: _decode_sc_activity_init_info_request };
    var sc_activity_luckwheel_ret_request = (function () {
        function sc_activity_luckwheel_ret_request() {
        }
        return sc_activity_luckwheel_ret_request;
    }());
    Sproto.sc_activity_luckwheel_ret_request = sc_activity_luckwheel_ret_request;
    __reflect(sc_activity_luckwheel_ret_request.prototype, "Sproto.sc_activity_luckwheel_ret_request");
    function _decode_sc_activity_luckwheel_ret_request(d) {
        var o = new sc_activity_luckwheel_ret_request;
        var t = -1;
        while (-1 != (t = d.rt())) {
            switch (t) {
                case 0:
                    o.activityid = d.ri();
                    break;
                case 1:
                    o.rewards = d.roa("reward_data");
                    break;
                default:
                    d.nod();
                    break;
            }
        }
        return o;
    }
    function _encode_sc_activity_luckwheel_ret_request(self, st) {
        var se = Sproto.SprotoCore.GetSerialize(st, 2);
        if (self.activityid != undefined) {
            se.wi(self.activityid, 0);
        }
        if (self.rewards != undefined) {
            se.woa("reward_data", self.rewards, 1);
        }
        return Sproto.SprotoCore.CloseSerialize(se);
    }
    Sproto.ALL_DICT["sc_activity_luckwheel_ret_request"] = { en: _encode_sc_activity_luckwheel_ret_request, de: _decode_sc_activity_luckwheel_ret_request };
    var sc_activity_race_history_request = (function () {
        function sc_activity_race_history_request() {
        }
        return sc_activity_race_history_request;
    }());
    Sproto.sc_activity_race_history_request = sc_activity_race_history_request;
    __reflect(sc_activity_race_history_request.prototype, "Sproto.sc_activity_race_history_request");
    function _decode_sc_activity_race_history_request(d) {
        var o = new sc_activity_race_history_request;
        var t = -1;
        while (-1 != (t = d.rt())) {
            switch (t) {
                case 0:
                    o.data = d.roa("race_history");
                    break;
                default:
                    d.nod();
                    break;
            }
        }
        return o;
    }
    function _encode_sc_activity_race_history_request(self, st) {
        var se = Sproto.SprotoCore.GetSerialize(st, 1);
        if (self.data != undefined) {
            se.woa("race_history", self.data, 0);
        }
        return Sproto.SprotoCore.CloseSerialize(se);
    }
    Sproto.ALL_DICT["sc_activity_race_history_request"] = { en: _encode_sc_activity_race_history_request, de: _decode_sc_activity_race_history_request };
    var sc_activity_reward_result_request = (function () {
        function sc_activity_reward_result_request() {
        }
        return sc_activity_reward_result_request;
    }());
    Sproto.sc_activity_reward_result_request = sc_activity_reward_result_request;
    __reflect(sc_activity_reward_result_request.prototype, "Sproto.sc_activity_reward_result_request");
    function _decode_sc_activity_reward_result_request(d) {
        var o = new sc_activity_reward_result_request;
        var t = -1;
        while (-1 != (t = d.rt())) {
            switch (t) {
                case 0:
                    o.id = d.ri();
                    break;
                case 1:
                    o.data = d.ro("activity_data_collection");
                    break;
                default:
                    d.nod();
                    break;
            }
        }
        return o;
    }
    function _encode_sc_activity_reward_result_request(self, st) {
        var se = Sproto.SprotoCore.GetSerialize(st, 2);
        if (self.id != undefined) {
            se.wi(self.id, 0);
        }
        if (self.data != undefined) {
            se.wo("activity_data_collection", self.data, 1);
        }
        return Sproto.SprotoCore.CloseSerialize(se);
    }
    Sproto.ALL_DICT["sc_activity_reward_result_request"] = { en: _encode_sc_activity_reward_result_request, de: _decode_sc_activity_reward_result_request };
    var sc_activity_update_info_request = (function () {
        function sc_activity_update_info_request() {
        }
        return sc_activity_update_info_request;
    }());
    Sproto.sc_activity_update_info_request = sc_activity_update_info_request;
    __reflect(sc_activity_update_info_request.prototype, "Sproto.sc_activity_update_info_request");
    function _decode_sc_activity_update_info_request(d) {
        var o = new sc_activity_update_info_request;
        var t = -1;
        while (-1 != (t = d.rt())) {
            switch (t) {
                case 0:
                    o.index = d.ri();
                    break;
                case 1:
                    o.data = d.ro("activity_data_collection");
                    break;
                default:
                    d.nod();
                    break;
            }
        }
        return o;
    }
    function _encode_sc_activity_update_info_request(self, st) {
        var se = Sproto.SprotoCore.GetSerialize(st, 2);
        if (self.index != undefined) {
            se.wi(self.index, 0);
        }
        if (self.data != undefined) {
            se.wo("activity_data_collection", self.data, 1);
        }
        return Sproto.SprotoCore.CloseSerialize(se);
    }
    Sproto.ALL_DICT["sc_activity_update_info_request"] = { en: _encode_sc_activity_update_info_request, de: _decode_sc_activity_update_info_request };
})(Sproto || (Sproto = {}));
//# sourceMappingURL=wactivity_s2c.js.map