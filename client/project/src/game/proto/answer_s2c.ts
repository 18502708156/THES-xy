// Generated by sprotodump. DO NOT EDIT!

namespace Sproto { 
	export class answer_rank {
		public name: string; // tag 0
		public point: number; // tag 1
	}

	function _decode_answer_rank(d: SprotoTypeDeserialize) {
		let o = new answer_rank;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.name = d.rs ();
				break;
			case 1:
				o.point = d.ri ();
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_answer_rank(self: answer_rank, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 2);

		if (self.name != undefined) {
			se.ws (self.name, 0);
		}

		if (self.point != undefined) {
			se.wi (self.point, 1);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["answer_rank"] = {en: _encode_answer_rank, de: _decode_answer_rank}
	export class sc_answer_info_request {
		public type: number; // tag 0
		public rank: answer_rank[]; // tag 1
		public answerNum: number; // tag 2
		public answerNo: number; // tag 3
		public answerList: number[]; // tag 4
		public point: number; // tag 5
		public rankNo: number; // tag 6
		public operation: number; // tag 7
		public timeout: number; // tag 8
	}

	function _decode_sc_answer_info_request(d: SprotoTypeDeserialize) {
		let o = new sc_answer_info_request;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.type = d.ri ();
				break;
			case 1:
				o.rank = d.roa("answer_rank");
				break;
			case 2:
				o.answerNum = d.ri ();
				break;
			case 3:
				o.answerNo = d.ri ();
				break;
			case 4:
				o.answerList = d.ria ();
				break;
			case 5:
				o.point = d.ri ();
				break;
			case 6:
				o.rankNo = d.ri ();
				break;
			case 7:
				o.operation = d.ri ();
				break;
			case 8:
				o.timeout = d.ri ();
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_sc_answer_info_request(self: sc_answer_info_request, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 9);

		if (self.type != undefined) {
			se.wi (self.type, 0);
		}

		if (self.rank != undefined) {
			se.woa ("answer_rank", self.rank, 1);
		}

		if (self.answerNum != undefined) {
			se.wi (self.answerNum, 2);
		}

		if (self.answerNo != undefined) {
			se.wi (self.answerNo, 3);
		}

		if (self.answerList != undefined) {
			se.wia (self.answerList, 4);
		}

		if (self.point != undefined) {
			se.wi (self.point, 5);
		}

		if (self.rankNo != undefined) {
			se.wi (self.rankNo, 6);
		}

		if (self.operation != undefined) {
			se.wi (self.operation, 7);
		}

		if (self.timeout != undefined) {
			se.wi (self.timeout, 8);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["sc_answer_info_request"] = {en: _encode_sc_answer_info_request, de: _decode_sc_answer_info_request}
	export class sc_answer_rank_res_request {
		public rank: answer_rank[]; // tag 0
	}

	function _decode_sc_answer_rank_res_request(d: SprotoTypeDeserialize) {
		let o = new sc_answer_rank_res_request;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.rank = d.roa("answer_rank");
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_sc_answer_rank_res_request(self: sc_answer_rank_res_request, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 1);

		if (self.rank != undefined) {
			se.woa ("answer_rank", self.rank, 0);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["sc_answer_rank_res_request"] = {en: _encode_sc_answer_rank_res_request, de: _decode_sc_answer_rank_res_request}
	export class sc_answer_reward_request {
		public point: number; // tag 0
		public rankNo: number; // tag 1
		public rewards: reward_data[]; // tag 2
	}

	function _decode_sc_answer_reward_request(d: SprotoTypeDeserialize) {
		let o = new sc_answer_reward_request;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.point = d.ri ();
				break;
			case 1:
				o.rankNo = d.ri ();
				break;
			case 2:
				o.rewards = d.roa("reward_data");
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_sc_answer_reward_request(self: sc_answer_reward_request, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 3);

		if (self.point != undefined) {
			se.wi (self.point, 0);
		}

		if (self.rankNo != undefined) {
			se.wi (self.rankNo, 1);
		}

		if (self.rewards != undefined) {
			se.woa ("reward_data", self.rewards, 2);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["sc_answer_reward_request"] = {en: _encode_sc_answer_reward_request, de: _decode_sc_answer_reward_request}
	export class sc_answer_update_request {
		public type: number; // tag 0
		public answerNum: number; // tag 1
		public answerNo: number; // tag 2
		public answerList: number[]; // tag 3
		public point: number; // tag 4
		public operation: number; // tag 5
		public timeout: number; // tag 6
	}

	function _decode_sc_answer_update_request(d: SprotoTypeDeserialize) {
		let o = new sc_answer_update_request;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.type = d.ri ();
				break;
			case 1:
				o.answerNum = d.ri ();
				break;
			case 2:
				o.answerNo = d.ri ();
				break;
			case 3:
				o.answerList = d.ria ();
				break;
			case 4:
				o.point = d.ri ();
				break;
			case 5:
				o.operation = d.ri ();
				break;
			case 6:
				o.timeout = d.ri ();
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_sc_answer_update_request(self: sc_answer_update_request, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 7);

		if (self.type != undefined) {
			se.wi (self.type, 0);
		}

		if (self.answerNum != undefined) {
			se.wi (self.answerNum, 1);
		}

		if (self.answerNo != undefined) {
			se.wi (self.answerNo, 2);
		}

		if (self.answerList != undefined) {
			se.wia (self.answerList, 3);
		}

		if (self.point != undefined) {
			se.wi (self.point, 4);
		}

		if (self.operation != undefined) {
			se.wi (self.operation, 5);
		}

		if (self.timeout != undefined) {
			se.wi (self.timeout, 6);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["sc_answer_update_request"] = {en: _encode_sc_answer_update_request, de: _decode_sc_answer_update_request}
}

