// Generated by sprotodump. DO NOT EDIT!

namespace Sproto { 
	export class auction_item {
		public id: number; // tag 0
		public itemid: number; // tag 1
		public count: number; // tag 2
		public price: number; // tag 3
		public playername: string; // tag 4
		public offername: string; // tag 5
		public status: number; // tag 6
		public createtime: number; // tag 7
		public dealtime: number; // tag 8
		public isbuy: number; // tag 9
		public dealprice: number; // tag 10
		public addprice: number; // tag 11
		public numerictype: number; // tag 12
	}

	function _decode_auction_item(d: SprotoTypeDeserialize) {
		let o = new auction_item;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.id = d.ri ();
				break;
			case 1:
				o.itemid = d.ri ();
				break;
			case 2:
				o.count = d.ri ();
				break;
			case 3:
				o.price = d.ri ();
				break;
			case 4:
				o.playername = d.rs ();
				break;
			case 5:
				o.offername = d.rs ();
				break;
			case 6:
				o.status = d.ri ();
				break;
			case 7:
				o.createtime = d.ri ();
				break;
			case 8:
				o.dealtime = d.ri ();
				break;
			case 9:
				o.isbuy = d.ri ();
				break;
			case 10:
				o.dealprice = d.ri ();
				break;
			case 11:
				o.addprice = d.ri ();
				break;
			case 12:
				o.numerictype = d.ri ();
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_auction_item(self: auction_item, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 13);

		if (self.id != undefined) {
			se.wi (self.id, 0);
		}

		if (self.itemid != undefined) {
			se.wi (self.itemid, 1);
		}

		if (self.count != undefined) {
			se.wi (self.count, 2);
		}

		if (self.price != undefined) {
			se.wi (self.price, 3);
		}

		if (self.playername != undefined) {
			se.ws (self.playername, 4);
		}

		if (self.offername != undefined) {
			se.ws (self.offername, 5);
		}

		if (self.status != undefined) {
			se.wi (self.status, 6);
		}

		if (self.createtime != undefined) {
			se.wi (self.createtime, 7);
		}

		if (self.dealtime != undefined) {
			se.wi (self.dealtime, 8);
		}

		if (self.isbuy != undefined) {
			se.wi (self.isbuy, 9);
		}

		if (self.dealprice != undefined) {
			se.wi (self.dealprice, 10);
		}

		if (self.addprice != undefined) {
			se.wi (self.addprice, 11);
		}

		if (self.numerictype != undefined) {
			se.wi (self.numerictype, 12);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["auction_item"] = {en: _encode_auction_item, de: _decode_auction_item}
	export class sc_auction_list_request {
		public ratio: number; // tag 0
		public ratioAct: number; // tag 1
		public lockratio: number; // tag 2
		public guildid: number; // tag 3
		public items: auction_item[]; // tag 4
	}

	function _decode_sc_auction_list_request(d: SprotoTypeDeserialize) {
		let o = new sc_auction_list_request;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.ratio = d.ri ();
				break;
			case 1:
				o.ratioAct = d.ri ();
				break;
			case 2:
				o.lockratio = d.ri ();
				break;
			case 3:
				o.guildid = d.ri ();
				break;
			case 4:
				o.items = d.roa("auction_item");
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_sc_auction_list_request(self: sc_auction_list_request, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 5);

		if (self.ratio != undefined) {
			se.wi (self.ratio, 0);
		}

		if (self.ratioAct != undefined) {
			se.wi (self.ratioAct, 1);
		}

		if (self.lockratio != undefined) {
			se.wi (self.lockratio, 2);
		}

		if (self.guildid != undefined) {
			se.wi (self.guildid, 3);
		}

		if (self.items != undefined) {
			se.woa ("auction_item", self.items, 4);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["sc_auction_list_request"] = {en: _encode_sc_auction_list_request, de: _decode_sc_auction_list_request}
	export class sc_auction_record_request {
		public guildid: number; // tag 0
		public items: auction_item[]; // tag 1
	}

	function _decode_sc_auction_record_request(d: SprotoTypeDeserialize) {
		let o = new sc_auction_record_request;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.guildid = d.ri ();
				break;
			case 1:
				o.items = d.roa("auction_item");
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_sc_auction_record_request(self: sc_auction_record_request, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 2);

		if (self.guildid != undefined) {
			se.wi (self.guildid, 0);
		}

		if (self.items != undefined) {
			se.woa ("auction_item", self.items, 1);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["sc_auction_record_request"] = {en: _encode_sc_auction_record_request, de: _decode_sc_auction_record_request}
	export class sc_auction_select_request {
		public rewards: reward_data[]; // tag 1
	}

	function _decode_sc_auction_select_request(d: SprotoTypeDeserialize) {
		let o = new sc_auction_select_request;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 1:
				o.rewards = d.roa("reward_data");
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_sc_auction_select_request(self: sc_auction_select_request, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 2);

		if (self.rewards != undefined) {
			se.woa ("reward_data", self.rewards, 1);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["sc_auction_select_request"] = {en: _encode_sc_auction_select_request, de: _decode_sc_auction_select_request}
	export class sc_auction_update_request {
		public guildid: number; // tag 1
		public item: auction_item; // tag 2
	}

	function _decode_sc_auction_update_request(d: SprotoTypeDeserialize) {
		let o = new sc_auction_update_request;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 1:
				o.guildid = d.ri ();
				break;
			case 2:
				o.item = d.ro("auction_item");
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_sc_auction_update_request(self: sc_auction_update_request, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 3);

		if (self.guildid != undefined) {
			se.wi (self.guildid, 1);
		}

		if (self.item != undefined) {
			se.wo ("auction_item", self.item, 2);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["sc_auction_update_request"] = {en: _encode_sc_auction_update_request, de: _decode_sc_auction_update_request}
	export class sc_ratio_change_request {
		public ratio: number; // tag 0
		public ratioAct: number; // tag 1
		public lockratio: number; // tag 2
	}

	function _decode_sc_ratio_change_request(d: SprotoTypeDeserialize) {
		let o = new sc_ratio_change_request;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.ratio = d.ri ();
				break;
			case 1:
				o.ratioAct = d.ri ();
				break;
			case 2:
				o.lockratio = d.ri ();
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_sc_ratio_change_request(self: sc_ratio_change_request, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 3);

		if (self.ratio != undefined) {
			se.wi (self.ratio, 0);
		}

		if (self.ratioAct != undefined) {
			se.wi (self.ratioAct, 1);
		}

		if (self.lockratio != undefined) {
			se.wi (self.lockratio, 2);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["sc_ratio_change_request"] = {en: _encode_sc_ratio_change_request, de: _decode_sc_ratio_change_request}
}

