// Generated by sprotodump. DO NOT EDIT!

namespace Sproto { 
	export class baby_start_data {
		public id: number; // tag 0
		public count: number; // tag 1
	}

	function _decode_baby_start_data(d: SprotoTypeDeserialize) {
		let o = new baby_start_data;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.id = d.ri ();
				break;
			case 1:
				o.count = d.ri ();
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_baby_start_data(self: baby_start_data, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 2);

		if (self.id != undefined) {
			se.wi (self.id, 0);
		}

		if (self.count != undefined) {
			se.wi (self.count, 1);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["baby_start_data"] = {en: _encode_baby_start_data, de: _decode_baby_start_data}
	export class baby_start_smelt {
		public id: number; // tag 0
		public num: number; // tag 1
	}

	function _decode_baby_start_smelt(d: SprotoTypeDeserialize) {
		let o = new baby_start_smelt;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.id = d.ri ();
				break;
			case 1:
				o.num = d.ri ();
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_baby_start_smelt(self: baby_start_smelt, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 2);

		if (self.id != undefined) {
			se.wi (self.id, 0);
		}

		if (self.num != undefined) {
			se.wi (self.num, 1);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["baby_start_smelt"] = {en: _encode_baby_start_smelt, de: _decode_baby_start_smelt}
	export class cs_baby_active_request {
		public sex: number; // tag 0
	}

	function _decode_cs_baby_active_request(d: SprotoTypeDeserialize) {
		let o = new cs_baby_active_request;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.sex = d.ri ();
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_cs_baby_active_request(self: cs_baby_active_request, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 1);

		if (self.sex != undefined) {
			se.wi (self.sex, 0);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["cs_baby_active_request"] = {en: _encode_cs_baby_active_request, de: _decode_cs_baby_active_request}
	export class cs_baby_active_response {
		public ret: boolean; // tag 0
	}

	function _decode_cs_baby_active_response(d: SprotoTypeDeserialize) {
		let o = new cs_baby_active_response;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.ret = d.rb ();
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_cs_baby_active_response(self: cs_baby_active_response, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 1);

		if (self.ret != undefined) {
			se.wb (self.ret, 0);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["cs_baby_active_response"] = {en: _encode_cs_baby_active_response, de: _decode_cs_baby_active_response}
	export class cs_baby_addgift_request {
	}

	function _decode_cs_baby_addgift_request(d: SprotoTypeDeserialize) {
		let o = new cs_baby_addgift_request;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_cs_baby_addgift_request(self: cs_baby_addgift_request, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 0);

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["cs_baby_addgift_request"] = {en: _encode_cs_baby_addgift_request, de: _decode_cs_baby_addgift_request}
	export class cs_baby_addgift_response {
		public ret: boolean; // tag 0
		public exp: number; // tag 1
		public level: number; // tag 2
	}

	function _decode_cs_baby_addgift_response(d: SprotoTypeDeserialize) {
		let o = new cs_baby_addgift_response;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.ret = d.rb ();
				break;
			case 1:
				o.exp = d.ri ();
				break;
			case 2:
				o.level = d.ri ();
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_cs_baby_addgift_response(self: cs_baby_addgift_response, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 3);

		if (self.ret != undefined) {
			se.wb (self.ret, 0);
		}

		if (self.exp != undefined) {
			se.wi (self.exp, 1);
		}

		if (self.level != undefined) {
			se.wi (self.level, 2);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["cs_baby_addgift_response"] = {en: _encode_cs_baby_addgift_response, de: _decode_cs_baby_addgift_response}
	export class cs_baby_refreshskill_request {
		public locklist: number[]; // tag 1
		public type: number; // tag 2
		public autoBuy: number; // tag 3
	}

	function _decode_cs_baby_refreshskill_request(d: SprotoTypeDeserialize) {
		let o = new cs_baby_refreshskill_request;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 1:
				o.locklist = d.ria ();
				break;
			case 2:
				o.type = d.ri ();
				break;
			case 3:
				o.autoBuy = d.ri ();
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_cs_baby_refreshskill_request(self: cs_baby_refreshskill_request, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 4);

		if (self.locklist != undefined) {
			se.wia (self.locklist, 1);
		}

		if (self.type != undefined) {
			se.wi (self.type, 2);
		}

		if (self.autoBuy != undefined) {
			se.wi (self.autoBuy, 3);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["cs_baby_refreshskill_request"] = {en: _encode_cs_baby_refreshskill_request, de: _decode_cs_baby_refreshskill_request}
	export class cs_baby_refreshskill_response {
		public ret: boolean; // tag 0
		public xilian: number; // tag 1
		public xilianSkills: number[]; // tag 2
	}

	function _decode_cs_baby_refreshskill_response(d: SprotoTypeDeserialize) {
		let o = new cs_baby_refreshskill_response;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.ret = d.rb ();
				break;
			case 1:
				o.xilian = d.ri ();
				break;
			case 2:
				o.xilianSkills = d.ria ();
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_cs_baby_refreshskill_response(self: cs_baby_refreshskill_response, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 3);

		if (self.ret != undefined) {
			se.wb (self.ret, 0);
		}

		if (self.xilian != undefined) {
			se.wi (self.xilian, 1);
		}

		if (self.xilianSkills != undefined) {
			se.wia (self.xilianSkills, 2);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["cs_baby_refreshskill_response"] = {en: _encode_cs_baby_refreshskill_response, de: _decode_cs_baby_refreshskill_response}
	export class cs_baby_rename_request {
		public name: string; // tag 1
	}

	function _decode_cs_baby_rename_request(d: SprotoTypeDeserialize) {
		let o = new cs_baby_rename_request;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 1:
				o.name = d.rs ();
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_cs_baby_rename_request(self: cs_baby_rename_request, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 2);

		if (self.name != undefined) {
			se.ws (self.name, 1);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["cs_baby_rename_request"] = {en: _encode_cs_baby_rename_request, de: _decode_cs_baby_rename_request}
	export class cs_baby_rename_response {
		public ret: boolean; // tag 0
		public name: string; // tag 1
	}

	function _decode_cs_baby_rename_response(d: SprotoTypeDeserialize) {
		let o = new cs_baby_rename_response;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.ret = d.rb ();
				break;
			case 1:
				o.name = d.rs ();
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_cs_baby_rename_response(self: cs_baby_rename_response, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 2);

		if (self.ret != undefined) {
			se.wb (self.ret, 0);
		}

		if (self.name != undefined) {
			se.ws (self.name, 1);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["cs_baby_rename_response"] = {en: _encode_cs_baby_rename_response, de: _decode_cs_baby_rename_response}
	export class cs_baby_setskillin_request {
		public id: number; // tag 0
	}

	function _decode_cs_baby_setskillin_request(d: SprotoTypeDeserialize) {
		let o = new cs_baby_setskillin_request;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.id = d.ri ();
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_cs_baby_setskillin_request(self: cs_baby_setskillin_request, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 1);

		if (self.id != undefined) {
			se.wi (self.id, 0);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["cs_baby_setskillin_request"] = {en: _encode_cs_baby_setskillin_request, de: _decode_cs_baby_setskillin_request}
	export class cs_baby_setskillin_response {
		public ret: boolean; // tag 0
		public buffs: number[]; // tag 1
	}

	function _decode_cs_baby_setskillin_response(d: SprotoTypeDeserialize) {
		let o = new cs_baby_setskillin_response;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.ret = d.rb ();
				break;
			case 1:
				o.buffs = d.ria ();
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_cs_baby_setskillin_response(self: cs_baby_setskillin_response, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 2);

		if (self.ret != undefined) {
			se.wb (self.ret, 0);
		}

		if (self.buffs != undefined) {
			se.wia (self.buffs, 1);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["cs_baby_setskillin_response"] = {en: _encode_cs_baby_setskillin_response, de: _decode_cs_baby_setskillin_response}
	export class cs_baby_start_get_request {
		public num: number; // tag 0
	}

	function _decode_cs_baby_start_get_request(d: SprotoTypeDeserialize) {
		let o = new cs_baby_start_get_request;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.num = d.ri ();
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_cs_baby_start_get_request(self: cs_baby_start_get_request, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 1);

		if (self.num != undefined) {
			se.wi (self.num, 0);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["cs_baby_start_get_request"] = {en: _encode_cs_baby_start_get_request, de: _decode_cs_baby_start_get_request}
	export class cs_baby_start_get_response {
		public ret: boolean; // tag 0
		public num: number; // tag 1
		public cost: number; // tag 2
		public star: number; // tag 3
		public data: baby_start_data[]; // tag 4
		public msgData: baby_star_msg[]; // tag 5
	}

	function _decode_cs_baby_start_get_response(d: SprotoTypeDeserialize) {
		let o = new cs_baby_start_get_response;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.ret = d.rb ();
				break;
			case 1:
				o.num = d.ri ();
				break;
			case 2:
				o.cost = d.ri ();
				break;
			case 3:
				o.star = d.ri ();
				break;
			case 4:
				o.data = d.roa("baby_start_data");
				break;
			case 5:
				o.msgData = d.roa("baby_star_msg");
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_cs_baby_start_get_response(self: cs_baby_start_get_response, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 6);

		if (self.ret != undefined) {
			se.wb (self.ret, 0);
		}

		if (self.num != undefined) {
			se.wi (self.num, 1);
		}

		if (self.cost != undefined) {
			se.wi (self.cost, 2);
		}

		if (self.star != undefined) {
			se.wi (self.star, 3);
		}

		if (self.data != undefined) {
			se.woa ("baby_start_data", self.data, 4);
		}

		if (self.msgData != undefined) {
			se.woa ("baby_star_msg", self.msgData, 5);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["cs_baby_start_get_response"] = {en: _encode_cs_baby_start_get_response, de: _decode_cs_baby_start_get_response}
	export class cs_baby_start_light_request {
	}

	function _decode_cs_baby_start_light_request(d: SprotoTypeDeserialize) {
		let o = new cs_baby_start_light_request;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_cs_baby_start_light_request(self: cs_baby_start_light_request, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 0);

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["cs_baby_start_light_request"] = {en: _encode_cs_baby_start_light_request, de: _decode_cs_baby_start_light_request}
	export class cs_baby_start_light_response {
		public ret: boolean; // tag 0
	}

	function _decode_cs_baby_start_light_response(d: SprotoTypeDeserialize) {
		let o = new cs_baby_start_light_response;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.ret = d.rb ();
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_cs_baby_start_light_response(self: cs_baby_start_light_response, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 1);

		if (self.ret != undefined) {
			se.wb (self.ret, 0);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["cs_baby_start_light_response"] = {en: _encode_cs_baby_start_light_response, de: _decode_cs_baby_start_light_response}
	export class cs_baby_start_smelt_request {
		public idList: baby_start_smelt[]; // tag 1
	}

	function _decode_cs_baby_start_smelt_request(d: SprotoTypeDeserialize) {
		let o = new cs_baby_start_smelt_request;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 1:
				o.idList = d.roa("baby_start_smelt");
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_cs_baby_start_smelt_request(self: cs_baby_start_smelt_request, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 2);

		if (self.idList != undefined) {
			se.woa ("baby_start_smelt", self.idList, 1);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["cs_baby_start_smelt_request"] = {en: _encode_cs_baby_start_smelt_request, de: _decode_cs_baby_start_smelt_request}
	export class cs_baby_start_smelt_response {
		public ret: boolean; // tag 0
	}

	function _decode_cs_baby_start_smelt_response(d: SprotoTypeDeserialize) {
		let o = new cs_baby_start_smelt_response;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.ret = d.rb ();
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_cs_baby_start_smelt_response(self: cs_baby_start_smelt_response, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 1);

		if (self.ret != undefined) {
			se.wb (self.ret, 0);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["cs_baby_start_smelt_response"] = {en: _encode_cs_baby_start_smelt_response, de: _decode_cs_baby_start_smelt_response}
	export class cs_baby_start_up_lv_request {
		public pos: number; // tag 1
	}

	function _decode_cs_baby_start_up_lv_request(d: SprotoTypeDeserialize) {
		let o = new cs_baby_start_up_lv_request;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 1:
				o.pos = d.ri ();
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_cs_baby_start_up_lv_request(self: cs_baby_start_up_lv_request, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 2);

		if (self.pos != undefined) {
			se.wi (self.pos, 1);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["cs_baby_start_up_lv_request"] = {en: _encode_cs_baby_start_up_lv_request, de: _decode_cs_baby_start_up_lv_request}
	export class cs_baby_start_up_lv_response {
		public ret: boolean; // tag 0
		public pos: number; // tag 1
		public no: number; // tag 2
	}

	function _decode_cs_baby_start_up_lv_response(d: SprotoTypeDeserialize) {
		let o = new cs_baby_start_up_lv_response;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.ret = d.rb ();
				break;
			case 1:
				o.pos = d.ri ();
				break;
			case 2:
				o.no = d.ri ();
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_cs_baby_start_up_lv_response(self: cs_baby_start_up_lv_response, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 3);

		if (self.ret != undefined) {
			se.wb (self.ret, 0);
		}

		if (self.pos != undefined) {
			se.wi (self.pos, 1);
		}

		if (self.no != undefined) {
			se.wi (self.no, 2);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["cs_baby_start_up_lv_response"] = {en: _encode_cs_baby_start_up_lv_response, de: _decode_cs_baby_start_up_lv_response}
	export class cs_baby_start_use_request {
		public id: number; // tag 0
		public pos: number; // tag 1
	}

	function _decode_cs_baby_start_use_request(d: SprotoTypeDeserialize) {
		let o = new cs_baby_start_use_request;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.id = d.ri ();
				break;
			case 1:
				o.pos = d.ri ();
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_cs_baby_start_use_request(self: cs_baby_start_use_request, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 2);

		if (self.id != undefined) {
			se.wi (self.id, 0);
		}

		if (self.pos != undefined) {
			se.wi (self.pos, 1);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["cs_baby_start_use_request"] = {en: _encode_cs_baby_start_use_request, de: _decode_cs_baby_start_use_request}
	export class cs_baby_start_use_response {
		public ret: boolean; // tag 0
		public pos: number; // tag 1
		public no: number; // tag 2
	}

	function _decode_cs_baby_start_use_response(d: SprotoTypeDeserialize) {
		let o = new cs_baby_start_use_response;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.ret = d.rb ();
				break;
			case 1:
				o.pos = d.ri ();
				break;
			case 2:
				o.no = d.ri ();
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_cs_baby_start_use_response(self: cs_baby_start_use_response, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 3);

		if (self.ret != undefined) {
			se.wb (self.ret, 0);
		}

		if (self.pos != undefined) {
			se.wi (self.pos, 1);
		}

		if (self.no != undefined) {
			se.wi (self.no, 2);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["cs_baby_start_use_response"] = {en: _encode_cs_baby_start_use_response, de: _decode_cs_baby_start_use_response}
}

