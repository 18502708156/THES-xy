// Generated by sprotodump. DO NOT EDIT!

namespace Sproto { 
	export class battle_event {
		public type: number; // tag 0
		public id: number; // tag 1
		public src: number; // tag 2
		public targets: number[]; // tag 3
		public target: number; // tag 4
		public args: number[]; // tag 5
		public arg: number; // tag 6
		public actions: battle_event[]; // tag 7
	}

	function _decode_battle_event(d: SprotoTypeDeserialize) {
		let o = new battle_event;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.type = d.ri ();
				break;
			case 1:
				o.id = d.ri ();
				break;
			case 2:
				o.src = d.ri ();
				break;
			case 3:
				o.targets = d.ria ();
				break;
			case 4:
				o.target = d.ri ();
				break;
			case 5:
				o.args = d.ria ();
				break;
			case 6:
				o.arg = d.ri ();
				break;
			case 7:
				o.actions = d.roa("battle_event");
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_battle_event(self: battle_event, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 8);

		if (self.type != undefined) {
			se.wi (self.type, 0);
		}

		if (self.id != undefined) {
			se.wi (self.id, 1);
		}

		if (self.src != undefined) {
			se.wi (self.src, 2);
		}

		if (self.targets != undefined) {
			se.wia (self.targets, 3);
		}

		if (self.target != undefined) {
			se.wi (self.target, 4);
		}

		if (self.args != undefined) {
			se.wia (self.args, 5);
		}

		if (self.arg != undefined) {
			se.wi (self.arg, 6);
		}

		if (self.actions != undefined) {
			se.woa ("battle_event", self.actions, 7);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["battle_event"] = {en: _encode_battle_event, de: _decode_battle_event}
	export class entity_data {
		public ownerid: number; // tag 0
		public handler: number; // tag 1
		public type: number; // tag 2
		public side: number; // tag 3
		public pos: number; // tag 4
		public attrs: number[]; // tag 5
		public sattrs: spec_attr[]; // tag 6
		public shows: entity_shows; // tag 7
		public monid: number; // tag 8
		public skills: number[]; // tag 9
	}

	function _decode_entity_data(d: SprotoTypeDeserialize) {
		let o = new entity_data;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.ownerid = d.ri ();
				break;
			case 1:
				o.handler = d.ri ();
				break;
			case 2:
				o.type = d.ri ();
				break;
			case 3:
				o.side = d.ri ();
				break;
			case 4:
				o.pos = d.ri ();
				break;
			case 5:
				o.attrs = d.ria ();
				break;
			case 6:
				o.sattrs = d.roa("spec_attr");
				break;
			case 7:
				o.shows = d.ro("entity_shows");
				break;
			case 8:
				o.monid = d.ri ();
				break;
			case 9:
				o.skills = d.ria ();
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_entity_data(self: entity_data, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 10);

		if (self.ownerid != undefined) {
			se.wi (self.ownerid, 0);
		}

		if (self.handler != undefined) {
			se.wi (self.handler, 1);
		}

		if (self.type != undefined) {
			se.wi (self.type, 2);
		}

		if (self.side != undefined) {
			se.wi (self.side, 3);
		}

		if (self.pos != undefined) {
			se.wi (self.pos, 4);
		}

		if (self.attrs != undefined) {
			se.wia (self.attrs, 5);
		}

		if (self.sattrs != undefined) {
			se.woa ("spec_attr", self.sattrs, 6);
		}

		if (self.shows != undefined) {
			se.wo ("entity_shows", self.shows, 7);
		}

		if (self.monid != undefined) {
			se.wi (self.monid, 8);
		}

		if (self.skills != undefined) {
			se.wia (self.skills, 9);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["entity_data"] = {en: _encode_entity_data, de: _decode_entity_data}
	export class entity_shows {
		public shows: number[]; // tag 0
		public job: number; // tag 1
		public sex: number; // tag 2
		public id: number; // tag 3
		public name: string; // tag 4
		public serverid: number; // tag 5
		public guildid: number; // tag 6
		public guildname: string; // tag 7
		public level: number; // tag 8
	}

	function _decode_entity_shows(d: SprotoTypeDeserialize) {
		let o = new entity_shows;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.shows = d.ria ();
				break;
			case 1:
				o.job = d.ri ();
				break;
			case 2:
				o.sex = d.ri ();
				break;
			case 3:
				o.id = d.ri ();
				break;
			case 4:
				o.name = d.rs ();
				break;
			case 5:
				o.serverid = d.ri ();
				break;
			case 6:
				o.guildid = d.ri ();
				break;
			case 7:
				o.guildname = d.rs ();
				break;
			case 8:
				o.level = d.ri ();
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_entity_shows(self: entity_shows, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 9);

		if (self.shows != undefined) {
			se.wia (self.shows, 0);
		}

		if (self.job != undefined) {
			se.wi (self.job, 1);
		}

		if (self.sex != undefined) {
			se.wi (self.sex, 2);
		}

		if (self.id != undefined) {
			se.wi (self.id, 3);
		}

		if (self.name != undefined) {
			se.ws (self.name, 4);
		}

		if (self.serverid != undefined) {
			se.wi (self.serverid, 5);
		}

		if (self.guildid != undefined) {
			se.wi (self.guildid, 6);
		}

		if (self.guildname != undefined) {
			se.ws (self.guildname, 7);
		}

		if (self.level != undefined) {
			se.wi (self.level, 8);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["entity_shows"] = {en: _encode_entity_shows, de: _decode_entity_shows}
	export class entity_skill {
		public handler: number; // tag 0
		public skills: number[]; // tag 1
	}

	function _decode_entity_skill(d: SprotoTypeDeserialize) {
		let o = new entity_skill;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.handler = d.ri ();
				break;
			case 1:
				o.skills = d.ria ();
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_entity_skill(self: entity_skill, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 2);

		if (self.handler != undefined) {
			se.wi (self.handler, 0);
		}

		if (self.skills != undefined) {
			se.wia (self.skills, 1);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["entity_skill"] = {en: _encode_entity_skill, de: _decode_entity_skill}
	export class sc_battle_action_request {
		public events: battle_event[]; // tag 0
	}

	function _decode_sc_battle_action_request(d: SprotoTypeDeserialize) {
		let o = new sc_battle_action_request;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.events = d.roa("battle_event");
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_sc_battle_action_request(self: sc_battle_action_request, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 1);

		if (self.events != undefined) {
			se.woa ("battle_event", self.events, 0);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["sc_battle_action_request"] = {en: _encode_sc_battle_action_request, de: _decode_sc_battle_action_request}
	export class sc_battle_entitys_request {
		public raidType: number; // tag 0
		public fbid: number; // tag 1
		public manual: number; // tag 2
		public entitydatas: entity_data[]; // tag 3
	}

	function _decode_sc_battle_entitys_request(d: SprotoTypeDeserialize) {
		let o = new sc_battle_entitys_request;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.raidType = d.ri ();
				break;
			case 1:
				o.fbid = d.ri ();
				break;
			case 2:
				o.manual = d.ri ();
				break;
			case 3:
				o.entitydatas = d.roa("entity_data");
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_sc_battle_entitys_request(self: sc_battle_entitys_request, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 4);

		if (self.raidType != undefined) {
			se.wi (self.raidType, 0);
		}

		if (self.fbid != undefined) {
			se.wi (self.fbid, 1);
		}

		if (self.manual != undefined) {
			se.wi (self.manual, 2);
		}

		if (self.entitydatas != undefined) {
			se.woa ("entity_data", self.entitydatas, 3);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["sc_battle_entitys_request"] = {en: _encode_sc_battle_entitys_request, de: _decode_sc_battle_entitys_request}
	export class sc_battle_manual_request {
		public time: number; // tag 0
		public useskills: entity_skill[]; // tag 1
	}

	function _decode_sc_battle_manual_request(d: SprotoTypeDeserialize) {
		let o = new sc_battle_manual_request;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.time = d.ri ();
				break;
			case 1:
				o.useskills = d.roa("entity_skill");
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_sc_battle_manual_request(self: sc_battle_manual_request, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 2);

		if (self.time != undefined) {
			se.wi (self.time, 0);
		}

		if (self.useskills != undefined) {
			se.woa ("entity_skill", self.useskills, 1);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["sc_battle_manual_request"] = {en: _encode_sc_battle_manual_request, de: _decode_sc_battle_manual_request}
	export class sc_battle_record_request {
		public raidType: number; // tag 0
		public fbid: number; // tag 1
		public manual: number; // tag 2
		public entitydatas: entity_data[]; // tag 3
		public events: battle_event[]; // tag 4
	}

	function _decode_sc_battle_record_request(d: SprotoTypeDeserialize) {
		let o = new sc_battle_record_request;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.raidType = d.ri ();
				break;
			case 1:
				o.fbid = d.ri ();
				break;
			case 2:
				o.manual = d.ri ();
				break;
			case 3:
				o.entitydatas = d.roa("entity_data");
				break;
			case 4:
				o.events = d.roa("battle_event");
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_sc_battle_record_request(self: sc_battle_record_request, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 5);

		if (self.raidType != undefined) {
			se.wi (self.raidType, 0);
		}

		if (self.fbid != undefined) {
			se.wi (self.fbid, 1);
		}

		if (self.manual != undefined) {
			se.wi (self.manual, 2);
		}

		if (self.entitydatas != undefined) {
			se.woa ("entity_data", self.entitydatas, 3);
		}

		if (self.events != undefined) {
			se.woa ("battle_event", self.events, 4);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["sc_battle_record_request"] = {en: _encode_sc_battle_record_request, de: _decode_sc_battle_record_request}
	export class sc_battle_set_auto_request {
		public isauto: number; // tag 0
	}

	function _decode_sc_battle_set_auto_request(d: SprotoTypeDeserialize) {
		let o = new sc_battle_set_auto_request;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.isauto = d.ri ();
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_sc_battle_set_auto_request(self: sc_battle_set_auto_request, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 1);

		if (self.isauto != undefined) {
			se.wi (self.isauto, 0);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["sc_battle_set_auto_request"] = {en: _encode_sc_battle_set_auto_request, de: _decode_sc_battle_set_auto_request}
	export class spec_attr {
		public atttype: number; // tag 0
		public value: number; // tag 1
	}

	function _decode_spec_attr(d: SprotoTypeDeserialize) {
		let o = new spec_attr;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.atttype = d.ri ();
				break;
			case 1:
				o.value = d.ri ();
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_spec_attr(self: spec_attr, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 2);

		if (self.atttype != undefined) {
			se.wi (self.atttype, 0);
		}

		if (self.value != undefined) {
			se.wi (self.value, 1);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["spec_attr"] = {en: _encode_spec_attr, de: _decode_spec_attr}
}

