// Generated by sprotodump. DO NOT EDIT!

namespace Sproto { 
	export class cs_public_boss_challenge_request {
		public id: number; // tag 0
	}

	function _decode_cs_public_boss_challenge_request(d: SprotoTypeDeserialize) {
		let o = new cs_public_boss_challenge_request;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.id = d.ri ();
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_cs_public_boss_challenge_request(self: cs_public_boss_challenge_request, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 1);

		if (self.id != undefined) {
			se.wi (self.id, 0);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["cs_public_boss_challenge_request"] = {en: _encode_cs_public_boss_challenge_request, de: _decode_cs_public_boss_challenge_request}
	export class cs_public_boss_challenge_reborn_request {
		public id: number; // tag 0
	}

	function _decode_cs_public_boss_challenge_reborn_request(d: SprotoTypeDeserialize) {
		let o = new cs_public_boss_challenge_reborn_request;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.id = d.ri ();
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_cs_public_boss_challenge_reborn_request(self: cs_public_boss_challenge_reborn_request, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 1);

		if (self.id != undefined) {
			se.wi (self.id, 0);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["cs_public_boss_challenge_reborn_request"] = {en: _encode_cs_public_boss_challenge_reborn_request, de: _decode_cs_public_boss_challenge_reborn_request}
	export class cs_public_boss_reborn_mark_request {
		public rebornmark: number; // tag 0
	}

	function _decode_cs_public_boss_reborn_mark_request(d: SprotoTypeDeserialize) {
		let o = new cs_public_boss_reborn_mark_request;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.rebornmark = d.ri ();
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_cs_public_boss_reborn_mark_request(self: cs_public_boss_reborn_mark_request, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 1);

		if (self.rebornmark != undefined) {
			se.wi (self.rebornmark, 0);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["cs_public_boss_reborn_mark_request"] = {en: _encode_cs_public_boss_reborn_mark_request, de: _decode_cs_public_boss_reborn_mark_request}
	export class cs_public_boss_record_attack_request {
		public id: number; // tag 0
	}

	function _decode_cs_public_boss_record_attack_request(d: SprotoTypeDeserialize) {
		let o = new cs_public_boss_record_attack_request;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.id = d.ri ();
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_cs_public_boss_record_attack_request(self: cs_public_boss_record_attack_request, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 1);

		if (self.id != undefined) {
			se.wi (self.id, 0);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["cs_public_boss_record_attack_request"] = {en: _encode_cs_public_boss_record_attack_request, de: _decode_cs_public_boss_record_attack_request}
	export class cs_public_boss_record_kill_request {
		public id: number; // tag 0
	}

	function _decode_cs_public_boss_record_kill_request(d: SprotoTypeDeserialize) {
		let o = new cs_public_boss_record_kill_request;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.id = d.ri ();
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_cs_public_boss_record_kill_request(self: cs_public_boss_record_kill_request, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 1);

		if (self.id != undefined) {
			se.wi (self.id, 0);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["cs_public_boss_record_kill_request"] = {en: _encode_cs_public_boss_record_kill_request, de: _decode_cs_public_boss_record_kill_request}
}

