// Generated by sprotodump. DO NOT EDIT!

namespace Sproto { 
	export class cs_climb_all_rank_request {
	}

	function _decode_cs_climb_all_rank_request(d: SprotoTypeDeserialize) {
		let o = new cs_climb_all_rank_request;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_cs_climb_all_rank_request(self: cs_climb_all_rank_request, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 0);

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["cs_climb_all_rank_request"] = {en: _encode_cs_climb_all_rank_request, de: _decode_cs_climb_all_rank_request}
	export class cs_climb_curr_rank_request {
	}

	function _decode_cs_climb_curr_rank_request(d: SprotoTypeDeserialize) {
		let o = new cs_climb_curr_rank_request;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_cs_climb_curr_rank_request(self: cs_climb_curr_rank_request, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 0);

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["cs_climb_curr_rank_request"] = {en: _encode_cs_climb_curr_rank_request, de: _decode_cs_climb_curr_rank_request}
	export class cs_climb_get_reward_request {
	}

	function _decode_cs_climb_get_reward_request(d: SprotoTypeDeserialize) {
		let o = new cs_climb_get_reward_request;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_cs_climb_get_reward_request(self: cs_climb_get_reward_request, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 0);

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["cs_climb_get_reward_request"] = {en: _encode_cs_climb_get_reward_request, de: _decode_cs_climb_get_reward_request}
	export class cs_climb_leave_request {
	}

	function _decode_cs_climb_leave_request(d: SprotoTypeDeserialize) {
		let o = new cs_climb_leave_request;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_cs_climb_leave_request(self: cs_climb_leave_request, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 0);

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["cs_climb_leave_request"] = {en: _encode_cs_climb_leave_request, de: _decode_cs_climb_leave_request}
	export class cs_climb_leave_time_request {
	}

	function _decode_cs_climb_leave_time_request(d: SprotoTypeDeserialize) {
		let o = new cs_climb_leave_time_request;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_cs_climb_leave_time_request(self: cs_climb_leave_time_request, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 0);

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["cs_climb_leave_time_request"] = {en: _encode_cs_climb_leave_time_request, de: _decode_cs_climb_leave_time_request}
	export class cs_climb_leave_time_response {
		public time: number; // tag 0
	}

	function _decode_cs_climb_leave_time_response(d: SprotoTypeDeserialize) {
		let o = new cs_climb_leave_time_response;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.time = d.ri ();
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_cs_climb_leave_time_response(self: cs_climb_leave_time_response, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 1);

		if (self.time != undefined) {
			se.wi (self.time, 0);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["cs_climb_leave_time_response"] = {en: _encode_cs_climb_leave_time_response, de: _decode_cs_climb_leave_time_response}
	export class cs_crimb_join_request {
	}

	function _decode_cs_crimb_join_request(d: SprotoTypeDeserialize) {
		let o = new cs_crimb_join_request;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_cs_crimb_join_request(self: cs_crimb_join_request, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 0);

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["cs_crimb_join_request"] = {en: _encode_cs_crimb_join_request, de: _decode_cs_crimb_join_request}
	export class cs_crimb_join_response {
		public ret: boolean; // tag 0
	}

	function _decode_cs_crimb_join_response(d: SprotoTypeDeserialize) {
		let o = new cs_crimb_join_response;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.ret = d.rb ();
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_cs_crimb_join_response(self: cs_crimb_join_response, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 1);

		if (self.ret != undefined) {
			se.wb (self.ret, 0);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["cs_crimb_join_response"] = {en: _encode_cs_crimb_join_response, de: _decode_cs_crimb_join_response}
	export class cs_crimb_pk_request {
		public targetid: number; // tag 0
	}

	function _decode_cs_crimb_pk_request(d: SprotoTypeDeserialize) {
		let o = new cs_crimb_pk_request;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.targetid = d.ri ();
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_cs_crimb_pk_request(self: cs_crimb_pk_request, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 1);

		if (self.targetid != undefined) {
			se.wi (self.targetid, 0);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["cs_crimb_pk_request"] = {en: _encode_cs_crimb_pk_request, de: _decode_cs_crimb_pk_request}
}

