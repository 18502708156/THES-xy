// Generated by sprotodump. DO NOT EDIT!

namespace Sproto { 
	export class climb_mon {
		public id: number; // tag 0
		public x: number; // tag 1
		public y: number; // tag 2
		public monsterid: number; // tag 3
	}

	function _decode_climb_mon(d: SprotoTypeDeserialize) {
		let o = new climb_mon;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.id = d.ri ();
				break;
			case 1:
				o.x = d.ri ();
				break;
			case 2:
				o.y = d.ri ();
				break;
			case 3:
				o.monsterid = d.ri ();
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_climb_mon(self: climb_mon, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 4);

		if (self.id != undefined) {
			se.wi (self.id, 0);
		}

		if (self.x != undefined) {
			se.wi (self.x, 1);
		}

		if (self.y != undefined) {
			se.wi (self.y, 2);
		}

		if (self.monsterid != undefined) {
			se.wi (self.monsterid, 3);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["climb_mon"] = {en: _encode_climb_mon, de: _decode_climb_mon}
	export class climb_rank_data {
		public dbid: number; // tag 0
		public rank: number; // tag 1
		public serverid: number; // tag 2
		public name: string; // tag 3
		public score: number; // tag 4
	}

	function _decode_climb_rank_data(d: SprotoTypeDeserialize) {
		let o = new climb_rank_data;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.dbid = d.ri ();
				break;
			case 1:
				o.rank = d.ri ();
				break;
			case 2:
				o.serverid = d.ri ();
				break;
			case 3:
				o.name = d.rs ();
				break;
			case 4:
				o.score = d.ri ();
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_climb_rank_data(self: climb_rank_data, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 5);

		if (self.dbid != undefined) {
			se.wi (self.dbid, 0);
		}

		if (self.rank != undefined) {
			se.wi (self.rank, 1);
		}

		if (self.serverid != undefined) {
			se.wi (self.serverid, 2);
		}

		if (self.name != undefined) {
			se.ws (self.name, 3);
		}

		if (self.score != undefined) {
			se.wi (self.score, 4);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["climb_rank_data"] = {en: _encode_climb_rank_data, de: _decode_climb_rank_data}
	export class climb_report_sharedata {
		public shows: climb_shows; // tag 0
		public serverid: number; // tag 1
	}

	function _decode_climb_report_sharedata(d: SprotoTypeDeserialize) {
		let o = new climb_report_sharedata;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.shows = d.ro("climb_shows");
				break;
			case 1:
				o.serverid = d.ri ();
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_climb_report_sharedata(self: climb_report_sharedata, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 2);

		if (self.shows != undefined) {
			se.wo ("climb_shows", self.shows, 0);
		}

		if (self.serverid != undefined) {
			se.wi (self.serverid, 1);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["climb_report_sharedata"] = {en: _encode_climb_report_sharedata, de: _decode_climb_report_sharedata}
	export class climb_shows {
		public shows: number[]; // tag 0
		public job: number; // tag 1
		public sex: number; // tag 2
		public id: number; // tag 3
		public name: string; // tag 4
		public serverid: number; // tag 5
		public guildid: number; // tag 6
		public guildname: string; // tag 7
		public level: number; // tag 8
	}

	function _decode_climb_shows(d: SprotoTypeDeserialize) {
		let o = new climb_shows;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.shows = d.ria ();
				break;
			case 1:
				o.job = d.ri ();
				break;
			case 2:
				o.sex = d.ri ();
				break;
			case 3:
				o.id = d.ri ();
				break;
			case 4:
				o.name = d.rs ();
				break;
			case 5:
				o.serverid = d.ri ();
				break;
			case 6:
				o.guildid = d.ri ();
				break;
			case 7:
				o.guildname = d.rs ();
				break;
			case 8:
				o.level = d.ri ();
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_climb_shows(self: climb_shows, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 9);

		if (self.shows != undefined) {
			se.wia (self.shows, 0);
		}

		if (self.job != undefined) {
			se.wi (self.job, 1);
		}

		if (self.sex != undefined) {
			se.wi (self.sex, 2);
		}

		if (self.id != undefined) {
			se.wi (self.id, 3);
		}

		if (self.name != undefined) {
			se.ws (self.name, 4);
		}

		if (self.serverid != undefined) {
			se.wi (self.serverid, 5);
		}

		if (self.guildid != undefined) {
			se.wi (self.guildid, 6);
		}

		if (self.guildname != undefined) {
			se.ws (self.guildname, 7);
		}

		if (self.level != undefined) {
			se.wi (self.level, 8);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["climb_shows"] = {en: _encode_climb_shows, de: _decode_climb_shows}
	export class sc_climb_all_rank_request {
		public ranklist: climb_rank_data[]; // tag 0
		public job: number; // tag 1
		public sex: number; // tag 2
		public shows: number[]; // tag 3
	}

	function _decode_sc_climb_all_rank_request(d: SprotoTypeDeserialize) {
		let o = new sc_climb_all_rank_request;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.ranklist = d.roa("climb_rank_data");
				break;
			case 1:
				o.job = d.ri ();
				break;
			case 2:
				o.sex = d.ri ();
				break;
			case 3:
				o.shows = d.ria ();
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_sc_climb_all_rank_request(self: sc_climb_all_rank_request, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 4);

		if (self.ranklist != undefined) {
			se.woa ("climb_rank_data", self.ranklist, 0);
		}

		if (self.job != undefined) {
			se.wi (self.job, 1);
		}

		if (self.sex != undefined) {
			se.wi (self.sex, 2);
		}

		if (self.shows != undefined) {
			se.wia (self.shows, 3);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["sc_climb_all_rank_request"] = {en: _encode_sc_climb_all_rank_request, de: _decode_sc_climb_all_rank_request}
	export class sc_climb_curr_rank_request {
		public ranklist: climb_rank_data[]; // tag 0
		public king: number; // tag 1
	}

	function _decode_sc_climb_curr_rank_request(d: SprotoTypeDeserialize) {
		let o = new sc_climb_curr_rank_request;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.ranklist = d.roa("climb_rank_data");
				break;
			case 1:
				o.king = d.ri ();
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_sc_climb_curr_rank_request(self: sc_climb_curr_rank_request, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 2);

		if (self.ranklist != undefined) {
			se.woa ("climb_rank_data", self.ranklist, 0);
		}

		if (self.king != undefined) {
			se.wi (self.king, 1);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["sc_climb_curr_rank_request"] = {en: _encode_sc_climb_curr_rank_request, de: _decode_sc_climb_curr_rank_request}
	export class sc_climb_fighting_change_request {
		public dbid: number; // tag 0
		public isfighting: boolean; // tag 1
	}

	function _decode_sc_climb_fighting_change_request(d: SprotoTypeDeserialize) {
		let o = new sc_climb_fighting_change_request;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.dbid = d.ri ();
				break;
			case 1:
				o.isfighting = d.rb ();
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_sc_climb_fighting_change_request(self: sc_climb_fighting_change_request, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 2);

		if (self.dbid != undefined) {
			se.wi (self.dbid, 0);
		}

		if (self.isfighting != undefined) {
			se.wb (self.isfighting, 1);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["sc_climb_fighting_change_request"] = {en: _encode_sc_climb_fighting_change_request, de: _decode_sc_climb_fighting_change_request}
	export class sc_climb_info_request {
		public score: number; // tag 0
		public rewardsocre: number; // tag 1
		public fighting: number[]; // tag 2
		public monsters: climb_mon[]; // tag 3
		public king: number; // tag 4
	}

	function _decode_sc_climb_info_request(d: SprotoTypeDeserialize) {
		let o = new sc_climb_info_request;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.score = d.ri ();
				break;
			case 1:
				o.rewardsocre = d.ri ();
				break;
			case 2:
				o.fighting = d.ria ();
				break;
			case 3:
				o.monsters = d.roa("climb_mon");
				break;
			case 4:
				o.king = d.ri ();
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_sc_climb_info_request(self: sc_climb_info_request, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 5);

		if (self.score != undefined) {
			se.wi (self.score, 0);
		}

		if (self.rewardsocre != undefined) {
			se.wi (self.rewardsocre, 1);
		}

		if (self.fighting != undefined) {
			se.wia (self.fighting, 2);
		}

		if (self.monsters != undefined) {
			se.woa ("climb_mon", self.monsters, 3);
		}

		if (self.king != undefined) {
			se.wi (self.king, 4);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["sc_climb_info_request"] = {en: _encode_sc_climb_info_request, de: _decode_sc_climb_info_request}
	export class sc_climb_king_request {
		public dbid: number; // tag 0
	}

	function _decode_sc_climb_king_request(d: SprotoTypeDeserialize) {
		let o = new sc_climb_king_request;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.dbid = d.ri ();
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_sc_climb_king_request(self: sc_climb_king_request, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 1);

		if (self.dbid != undefined) {
			se.wi (self.dbid, 0);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["sc_climb_king_request"] = {en: _encode_sc_climb_king_request, de: _decode_sc_climb_king_request}
	export class sc_climb_refresh_mon_request {
		public monsters: climb_mon[]; // tag 0
		public flag: number; // tag 1
	}

	function _decode_sc_climb_refresh_mon_request(d: SprotoTypeDeserialize) {
		let o = new sc_climb_refresh_mon_request;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.monsters = d.roa("climb_mon");
				break;
			case 1:
				o.flag = d.ri ();
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_sc_climb_refresh_mon_request(self: sc_climb_refresh_mon_request, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 2);

		if (self.monsters != undefined) {
			se.woa ("climb_mon", self.monsters, 0);
		}

		if (self.flag != undefined) {
			se.wi (self.flag, 1);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["sc_climb_refresh_mon_request"] = {en: _encode_sc_climb_refresh_mon_request, de: _decode_sc_climb_refresh_mon_request}
	export class sc_climb_report_request {
		public rewards: reward_data[]; // tag 0
		public sharedata: climb_report_sharedata; // tag 1
	}

	function _decode_sc_climb_report_request(d: SprotoTypeDeserialize) {
		let o = new sc_climb_report_request;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.rewards = d.roa("reward_data");
				break;
			case 1:
				o.sharedata = d.ro("climb_report_sharedata");
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_sc_climb_report_request(self: sc_climb_report_request, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 2);

		if (self.rewards != undefined) {
			se.woa ("reward_data", self.rewards, 0);
		}

		if (self.sharedata != undefined) {
			se.wo ("climb_report_sharedata", self.sharedata, 1);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["sc_climb_report_request"] = {en: _encode_sc_climb_report_request, de: _decode_sc_climb_report_request}
	export class sc_climb_score_info_request {
		public score: number; // tag 0
		public rewardsocre: number; // tag 1
	}

	function _decode_sc_climb_score_info_request(d: SprotoTypeDeserialize) {
		let o = new sc_climb_score_info_request;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.score = d.ri ();
				break;
			case 1:
				o.rewardsocre = d.ri ();
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_sc_climb_score_info_request(self: sc_climb_score_info_request, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 2);

		if (self.score != undefined) {
			se.wi (self.score, 0);
		}

		if (self.rewardsocre != undefined) {
			se.wi (self.rewardsocre, 1);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["sc_climb_score_info_request"] = {en: _encode_sc_climb_score_info_request, de: _decode_sc_climb_score_info_request}
}

