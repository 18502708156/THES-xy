// Generated by sprotodump. DO NOT EDIT!

namespace Sproto { 
	export class cs_dailyTask_activity_find_request {
		public activityNo: number; // tag 0
		public cashtype: number; // tag 1
		public findType: number; // tag 2
		public num: number; // tag 3
	}

	function _decode_cs_dailyTask_activity_find_request(d: SprotoTypeDeserialize) {
		let o = new cs_dailyTask_activity_find_request;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.activityNo = d.ri ();
				break;
			case 1:
				o.cashtype = d.ri ();
				break;
			case 2:
				o.findType = d.ri ();
				break;
			case 3:
				o.num = d.ri ();
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_cs_dailyTask_activity_find_request(self: cs_dailyTask_activity_find_request, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 4);

		if (self.activityNo != undefined) {
			se.wi (self.activityNo, 0);
		}

		if (self.cashtype != undefined) {
			se.wi (self.cashtype, 1);
		}

		if (self.findType != undefined) {
			se.wi (self.findType, 2);
		}

		if (self.num != undefined) {
			se.wi (self.num, 3);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["cs_dailyTask_activity_find_request"] = {en: _encode_cs_dailyTask_activity_find_request, de: _decode_cs_dailyTask_activity_find_request}
	export class cs_dailyTask_activity_find_response {
		public ret: boolean; // tag 0
		public exp: number; // tag 1
		public activityNo: number; // tag 2
		public num: number; // tag 3
		public findType: number; // tag 4
		public findExpNum: number; // tag 5
	}

	function _decode_cs_dailyTask_activity_find_response(d: SprotoTypeDeserialize) {
		let o = new cs_dailyTask_activity_find_response;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.ret = d.rb ();
				break;
			case 1:
				o.exp = d.ri ();
				break;
			case 2:
				o.activityNo = d.ri ();
				break;
			case 3:
				o.num = d.ri ();
				break;
			case 4:
				o.findType = d.ri ();
				break;
			case 5:
				o.findExpNum = d.ri ();
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_cs_dailyTask_activity_find_response(self: cs_dailyTask_activity_find_response, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 6);

		if (self.ret != undefined) {
			se.wb (self.ret, 0);
		}

		if (self.exp != undefined) {
			se.wi (self.exp, 1);
		}

		if (self.activityNo != undefined) {
			se.wi (self.activityNo, 2);
		}

		if (self.num != undefined) {
			se.wi (self.num, 3);
		}

		if (self.findType != undefined) {
			se.wi (self.findType, 4);
		}

		if (self.findExpNum != undefined) {
			se.wi (self.findExpNum, 5);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["cs_dailyTask_activity_find_response"] = {en: _encode_cs_dailyTask_activity_find_response, de: _decode_cs_dailyTask_activity_find_response}
	export class cs_dailyTask_activity_find_all_exp_request {
	}

	function _decode_cs_dailyTask_activity_find_all_exp_request(d: SprotoTypeDeserialize) {
		let o = new cs_dailyTask_activity_find_all_exp_request;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_cs_dailyTask_activity_find_all_exp_request(self: cs_dailyTask_activity_find_all_exp_request, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 0);

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["cs_dailyTask_activity_find_all_exp_request"] = {en: _encode_cs_dailyTask_activity_find_all_exp_request, de: _decode_cs_dailyTask_activity_find_all_exp_request}
	export class cs_dailyTask_activity_find_all_exp_response {
		public ret: boolean; // tag 0
		public findExpNum: number; // tag 1
	}

	function _decode_cs_dailyTask_activity_find_all_exp_response(d: SprotoTypeDeserialize) {
		let o = new cs_dailyTask_activity_find_all_exp_response;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.ret = d.rb ();
				break;
			case 1:
				o.findExpNum = d.ri ();
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_cs_dailyTask_activity_find_all_exp_response(self: cs_dailyTask_activity_find_all_exp_response, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 2);

		if (self.ret != undefined) {
			se.wb (self.ret, 0);
		}

		if (self.findExpNum != undefined) {
			se.wi (self.findExpNum, 1);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["cs_dailyTask_activity_find_all_exp_response"] = {en: _encode_cs_dailyTask_activity_find_all_exp_response, de: _decode_cs_dailyTask_activity_find_all_exp_response}
	export class cs_dailyTask_activity_reward_request {
		public rewardNo: number; // tag 0
	}

	function _decode_cs_dailyTask_activity_reward_request(d: SprotoTypeDeserialize) {
		let o = new cs_dailyTask_activity_reward_request;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.rewardNo = d.ri ();
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_cs_dailyTask_activity_reward_request(self: cs_dailyTask_activity_reward_request, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 1);

		if (self.rewardNo != undefined) {
			se.wi (self.rewardNo, 0);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["cs_dailyTask_activity_reward_request"] = {en: _encode_cs_dailyTask_activity_reward_request, de: _decode_cs_dailyTask_activity_reward_request}
	export class cs_dailyTask_activity_reward_response {
		public ret: boolean; // tag 0
		public activityReward: number; // tag 1
	}

	function _decode_cs_dailyTask_activity_reward_response(d: SprotoTypeDeserialize) {
		let o = new cs_dailyTask_activity_reward_response;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.ret = d.rb ();
				break;
			case 1:
				o.activityReward = d.ri ();
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_cs_dailyTask_activity_reward_response(self: cs_dailyTask_activity_reward_response, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 2);

		if (self.ret != undefined) {
			se.wb (self.ret, 0);
		}

		if (self.activityReward != undefined) {
			se.wi (self.activityReward, 1);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["cs_dailyTask_activity_reward_response"] = {en: _encode_cs_dailyTask_activity_reward_response, de: _decode_cs_dailyTask_activity_reward_response}
	export class cs_dailyTask_otherActivity_complete_request {
		public otherActivity: number; // tag 0
	}

	function _decode_cs_dailyTask_otherActivity_complete_request(d: SprotoTypeDeserialize) {
		let o = new cs_dailyTask_otherActivity_complete_request;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.otherActivity = d.ri ();
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_cs_dailyTask_otherActivity_complete_request(self: cs_dailyTask_otherActivity_complete_request, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 1);

		if (self.otherActivity != undefined) {
			se.wi (self.otherActivity, 0);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["cs_dailyTask_otherActivity_complete_request"] = {en: _encode_cs_dailyTask_otherActivity_complete_request, de: _decode_cs_dailyTask_otherActivity_complete_request}
	export class cs_dailyTask_otherActivity_monster_request {
		public no: number; // tag 0
	}

	function _decode_cs_dailyTask_otherActivity_monster_request(d: SprotoTypeDeserialize) {
		let o = new cs_dailyTask_otherActivity_monster_request;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.no = d.ri ();
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_cs_dailyTask_otherActivity_monster_request(self: cs_dailyTask_otherActivity_monster_request, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 1);

		if (self.no != undefined) {
			se.wi (self.no, 0);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["cs_dailyTask_otherActivity_monster_request"] = {en: _encode_cs_dailyTask_otherActivity_monster_request, de: _decode_cs_dailyTask_otherActivity_monster_request}
	export class cs_dailyTask_otherActivity_reward_request {
		public otherActivity: number; // tag 0
		public reward: number; // tag 1
	}

	function _decode_cs_dailyTask_otherActivity_reward_request(d: SprotoTypeDeserialize) {
		let o = new cs_dailyTask_otherActivity_reward_request;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.otherActivity = d.ri ();
				break;
			case 1:
				o.reward = d.ri ();
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_cs_dailyTask_otherActivity_reward_request(self: cs_dailyTask_otherActivity_reward_request, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 2);

		if (self.otherActivity != undefined) {
			se.wi (self.otherActivity, 0);
		}

		if (self.reward != undefined) {
			se.wi (self.reward, 1);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["cs_dailyTask_otherActivity_reward_request"] = {en: _encode_cs_dailyTask_otherActivity_reward_request, de: _decode_cs_dailyTask_otherActivity_reward_request}
	export class cs_dailyTask_up_level_request {
	}

	function _decode_cs_dailyTask_up_level_request(d: SprotoTypeDeserialize) {
		let o = new cs_dailyTask_up_level_request;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_cs_dailyTask_up_level_request(self: cs_dailyTask_up_level_request, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 0);

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["cs_dailyTask_up_level_request"] = {en: _encode_cs_dailyTask_up_level_request, de: _decode_cs_dailyTask_up_level_request}
	export class cs_dailyTask_up_level_response {
		public ret: boolean; // tag 0
		public lv: number; // tag 1
		public exp: number; // tag 2
	}

	function _decode_cs_dailyTask_up_level_response(d: SprotoTypeDeserialize) {
		let o = new cs_dailyTask_up_level_response;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.ret = d.rb ();
				break;
			case 1:
				o.lv = d.ri ();
				break;
			case 2:
				o.exp = d.ri ();
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_cs_dailyTask_up_level_response(self: cs_dailyTask_up_level_response, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 3);

		if (self.ret != undefined) {
			se.wb (self.ret, 0);
		}

		if (self.lv != undefined) {
			se.wi (self.lv, 1);
		}

		if (self.exp != undefined) {
			se.wi (self.exp, 2);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["cs_dailyTask_up_level_response"] = {en: _encode_cs_dailyTask_up_level_response, de: _decode_cs_dailyTask_up_level_response}
	export class cs_dailyTask_up_monster_request {
		public no: number; // tag 0
	}

	function _decode_cs_dailyTask_up_monster_request(d: SprotoTypeDeserialize) {
		let o = new cs_dailyTask_up_monster_request;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.no = d.ri ();
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_cs_dailyTask_up_monster_request(self: cs_dailyTask_up_monster_request, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 1);

		if (self.no != undefined) {
			se.wi (self.no, 0);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["cs_dailyTask_up_monster_request"] = {en: _encode_cs_dailyTask_up_monster_request, de: _decode_cs_dailyTask_up_monster_request}
}

