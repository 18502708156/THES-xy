// Generated by sprotodump. DO NOT EDIT!

namespace Sproto { 
	export class actor_die_notice_request {
	}

	function _decode_actor_die_notice_request(d: SprotoTypeDeserialize) {
		let o = new actor_die_notice_request;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_actor_die_notice_request(self: actor_die_notice_request, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 0);

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["actor_die_notice_request"] = {en: _encode_actor_die_notice_request, de: _decode_actor_die_notice_request}
	export class blood_update_request {
		public handle: number; // tag 0
		public hp: number; // tag 1
		public dhp: number; // tag 2
		public showType: number; // tag 3
	}

	function _decode_blood_update_request(d: SprotoTypeDeserialize) {
		let o = new blood_update_request;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.handle = d.ri ();
				break;
			case 1:
				o.hp = d.ri ();
				break;
			case 2:
				o.dhp = d.ri ();
				break;
			case 3:
				o.showType = d.ri ();
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_blood_update_request(self: blood_update_request, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 4);

		if (self.handle != undefined) {
			se.wi (self.handle, 0);
		}

		if (self.hp != undefined) {
			se.wi (self.hp, 1);
		}

		if (self.dhp != undefined) {
			se.wi (self.dhp, 2);
		}

		if (self.showType != undefined) {
			se.wi (self.showType, 3);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["blood_update_request"] = {en: _encode_blood_update_request, de: _decode_blood_update_request}
	export class entity_model_base {
		public type: number; // tag 0
		public handle: number; // tag 1
		public configID: number; // tag 2
		public masterHandle: number; // tag 3
		public x: number; // tag 4
		public y: number; // tag 5
	}

	function _decode_entity_model_base(d: SprotoTypeDeserialize) {
		let o = new entity_model_base;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.type = d.ri ();
				break;
			case 1:
				o.handle = d.ri ();
				break;
			case 2:
				o.configID = d.ri ();
				break;
			case 3:
				o.masterHandle = d.ri ();
				break;
			case 4:
				o.x = d.ri ();
				break;
			case 5:
				o.y = d.ri ();
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_entity_model_base(self: entity_model_base, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 6);

		if (self.type != undefined) {
			se.wi (self.type, 0);
		}

		if (self.handle != undefined) {
			se.wi (self.handle, 1);
		}

		if (self.configID != undefined) {
			se.wi (self.configID, 2);
		}

		if (self.masterHandle != undefined) {
			se.wi (self.masterHandle, 3);
		}

		if (self.x != undefined) {
			se.wi (self.x, 4);
		}

		if (self.y != undefined) {
			se.wi (self.y, 5);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["entity_model_base"] = {en: _encode_entity_model_base, de: _decode_entity_model_base}
	export class entity_mp_update_request {
		public handle: number; // tag 0
		public mp: number; // tag 1
		public playEff: boolean; // tag 3
	}

	function _decode_entity_mp_update_request(d: SprotoTypeDeserialize) {
		let o = new entity_mp_update_request;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.handle = d.ri ();
				break;
			case 1:
				o.mp = d.ri ();
				break;
			case 3:
				o.playEff = d.rb ();
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_entity_mp_update_request(self: entity_mp_update_request, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 4);

		if (self.handle != undefined) {
			se.wi (self.handle, 0);
		}

		if (self.mp != undefined) {
			se.wi (self.mp, 1);
		}

		if (self.playEff != undefined) {
			se.wb (self.playEff, 3);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["entity_mp_update_request"] = {en: _encode_entity_mp_update_request, de: _decode_entity_mp_update_request}
	export class exp_change_request {
		public level: number; // tag 0
		public exp: number; // tag 1
		public upexp: number; // tag 2
	}

	function _decode_exp_change_request(d: SprotoTypeDeserialize) {
		let o = new exp_change_request;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.level = d.ri ();
				break;
			case 1:
				o.exp = d.ri ();
				break;
			case 2:
				o.upexp = d.ri ();
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_exp_change_request(self: exp_change_request, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 3);

		if (self.level != undefined) {
			se.wi (self.level, 0);
		}

		if (self.exp != undefined) {
			se.wi (self.exp, 1);
		}

		if (self.upexp != undefined) {
			se.wi (self.upexp, 2);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["exp_change_request"] = {en: _encode_exp_change_request, de: _decode_exp_change_request}
	export class fb_clear_count {
		public level: number; // tag 0
		public count: number; // tag 1
	}

	function _decode_fb_clear_count(d: SprotoTypeDeserialize) {
		let o = new fb_clear_count;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.level = d.ri ();
				break;
			case 1:
				o.count = d.ri ();
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_fb_clear_count(self: fb_clear_count, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 2);

		if (self.level != undefined) {
			se.wi (self.level, 0);
		}

		if (self.count != undefined) {
			se.wi (self.count, 1);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["fb_clear_count"] = {en: _encode_fb_clear_count, de: _decode_fb_clear_count}
	export class first_register_request {
	}

	function _decode_first_register_request(d: SprotoTypeDeserialize) {
		let o = new first_register_request;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_first_register_request(self: first_register_request, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 0);

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["first_register_request"] = {en: _encode_first_register_request, de: _decode_first_register_request}
	export class gold_change_request {
		public type: number; // tag 0
		public value: number; // tag 1
	}

	function _decode_gold_change_request(d: SprotoTypeDeserialize) {
		let o = new gold_change_request;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.type = d.ri ();
				break;
			case 1:
				o.value = d.ri ();
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_gold_change_request(self: gold_change_request, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 2);

		if (self.type != undefined) {
			se.wi (self.type, 0);
		}

		if (self.value != undefined) {
			se.wi (self.value, 1);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["gold_change_request"] = {en: _encode_gold_change_request, de: _decode_gold_change_request}
	export class move_entity_request {
		public handle: number; // tag 0
		public endX: number; // tag 1
		public endY: number; // tag 2
	}

	function _decode_move_entity_request(d: SprotoTypeDeserialize) {
		let o = new move_entity_request;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.handle = d.ri ();
				break;
			case 1:
				o.endX = d.ri ();
				break;
			case 2:
				o.endY = d.ri ();
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_move_entity_request(self: move_entity_request, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 3);

		if (self.handle != undefined) {
			se.wi (self.handle, 0);
		}

		if (self.endX != undefined) {
			se.wi (self.endX, 1);
		}

		if (self.endY != undefined) {
			se.wi (self.endY, 2);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["move_entity_request"] = {en: _encode_move_entity_request, de: _decode_move_entity_request}
	export class player_guild_change_request {
		public guildID: number; // tag 0
		public guildName: string; // tag 1
	}

	function _decode_player_guild_change_request(d: SprotoTypeDeserialize) {
		let o = new player_guild_change_request;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.guildID = d.ri ();
				break;
			case 1:
				o.guildName = d.rs ();
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_player_guild_change_request(self: player_guild_change_request, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 2);

		if (self.guildID != undefined) {
			se.wi (self.guildID, 0);
		}

		if (self.guildName != undefined) {
			se.ws (self.guildName, 1);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["player_guild_change_request"] = {en: _encode_player_guild_change_request, de: _decode_player_guild_change_request}
	export class record_data {
		public name: string; // tag 0
		public itemid: number; // tag 1
		public count: number; // tag 2
		public type: number; // tag 3
		public str: string; // tag 4
		public time: number; // tag 5
		public id: number; // tag 6
		public serverid: number; // tag 7
		public job: number; // tag 8
		public sex: number; // tag 9
		public vip: number; // tag 10
	}

	function _decode_record_data(d: SprotoTypeDeserialize) {
		let o = new record_data;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.name = d.rs ();
				break;
			case 1:
				o.itemid = d.ri ();
				break;
			case 2:
				o.count = d.ri ();
				break;
			case 3:
				o.type = d.ri ();
				break;
			case 4:
				o.str = d.rs ();
				break;
			case 5:
				o.time = d.ri ();
				break;
			case 6:
				o.id = d.ri ();
				break;
			case 7:
				o.serverid = d.ri ();
				break;
			case 8:
				o.job = d.ri ();
				break;
			case 9:
				o.sex = d.ri ();
				break;
			case 10:
				o.vip = d.ri ();
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_record_data(self: record_data, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 11);

		if (self.name != undefined) {
			se.ws (self.name, 0);
		}

		if (self.itemid != undefined) {
			se.wi (self.itemid, 1);
		}

		if (self.count != undefined) {
			se.wi (self.count, 2);
		}

		if (self.type != undefined) {
			se.wi (self.type, 3);
		}

		if (self.str != undefined) {
			se.ws (self.str, 4);
		}

		if (self.time != undefined) {
			se.wi (self.time, 5);
		}

		if (self.id != undefined) {
			se.wi (self.id, 6);
		}

		if (self.serverid != undefined) {
			se.wi (self.serverid, 7);
		}

		if (self.job != undefined) {
			se.wi (self.job, 8);
		}

		if (self.sex != undefined) {
			se.wi (self.sex, 9);
		}

		if (self.vip != undefined) {
			se.wi (self.vip, 10);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["record_data"] = {en: _encode_record_data, de: _decode_record_data}
	export class remove_entity_request {
		public handle: number; // tag 0
		public type: number; // tag 1
	}

	function _decode_remove_entity_request(d: SprotoTypeDeserialize) {
		let o = new remove_entity_request;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.handle = d.ri ();
				break;
			case 1:
				o.type = d.ri ();
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_remove_entity_request(self: remove_entity_request, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 2);

		if (self.handle != undefined) {
			se.wi (self.handle, 0);
		}

		if (self.type != undefined) {
			se.wi (self.type, 1);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["remove_entity_request"] = {en: _encode_remove_entity_request, de: _decode_remove_entity_request}
	export class sc_accu_login_request {
		public count: number; // tag 0
		public record: number; // tag 1
	}

	function _decode_sc_accu_login_request(d: SprotoTypeDeserialize) {
		let o = new sc_accu_login_request;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.count = d.ri ();
				break;
			case 1:
				o.record = d.ri ();
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_sc_accu_login_request(self: sc_accu_login_request, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 2);

		if (self.count != undefined) {
			se.wi (self.count, 0);
		}

		if (self.record != undefined) {
			se.wi (self.record, 1);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["sc_accu_login_request"] = {en: _encode_sc_accu_login_request, de: _decode_sc_accu_login_request}
	export class sc_actor_base_request {
		public handle: number; // tag 0
		public actorid: number; // tag 1
		public serverid: number; // tag 2
		public actorname: string; // tag 3
		public job: number; // tag 4
		public sex: number; // tag 5
		public level: number; // tag 6
		public exp: number; // tag 7
		public power: number; // tag 8
		public gold: number; // tag 9
		public yuanbao: number; // tag 10
		public byb: number; // tag 11
		public contrib: number; // tag 12
		public vip: number; // tag 13
		public bagnum: number; // tag 14
		public clientvalue: number; // tag 15
		public clientvaluelist: number[]; // tag 16
		public guildid: number; // tag 17
		public guildname: string; // tag 18
		public friendcoin: number; // tag 19
	}

	function _decode_sc_actor_base_request(d: SprotoTypeDeserialize) {
		let o = new sc_actor_base_request;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.handle = d.ri ();
				break;
			case 1:
				o.actorid = d.ri ();
				break;
			case 2:
				o.serverid = d.ri ();
				break;
			case 3:
				o.actorname = d.rs ();
				break;
			case 4:
				o.job = d.ri ();
				break;
			case 5:
				o.sex = d.ri ();
				break;
			case 6:
				o.level = d.ri ();
				break;
			case 7:
				o.exp = d.ri ();
				break;
			case 8:
				o.power = d.ri ();
				break;
			case 9:
				o.gold = d.ri ();
				break;
			case 10:
				o.yuanbao = d.ri ();
				break;
			case 11:
				o.byb = d.ri ();
				break;
			case 12:
				o.contrib = d.ri ();
				break;
			case 13:
				o.vip = d.ri ();
				break;
			case 14:
				o.bagnum = d.ri ();
				break;
			case 15:
				o.clientvalue = d.ri ();
				break;
			case 16:
				o.clientvaluelist = d.ria ();
				break;
			case 17:
				o.guildid = d.ri ();
				break;
			case 18:
				o.guildname = d.rs ();
				break;
			case 19:
				o.friendcoin = d.ri ();
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_sc_actor_base_request(self: sc_actor_base_request, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 20);

		if (self.handle != undefined) {
			se.wi (self.handle, 0);
		}

		if (self.actorid != undefined) {
			se.wi (self.actorid, 1);
		}

		if (self.serverid != undefined) {
			se.wi (self.serverid, 2);
		}

		if (self.actorname != undefined) {
			se.ws (self.actorname, 3);
		}

		if (self.job != undefined) {
			se.wi (self.job, 4);
		}

		if (self.sex != undefined) {
			se.wi (self.sex, 5);
		}

		if (self.level != undefined) {
			se.wi (self.level, 6);
		}

		if (self.exp != undefined) {
			se.wi (self.exp, 7);
		}

		if (self.power != undefined) {
			se.wi (self.power, 8);
		}

		if (self.gold != undefined) {
			se.wi (self.gold, 9);
		}

		if (self.yuanbao != undefined) {
			se.wi (self.yuanbao, 10);
		}

		if (self.byb != undefined) {
			se.wi (self.byb, 11);
		}

		if (self.contrib != undefined) {
			se.wi (self.contrib, 12);
		}

		if (self.vip != undefined) {
			se.wi (self.vip, 13);
		}

		if (self.bagnum != undefined) {
			se.wi (self.bagnum, 14);
		}

		if (self.clientvalue != undefined) {
			se.wi (self.clientvalue, 15);
		}

		if (self.clientvaluelist != undefined) {
			se.wia (self.clientvaluelist, 16);
		}

		if (self.guildid != undefined) {
			se.wi (self.guildid, 17);
		}

		if (self.guildname != undefined) {
			se.ws (self.guildname, 18);
		}

		if (self.friendcoin != undefined) {
			se.wi (self.friendcoin, 19);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["sc_actor_base_request"] = {en: _encode_sc_actor_base_request, de: _decode_sc_actor_base_request}
	export class sc_cross_team_reward_count_request {
		public count: number; // tag 0
		public clear: fb_clear_count[]; // tag 1
	}

	function _decode_sc_cross_team_reward_count_request(d: SprotoTypeDeserialize) {
		let o = new sc_cross_team_reward_count_request;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.count = d.ri ();
				break;
			case 1:
				o.clear = d.roa("fb_clear_count");
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_sc_cross_team_reward_count_request(self: sc_cross_team_reward_count_request, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 2);

		if (self.count != undefined) {
			se.wi (self.count, 0);
		}

		if (self.clear != undefined) {
			se.woa ("fb_clear_count", self.clear, 1);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["sc_cross_team_reward_count_request"] = {en: _encode_sc_cross_team_reward_count_request, de: _decode_sc_cross_team_reward_count_request}
	export class sc_other_equip_request {
		public data: equip_data; // tag 0
		public slot: number; // tag 1
	}

	function _decode_sc_other_equip_request(d: SprotoTypeDeserialize) {
		let o = new sc_other_equip_request;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.data = d.ro("equip_data");
				break;
			case 1:
				o.slot = d.ri ();
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_sc_other_equip_request(self: sc_other_equip_request, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 2);

		if (self.data != undefined) {
			se.wo ("equip_data", self.data, 0);
		}

		if (self.slot != undefined) {
			se.wi (self.slot, 1);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["sc_other_equip_request"] = {en: _encode_sc_other_equip_request, de: _decode_sc_other_equip_request}
	export class sc_other_item_request {
		public data: item_data; // tag 0
		public itemhandle: number; // tag 1
	}

	function _decode_sc_other_item_request(d: SprotoTypeDeserialize) {
		let o = new sc_other_item_request;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.data = d.ro("item_data");
				break;
			case 1:
				o.itemhandle = d.ri ();
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_sc_other_item_request(self: sc_other_item_request, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 2);

		if (self.data != undefined) {
			se.wo ("item_data", self.data, 0);
		}

		if (self.itemhandle != undefined) {
			se.wi (self.itemhandle, 1);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["sc_other_item_request"] = {en: _encode_sc_other_item_request, de: _decode_sc_other_item_request}
	export class sc_other_xianlv_request {
		public id: number; // tag 0
		public level: number; // tag 1
		public star: number; // tag 2
	}

	function _decode_sc_other_xianlv_request(d: SprotoTypeDeserialize) {
		let o = new sc_other_xianlv_request;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.id = d.ri ();
				break;
			case 1:
				o.level = d.ri ();
				break;
			case 2:
				o.star = d.ri ();
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_sc_other_xianlv_request(self: sc_other_xianlv_request, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 3);

		if (self.id != undefined) {
			se.wi (self.id, 0);
		}

		if (self.level != undefined) {
			se.wi (self.level, 1);
		}

		if (self.star != undefined) {
			se.wi (self.star, 2);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["sc_other_xianlv_request"] = {en: _encode_sc_other_xianlv_request, de: _decode_sc_other_xianlv_request}
	export class sc_rank_worship_request {
		public status: number; // tag 0
	}

	function _decode_sc_rank_worship_request(d: SprotoTypeDeserialize) {
		let o = new sc_rank_worship_request;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.status = d.ri ();
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_sc_rank_worship_request(self: sc_rank_worship_request, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 1);

		if (self.status != undefined) {
			se.wi (self.status, 0);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["sc_rank_worship_request"] = {en: _encode_sc_rank_worship_request, de: _decode_sc_rank_worship_request}
	export class sc_recharge_count_request {
		public total: number; // tag 0
		public today: number; // tag 1
	}

	function _decode_sc_recharge_count_request(d: SprotoTypeDeserialize) {
		let o = new sc_recharge_count_request;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.total = d.ri ();
				break;
			case 1:
				o.today = d.ri ();
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_sc_recharge_count_request(self: sc_recharge_count_request, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 2);

		if (self.total != undefined) {
			se.wi (self.total, 0);
		}

		if (self.today != undefined) {
			se.wi (self.today, 1);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["sc_recharge_count_request"] = {en: _encode_sc_recharge_count_request, de: _decode_sc_recharge_count_request}
	export class sc_record_add_request {
		public type: number; // tag 0
		public record: record_data; // tag 1
	}

	function _decode_sc_record_add_request(d: SprotoTypeDeserialize) {
		let o = new sc_record_add_request;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.type = d.ri ();
				break;
			case 1:
				o.record = d.ro("record_data");
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_sc_record_add_request(self: sc_record_add_request, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 2);

		if (self.type != undefined) {
			se.wi (self.type, 0);
		}

		if (self.record != undefined) {
			se.wo ("record_data", self.record, 1);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["sc_record_add_request"] = {en: _encode_sc_record_add_request, de: _decode_sc_record_add_request}
	export class sc_record_datas_request {
		public type: number; // tag 0
		public record: record_data[]; // tag 1
	}

	function _decode_sc_record_datas_request(d: SprotoTypeDeserialize) {
		let o = new sc_record_datas_request;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.type = d.ri ();
				break;
			case 1:
				o.record = d.roa("record_data");
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_sc_record_datas_request(self: sc_record_datas_request, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 2);

		if (self.type != undefined) {
			se.wi (self.type, 0);
		}

		if (self.record != undefined) {
			se.woa ("record_data", self.record, 1);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["sc_record_datas_request"] = {en: _encode_sc_record_datas_request, de: _decode_sc_record_datas_request}
	export class sc_rename_count_request {
		public count: number; // tag 0
	}

	function _decode_sc_rename_count_request(d: SprotoTypeDeserialize) {
		let o = new sc_rename_count_request;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.count = d.ri ();
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_sc_rename_count_request(self: sc_rename_count_request, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 1);

		if (self.count != undefined) {
			se.wi (self.count, 0);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["sc_rename_count_request"] = {en: _encode_sc_rename_count_request, de: _decode_sc_rename_count_request}
	export class sc_rename_result_request {
		public result: number; // tag 0
		public name: string; // tag 1
	}

	function _decode_sc_rename_result_request(d: SprotoTypeDeserialize) {
		let o = new sc_rename_result_request;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.result = d.ri ();
				break;
			case 1:
				o.name = d.rs ();
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_sc_rename_result_request(self: sc_rename_result_request, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 2);

		if (self.result != undefined) {
			se.wi (self.result, 0);
		}

		if (self.name != undefined) {
			se.ws (self.name, 1);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["sc_rename_result_request"] = {en: _encode_sc_rename_result_request, de: _decode_sc_rename_result_request}
	export class sc_show_other_pet_request {
		public pet: pet_info; // tag 0
		public petid: number; // tag 1
	}

	function _decode_sc_show_other_pet_request(d: SprotoTypeDeserialize) {
		let o = new sc_show_other_pet_request;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.pet = d.ro("pet_info");
				break;
			case 1:
				o.petid = d.ri ();
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_sc_show_other_pet_request(self: sc_show_other_pet_request, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 2);

		if (self.pet != undefined) {
			se.wo ("pet_info", self.pet, 0);
		}

		if (self.petid != undefined) {
			se.wi (self.petid, 1);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["sc_show_other_pet_request"] = {en: _encode_sc_show_other_pet_request, de: _decode_sc_show_other_pet_request}
	export class sc_show_other_player_request {
		public id: number; // tag 0
		public name: string; // tag 1
		public level: number; // tag 2
		public job: number; // tag 3
		public sex: number; // tag 4
		public power: number; // tag 5
		public vip: number; // tag 6
		public guildName: string; // tag 7
		public partner: string; // tag 8
		public petList: number[]; // tag 9
		public xianlvList: number[]; // tag 10
		public shows: number[]; // tag 11
		public attributeData: number[]; // tag 12
		public equipsData: equip_data[]; // tag 13
		public headframe: number; // tag 14
	}

	function _decode_sc_show_other_player_request(d: SprotoTypeDeserialize) {
		let o = new sc_show_other_player_request;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.id = d.ri ();
				break;
			case 1:
				o.name = d.rs ();
				break;
			case 2:
				o.level = d.ri ();
				break;
			case 3:
				o.job = d.ri ();
				break;
			case 4:
				o.sex = d.ri ();
				break;
			case 5:
				o.power = d.ri ();
				break;
			case 6:
				o.vip = d.ri ();
				break;
			case 7:
				o.guildName = d.rs ();
				break;
			case 8:
				o.partner = d.rs ();
				break;
			case 9:
				o.petList = d.ria ();
				break;
			case 10:
				o.xianlvList = d.ria ();
				break;
			case 11:
				o.shows = d.ria ();
				break;
			case 12:
				o.attributeData = d.ria ();
				break;
			case 13:
				o.equipsData = d.roa("equip_data");
				break;
			case 14:
				o.headframe = d.ri ();
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_sc_show_other_player_request(self: sc_show_other_player_request, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 15);

		if (self.id != undefined) {
			se.wi (self.id, 0);
		}

		if (self.name != undefined) {
			se.ws (self.name, 1);
		}

		if (self.level != undefined) {
			se.wi (self.level, 2);
		}

		if (self.job != undefined) {
			se.wi (self.job, 3);
		}

		if (self.sex != undefined) {
			se.wi (self.sex, 4);
		}

		if (self.power != undefined) {
			se.wi (self.power, 5);
		}

		if (self.vip != undefined) {
			se.wi (self.vip, 6);
		}

		if (self.guildName != undefined) {
			se.ws (self.guildName, 7);
		}

		if (self.partner != undefined) {
			se.ws (self.partner, 8);
		}

		if (self.petList != undefined) {
			se.wia (self.petList, 9);
		}

		if (self.xianlvList != undefined) {
			se.wia (self.xianlvList, 10);
		}

		if (self.shows != undefined) {
			se.wia (self.shows, 11);
		}

		if (self.attributeData != undefined) {
			se.wia (self.attributeData, 12);
		}

		if (self.equipsData != undefined) {
			se.woa ("equip_data", self.equipsData, 13);
		}

		if (self.headframe != undefined) {
			se.wi (self.headframe, 14);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["sc_show_other_player_request"] = {en: _encode_sc_show_other_player_request, de: _decode_sc_show_other_player_request}
	export class sc_show_other_spellsRes_request {
		public spellsNo: number; // tag 0
		public lv: number; // tag 1
	}

	function _decode_sc_show_other_spellsRes_request(d: SprotoTypeDeserialize) {
		let o = new sc_show_other_spellsRes_request;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.spellsNo = d.ri ();
				break;
			case 1:
				o.lv = d.ri ();
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_sc_show_other_spellsRes_request(self: sc_show_other_spellsRes_request, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 2);

		if (self.spellsNo != undefined) {
			se.wi (self.spellsNo, 0);
		}

		if (self.lv != undefined) {
			se.wi (self.lv, 1);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["sc_show_other_spellsRes_request"] = {en: _encode_sc_show_other_spellsRes_request, de: _decode_sc_show_other_spellsRes_request}
	export class sc_show_rank_player_request {
		public playerData: actor_base_data; // tag 0
		public roleList: role_data[]; // tag 1
	}

	function _decode_sc_show_rank_player_request(d: SprotoTypeDeserialize) {
		let o = new sc_show_rank_player_request;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.playerData = d.ro("actor_base_data");
				break;
			case 1:
				o.roleList = d.roa("role_data");
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_sc_show_rank_player_request(self: sc_show_rank_player_request, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 2);

		if (self.playerData != undefined) {
			se.wo ("actor_base_data", self.playerData, 0);
		}

		if (self.roleList != undefined) {
			se.woa ("role_data", self.roleList, 1);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["sc_show_rank_player_request"] = {en: _encode_sc_show_rank_player_request, de: _decode_sc_show_rank_player_request}
	export class sc_welcome_request {
	}

	function _decode_sc_welcome_request(d: SprotoTypeDeserialize) {
		let o = new sc_welcome_request;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_sc_welcome_request(self: sc_welcome_request, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 0);

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["sc_welcome_request"] = {en: _encode_sc_welcome_request, de: _decode_sc_welcome_request}
	export class show_server_tip_request {
		public type: number; // tag 0
	}

	function _decode_show_server_tip_request(d: SprotoTypeDeserialize) {
		let o = new show_server_tip_request;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.type = d.ri ();
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_show_server_tip_request(self: show_server_tip_request, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 1);

		if (self.type != undefined) {
			se.wi (self.type, 0);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["show_server_tip_request"] = {en: _encode_show_server_tip_request, de: _decode_show_server_tip_request}
	export class stop_move_entity_request {
		public handle: number; // tag 0
		public endX: number; // tag 1
		public endY: number; // tag 2
	}

	function _decode_stop_move_entity_request(d: SprotoTypeDeserialize) {
		let o = new stop_move_entity_request;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.handle = d.ri ();
				break;
			case 1:
				o.endX = d.ri ();
				break;
			case 2:
				o.endY = d.ri ();
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_stop_move_entity_request(self: stop_move_entity_request, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 3);

		if (self.handle != undefined) {
			se.wi (self.handle, 0);
		}

		if (self.endX != undefined) {
			se.wi (self.endX, 1);
		}

		if (self.endY != undefined) {
			se.wi (self.endY, 2);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["stop_move_entity_request"] = {en: _encode_stop_move_entity_request, de: _decode_stop_move_entity_request}
	export class sub_role_att_change_request {
		public roleID: number; // tag 0
		public attributeData: number[]; // tag 1
		public power: number; // tag 2
	}

	function _decode_sub_role_att_change_request(d: SprotoTypeDeserialize) {
		let o = new sub_role_att_change_request;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.roleID = d.ri ();
				break;
			case 1:
				o.attributeData = d.ria ();
				break;
			case 2:
				o.power = d.ri ();
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_sub_role_att_change_request(self: sub_role_att_change_request, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 3);

		if (self.roleID != undefined) {
			se.wi (self.roleID, 0);
		}

		if (self.attributeData != undefined) {
			se.wia (self.attributeData, 1);
		}

		if (self.power != undefined) {
			se.wi (self.power, 2);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["sub_role_att_change_request"] = {en: _encode_sub_role_att_change_request, de: _decode_sub_role_att_change_request}
	export class sub_roles_request {
		public roleList: role_data; // tag 1
	}

	function _decode_sub_roles_request(d: SprotoTypeDeserialize) {
		let o = new sub_roles_request;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 1:
				o.roleList = d.ro("role_data");
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_sub_roles_request(self: sub_roles_request, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 2);

		if (self.roleList != undefined) {
			se.wo ("role_data", self.roleList, 1);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["sub_roles_request"] = {en: _encode_sub_roles_request, de: _decode_sub_roles_request}
	export class sync_entity_pos_request {
		public handle: number; // tag 0
		public type: number; // tag 1
		public x: number; // tag 2
		public y: number; // tag 3
		public arg1: number; // tag 4
	}

	function _decode_sync_entity_pos_request(d: SprotoTypeDeserialize) {
		let o = new sync_entity_pos_request;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.handle = d.ri ();
				break;
			case 1:
				o.type = d.ri ();
				break;
			case 2:
				o.x = d.ri ();
				break;
			case 3:
				o.y = d.ri ();
				break;
			case 4:
				o.arg1 = d.ri ();
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_sync_entity_pos_request(self: sync_entity_pos_request, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 5);

		if (self.handle != undefined) {
			se.wi (self.handle, 0);
		}

		if (self.type != undefined) {
			se.wi (self.type, 1);
		}

		if (self.x != undefined) {
			se.wi (self.x, 2);
		}

		if (self.y != undefined) {
			se.wi (self.y, 3);
		}

		if (self.arg1 != undefined) {
			se.wi (self.arg1, 4);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["sync_entity_pos_request"] = {en: _encode_sync_entity_pos_request, de: _decode_sync_entity_pos_request}
}

