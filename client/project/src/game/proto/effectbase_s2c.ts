// Generated by sprotodump. DO NOT EDIT!

namespace Sproto { 
	export class effect_item {
		public id: number; // tag 0
		public term: number; // tag 1
	}

	function _decode_effect_item(d: SprotoTypeDeserialize) {
		let o = new effect_item;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.id = d.ri ();
				break;
			case 1:
				o.term = d.ri ();
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_effect_item(self: effect_item, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 2);

		if (self.id != undefined) {
			se.wi (self.id, 0);
		}

		if (self.term != undefined) {
			se.wi (self.term, 1);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["effect_item"] = {en: _encode_effect_item, de: _decode_effect_item}
	export class sc_effect_skin_update_request {
		public wearid: number; // tag 0
		public ownlist: effect_item[]; // tag 1
	}

	function _decode_sc_effect_skin_update_request(d: SprotoTypeDeserialize) {
		let o = new sc_effect_skin_update_request;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.wearid = d.ri ();
				break;
			case 1:
				o.ownlist = d.roa("effect_item");
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_sc_effect_skin_update_request(self: sc_effect_skin_update_request, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 2);

		if (self.wearid != undefined) {
			se.wi (self.wearid, 0);
		}

		if (self.ownlist != undefined) {
			se.woa ("effect_item", self.ownlist, 1);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["sc_effect_skin_update_request"] = {en: _encode_sc_effect_skin_update_request, de: _decode_sc_effect_skin_update_request}
	export class sc_effect_title_update_request {
		public wearid: number; // tag 0
		public ownlist: effect_item[]; // tag 1
	}

	function _decode_sc_effect_title_update_request(d: SprotoTypeDeserialize) {
		let o = new sc_effect_title_update_request;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.wearid = d.ri ();
				break;
			case 1:
				o.ownlist = d.roa("effect_item");
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_sc_effect_title_update_request(self: sc_effect_title_update_request, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 2);

		if (self.wearid != undefined) {
			se.wi (self.wearid, 0);
		}

		if (self.ownlist != undefined) {
			se.woa ("effect_item", self.ownlist, 1);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["sc_effect_title_update_request"] = {en: _encode_sc_effect_title_update_request, de: _decode_sc_effect_title_update_request}
}

