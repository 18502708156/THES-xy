// Generated by sprotodump. DO NOT EDIT!

namespace Sproto { 
	export class field_boss_info {
		public id: number; // tag 0
		public hp: number; // tag 1
		public status: number; // tag 2
		public ownerId: number; // tag 3
		public ownerName: string; // tag 4
		public ownerSex: number; // tag 5
		public ownerJob: number; // tag 6
		public time: number; // tag 7
		public ischallenge: boolean; // tag 8
	}

	function _decode_field_boss_info(d: SprotoTypeDeserialize) {
		let o = new field_boss_info;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.id = d.ri ();
				break;
			case 1:
				o.hp = d.ri ();
				break;
			case 2:
				o.status = d.ri ();
				break;
			case 3:
				o.ownerId = d.ri ();
				break;
			case 4:
				o.ownerName = d.rs ();
				break;
			case 5:
				o.ownerSex = d.ri ();
				break;
			case 6:
				o.ownerJob = d.ri ();
				break;
			case 7:
				o.time = d.ri ();
				break;
			case 8:
				o.ischallenge = d.rb ();
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_field_boss_info(self: field_boss_info, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 9);

		if (self.id != undefined) {
			se.wi (self.id, 0);
		}

		if (self.hp != undefined) {
			se.wi (self.hp, 1);
		}

		if (self.status != undefined) {
			se.wi (self.status, 2);
		}

		if (self.ownerId != undefined) {
			se.wi (self.ownerId, 3);
		}

		if (self.ownerName != undefined) {
			se.ws (self.ownerName, 4);
		}

		if (self.ownerSex != undefined) {
			se.wi (self.ownerSex, 5);
		}

		if (self.ownerJob != undefined) {
			se.wi (self.ownerJob, 6);
		}

		if (self.time != undefined) {
			se.wi (self.time, 7);
		}

		if (self.ischallenge != undefined) {
			se.wb (self.ischallenge, 8);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["field_boss_info"] = {en: _encode_field_boss_info, de: _decode_field_boss_info}
	export class sc_field_boss_base_list_request {
		public bossInfos: field_boss_info[]; // tag 0
	}

	function _decode_sc_field_boss_base_list_request(d: SprotoTypeDeserialize) {
		let o = new sc_field_boss_base_list_request;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.bossInfos = d.roa("field_boss_info");
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_sc_field_boss_base_list_request(self: sc_field_boss_base_list_request, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 1);

		if (self.bossInfos != undefined) {
			se.woa ("field_boss_info", self.bossInfos, 0);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["sc_field_boss_base_list_request"] = {en: _encode_sc_field_boss_base_list_request, de: _decode_sc_field_boss_base_list_request}
	export class sc_field_boss_update_one_request {
		public bossInfo: field_boss_info; // tag 0
	}

	function _decode_sc_field_boss_update_one_request(d: SprotoTypeDeserialize) {
		let o = new sc_field_boss_update_one_request;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.bossInfo = d.ro("field_boss_info");
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_sc_field_boss_update_one_request(self: sc_field_boss_update_one_request, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 1);

		if (self.bossInfo != undefined) {
			se.wo ("field_boss_info", self.bossInfo, 0);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["sc_field_boss_update_one_request"] = {en: _encode_sc_field_boss_update_one_request, de: _decode_sc_field_boss_update_one_request}
}

