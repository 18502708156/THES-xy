// Generated by sprotodump. DO NOT EDIT!

namespace Sproto { 
	export class friend_data {
		public friendInfo: player_whole_data; // tag 0
		public gift: boolean; // tag 1
	}

	function _decode_friend_data(d: SprotoTypeDeserialize) {
		let o = new friend_data;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.friendInfo = d.ro("player_whole_data");
				break;
			case 1:
				o.gift = d.rb ();
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_friend_data(self: friend_data, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 2);

		if (self.friendInfo != undefined) {
			se.wo ("player_whole_data", self.friendInfo, 0);
		}

		if (self.gift != undefined) {
			se.wb (self.gift, 1);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["friend_data"] = {en: _encode_friend_data, de: _decode_friend_data}
	export class funs_data {
		public funsInfo: player_whole_data; // tag 0
		public gift: boolean; // tag 1
		public gifttime: number; // tag 2
		public receive: boolean; // tag 3
		public isfriend: boolean; // tag 4
	}

	function _decode_funs_data(d: SprotoTypeDeserialize) {
		let o = new funs_data;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.funsInfo = d.ro("player_whole_data");
				break;
			case 1:
				o.gift = d.rb ();
				break;
			case 2:
				o.gifttime = d.ri ();
				break;
			case 3:
				o.receive = d.rb ();
				break;
			case 4:
				o.isfriend = d.rb ();
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_funs_data(self: funs_data, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 5);

		if (self.funsInfo != undefined) {
			se.wo ("player_whole_data", self.funsInfo, 0);
		}

		if (self.gift != undefined) {
			se.wb (self.gift, 1);
		}

		if (self.gifttime != undefined) {
			se.wi (self.gifttime, 2);
		}

		if (self.receive != undefined) {
			se.wb (self.receive, 3);
		}

		if (self.isfriend != undefined) {
			se.wb (self.isfriend, 4);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["funs_data"] = {en: _encode_funs_data, de: _decode_funs_data}
	export class sc_friend_black_list_request {
		public blacklist: player_whole_data[]; // tag 0
	}

	function _decode_sc_friend_black_list_request(d: SprotoTypeDeserialize) {
		let o = new sc_friend_black_list_request;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.blacklist = d.roa("player_whole_data");
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_sc_friend_black_list_request(self: sc_friend_black_list_request, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 1);

		if (self.blacklist != undefined) {
			se.woa ("player_whole_data", self.blacklist, 0);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["sc_friend_black_list_request"] = {en: _encode_sc_friend_black_list_request, de: _decode_sc_friend_black_list_request}
	export class sc_friend_blacklist_update_request {
		public blackdata: player_whole_data; // tag 0
	}

	function _decode_sc_friend_blacklist_update_request(d: SprotoTypeDeserialize) {
		let o = new sc_friend_blacklist_update_request;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.blackdata = d.ro("player_whole_data");
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_sc_friend_blacklist_update_request(self: sc_friend_blacklist_update_request, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 1);

		if (self.blackdata != undefined) {
			se.wo ("player_whole_data", self.blackdata, 0);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["sc_friend_blacklist_update_request"] = {en: _encode_sc_friend_blacklist_update_request, de: _decode_sc_friend_blacklist_update_request}
	export class sc_friend_follow_data_request {
		public friendlist: friend_data[]; // tag 0
	}

	function _decode_sc_friend_follow_data_request(d: SprotoTypeDeserialize) {
		let o = new sc_friend_follow_data_request;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.friendlist = d.roa("friend_data");
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_sc_friend_follow_data_request(self: sc_friend_follow_data_request, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 1);

		if (self.friendlist != undefined) {
			se.woa ("friend_data", self.friendlist, 0);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["sc_friend_follow_data_request"] = {en: _encode_sc_friend_follow_data_request, de: _decode_sc_friend_follow_data_request}
	export class sc_friend_follow_nominate_list_request {
		public playerinfos: player_whole_data[]; // tag 0
	}

	function _decode_sc_friend_follow_nominate_list_request(d: SprotoTypeDeserialize) {
		let o = new sc_friend_follow_nominate_list_request;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.playerinfos = d.roa("player_whole_data");
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_sc_friend_follow_nominate_list_request(self: sc_friend_follow_nominate_list_request, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 1);

		if (self.playerinfos != undefined) {
			se.woa ("player_whole_data", self.playerinfos, 0);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["sc_friend_follow_nominate_list_request"] = {en: _encode_sc_friend_follow_nominate_list_request, de: _decode_sc_friend_follow_nominate_list_request}
	export class sc_friend_follow_update_request {
		public friendinfo: friend_data; // tag 0
	}

	function _decode_sc_friend_follow_update_request(d: SprotoTypeDeserialize) {
		let o = new sc_friend_follow_update_request;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.friendinfo = d.ro("friend_data");
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_sc_friend_follow_update_request(self: sc_friend_follow_update_request, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 1);

		if (self.friendinfo != undefined) {
			se.wo ("friend_data", self.friendinfo, 0);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["sc_friend_follow_update_request"] = {en: _encode_sc_friend_follow_update_request, de: _decode_sc_friend_follow_update_request}
	export class sc_friend_funs_data_request {
		public funslist: funs_data[]; // tag 0
	}

	function _decode_sc_friend_funs_data_request(d: SprotoTypeDeserialize) {
		let o = new sc_friend_funs_data_request;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.funslist = d.roa("funs_data");
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_sc_friend_funs_data_request(self: sc_friend_funs_data_request, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 1);

		if (self.funslist != undefined) {
			se.woa ("funs_data", self.funslist, 0);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["sc_friend_funs_data_request"] = {en: _encode_sc_friend_funs_data_request, de: _decode_sc_friend_funs_data_request}
	export class sc_friend_funs_remove_request {
		public dbid: number; // tag 0
	}

	function _decode_sc_friend_funs_remove_request(d: SprotoTypeDeserialize) {
		let o = new sc_friend_funs_remove_request;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.dbid = d.ri ();
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_sc_friend_funs_remove_request(self: sc_friend_funs_remove_request, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 1);

		if (self.dbid != undefined) {
			se.wi (self.dbid, 0);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["sc_friend_funs_remove_request"] = {en: _encode_sc_friend_funs_remove_request, de: _decode_sc_friend_funs_remove_request}
	export class sc_friend_funs_update_request {
		public funsinfo: funs_data; // tag 0
	}

	function _decode_sc_friend_funs_update_request(d: SprotoTypeDeserialize) {
		let o = new sc_friend_funs_update_request;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.funsinfo = d.ro("funs_data");
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_sc_friend_funs_update_request(self: sc_friend_funs_update_request, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 1);

		if (self.funsinfo != undefined) {
			se.wo ("funs_data", self.funsinfo, 0);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["sc_friend_funs_update_request"] = {en: _encode_sc_friend_funs_update_request, de: _decode_sc_friend_funs_update_request}
	export class sc_friend_gift_receive_info_request {
		public gifttime: number; // tag 0
		public receivetime: number; // tag 1
	}

	function _decode_sc_friend_gift_receive_info_request(d: SprotoTypeDeserialize) {
		let o = new sc_friend_gift_receive_info_request;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.gifttime = d.ri ();
				break;
			case 1:
				o.receivetime = d.ri ();
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_sc_friend_gift_receive_info_request(self: sc_friend_gift_receive_info_request, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 2);

		if (self.gifttime != undefined) {
			se.wi (self.gifttime, 0);
		}

		if (self.receivetime != undefined) {
			se.wi (self.receivetime, 1);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["sc_friend_gift_receive_info_request"] = {en: _encode_sc_friend_gift_receive_info_request, de: _decode_sc_friend_gift_receive_info_request}
}

