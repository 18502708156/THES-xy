// Generated by sprotodump. DO NOT EDIT!

namespace Sproto { 
	export class fuben_data {
		public fubenNo: number; // tag 0
		public clearanceNum: number; // tag 1
		public todayNum: number; // tag 2
		public buyNum: number; // tag 3
	}

	function _decode_fuben_data(d: SprotoTypeDeserialize) {
		let o = new fuben_data;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.fubenNo = d.ri ();
				break;
			case 1:
				o.clearanceNum = d.ri ();
				break;
			case 2:
				o.todayNum = d.ri ();
				break;
			case 3:
				o.buyNum = d.ri ();
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_fuben_data(self: fuben_data, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 4);

		if (self.fubenNo != undefined) {
			se.wi (self.fubenNo, 0);
		}

		if (self.clearanceNum != undefined) {
			se.wi (self.clearanceNum, 1);
		}

		if (self.todayNum != undefined) {
			se.wi (self.todayNum, 2);
		}

		if (self.buyNum != undefined) {
			se.wi (self.buyNum, 3);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["fuben_data"] = {en: _encode_fuben_data, de: _decode_fuben_data}
	export class sc_fuben_heavenFb_info_request {
		public layer: number; // tag 0
		public todayLayer: number; // tag 1
		public rewardNo: number[]; // tag 2
	}

	function _decode_sc_fuben_heavenFb_info_request(d: SprotoTypeDeserialize) {
		let o = new sc_fuben_heavenFb_info_request;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.layer = d.ri ();
				break;
			case 1:
				o.todayLayer = d.ri ();
				break;
			case 2:
				o.rewardNo = d.ria ();
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_sc_fuben_heavenFb_info_request(self: sc_fuben_heavenFb_info_request, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 3);

		if (self.layer != undefined) {
			se.wi (self.layer, 0);
		}

		if (self.todayLayer != undefined) {
			se.wi (self.todayLayer, 1);
		}

		if (self.rewardNo != undefined) {
			se.wia (self.rewardNo, 2);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["sc_fuben_heavenFb_info_request"] = {en: _encode_sc_fuben_heavenFb_info_request, de: _decode_sc_fuben_heavenFb_info_request}
	export class sc_fuben_heavenFb_reward_request {
		public rewardNo: number[]; // tag 0
	}

	function _decode_sc_fuben_heavenFb_reward_request(d: SprotoTypeDeserialize) {
		let o = new sc_fuben_heavenFb_reward_request;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.rewardNo = d.ria ();
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_sc_fuben_heavenFb_reward_request(self: sc_fuben_heavenFb_reward_request, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 1);

		if (self.rewardNo != undefined) {
			se.wia (self.rewardNo, 0);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["sc_fuben_heavenFb_reward_request"] = {en: _encode_sc_fuben_heavenFb_reward_request, de: _decode_sc_fuben_heavenFb_reward_request}
	export class sc_fuben_material_info_request {
		public fuben_data: fuben_data[]; // tag 0
	}

	function _decode_sc_fuben_material_info_request(d: SprotoTypeDeserialize) {
		let o = new sc_fuben_material_info_request;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.fuben_data = d.roa("fuben_data");
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_sc_fuben_material_info_request(self: sc_fuben_material_info_request, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 1);

		if (self.fuben_data != undefined) {
			se.woa ("fuben_data", self.fuben_data, 0);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["sc_fuben_material_info_request"] = {en: _encode_sc_fuben_material_info_request, de: _decode_sc_fuben_material_info_request}
	export class sc_fuben_treasuremap_info_request {
		public data: treasuremapn_data[]; // tag 0
		public starReward: star_reward_data[]; // tag 1
	}

	function _decode_sc_fuben_treasuremap_info_request(d: SprotoTypeDeserialize) {
		let o = new sc_fuben_treasuremap_info_request;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.data = d.roa("treasuremapn_data");
				break;
			case 1:
				o.starReward = d.roa("star_reward_data");
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_sc_fuben_treasuremap_info_request(self: sc_fuben_treasuremap_info_request, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 2);

		if (self.data != undefined) {
			se.woa ("treasuremapn_data", self.data, 0);
		}

		if (self.starReward != undefined) {
			se.woa ("star_reward_data", self.starReward, 1);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["sc_fuben_treasuremap_info_request"] = {en: _encode_sc_fuben_treasuremap_info_request, de: _decode_sc_fuben_treasuremap_info_request}
	export class sc_fuben_treasuremap_star_reward_request {
		public starReward: star_reward_data[]; // tag 0
	}

	function _decode_sc_fuben_treasuremap_star_reward_request(d: SprotoTypeDeserialize) {
		let o = new sc_fuben_treasuremap_star_reward_request;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.starReward = d.roa("star_reward_data");
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_sc_fuben_treasuremap_star_reward_request(self: sc_fuben_treasuremap_star_reward_request, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 1);

		if (self.starReward != undefined) {
			se.woa ("star_reward_data", self.starReward, 0);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["sc_fuben_treasuremap_star_reward_request"] = {en: _encode_sc_fuben_treasuremap_star_reward_request, de: _decode_sc_fuben_treasuremap_star_reward_request}
	export class sc_fuben_wildgeeseFb_info_request {
		public hard: number; // tag 0
		public layer: number; // tag 1
	}

	function _decode_sc_fuben_wildgeeseFb_info_request(d: SprotoTypeDeserialize) {
		let o = new sc_fuben_wildgeeseFb_info_request;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.hard = d.ri ();
				break;
			case 1:
				o.layer = d.ri ();
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_sc_fuben_wildgeeseFb_info_request(self: sc_fuben_wildgeeseFb_info_request, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 2);

		if (self.hard != undefined) {
			se.wi (self.hard, 0);
		}

		if (self.layer != undefined) {
			se.wi (self.layer, 1);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["sc_fuben_wildgeeseFb_info_request"] = {en: _encode_sc_fuben_wildgeeseFb_info_request, de: _decode_sc_fuben_wildgeeseFb_info_request}
	export class star_reward_data {
		public no: number; // tag 0
		public reward: number; // tag 1
	}

	function _decode_star_reward_data(d: SprotoTypeDeserialize) {
		let o = new star_reward_data;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.no = d.ri ();
				break;
			case 1:
				o.reward = d.ri ();
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_star_reward_data(self: star_reward_data, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 2);

		if (self.no != undefined) {
			se.wi (self.no, 0);
		}

		if (self.reward != undefined) {
			se.wi (self.reward, 1);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["star_reward_data"] = {en: _encode_star_reward_data, de: _decode_star_reward_data}
	export class treasuremapn_data {
		public fubenNo: number; // tag 0
		public todayNum: number; // tag 1
		public star: number; // tag 2
	}

	function _decode_treasuremapn_data(d: SprotoTypeDeserialize) {
		let o = new treasuremapn_data;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.fubenNo = d.ri ();
				break;
			case 1:
				o.todayNum = d.ri ();
				break;
			case 2:
				o.star = d.ri ();
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_treasuremapn_data(self: treasuremapn_data, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 3);

		if (self.fubenNo != undefined) {
			se.wi (self.fubenNo, 0);
		}

		if (self.todayNum != undefined) {
			se.wi (self.todayNum, 1);
		}

		if (self.star != undefined) {
			se.wi (self.star, 2);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["treasuremapn_data"] = {en: _encode_treasuremapn_data, de: _decode_treasuremapn_data}
}

