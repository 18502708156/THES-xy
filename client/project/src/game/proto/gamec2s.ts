// Generated by sprotodump. DO NOT EDIT!

namespace Sproto { 
	export class CreateActor_request {
		public actorname: string; // tag 0
		public sex: number; // tag 1
		public job: number; // tag 2
		public icon: number; // tag 3
		public pf: string; // tag 4
	}

	function _decode_CreateActor_request(d: SprotoTypeDeserialize) {
		let o = new CreateActor_request;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.actorname = d.rs ();
				break;
			case 1:
				o.sex = d.ri ();
				break;
			case 2:
				o.job = d.ri ();
				break;
			case 3:
				o.icon = d.ri ();
				break;
			case 4:
				o.pf = d.rs ();
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_CreateActor_request(self: CreateActor_request, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 5);

		if (self.actorname != undefined) {
			se.ws (self.actorname, 0);
		}

		if (self.sex != undefined) {
			se.wi (self.sex, 1);
		}

		if (self.job != undefined) {
			se.wi (self.job, 2);
		}

		if (self.icon != undefined) {
			se.wi (self.icon, 3);
		}

		if (self.pf != undefined) {
			se.ws (self.pf, 4);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["CreateActor_request"] = {en: _encode_CreateActor_request, de: _decode_CreateActor_request}
	export class CreateActor_response {
		public result: number; // tag 0
		public actorid: number; // tag 1
	}

	function _decode_CreateActor_response(d: SprotoTypeDeserialize) {
		let o = new CreateActor_response;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.result = d.ri ();
				break;
			case 1:
				o.actorid = d.ri ();
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_CreateActor_response(self: CreateActor_response, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 2);

		if (self.result != undefined) {
			se.wi (self.result, 0);
		}

		if (self.actorid != undefined) {
			se.wi (self.actorid, 1);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["CreateActor_response"] = {en: _encode_CreateActor_response, de: _decode_CreateActor_response}
	export class EnterGame_request {
		public actorid: number; // tag 0
	}

	function _decode_EnterGame_request(d: SprotoTypeDeserialize) {
		let o = new EnterGame_request;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.actorid = d.ri ();
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_EnterGame_request(self: EnterGame_request, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 1);

		if (self.actorid != undefined) {
			se.wi (self.actorid, 0);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["EnterGame_request"] = {en: _encode_EnterGame_request, de: _decode_EnterGame_request}
	export class EnterGame_response {
		public result: number; // tag 0
		public QQ: string; // tag 1
	}

	function _decode_EnterGame_response(d: SprotoTypeDeserialize) {
		let o = new EnterGame_response;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.result = d.ri ();
				break;
			case 1:
				o.QQ = d.rs ();
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_EnterGame_response(self: EnterGame_response, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 2);

		if (self.result != undefined) {
			se.wi (self.result, 0);
		}

		if (self.QQ != undefined) {
			se.ws (self.QQ, 1);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["EnterGame_response"] = {en: _encode_EnterGame_response, de: _decode_EnterGame_response}
	export class QueryList_request {
	}

	function _decode_QueryList_request(d: SprotoTypeDeserialize) {
		let o = new QueryList_request;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_QueryList_request(self: QueryList_request, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 0);

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["QueryList_request"] = {en: _encode_QueryList_request, de: _decode_QueryList_request}
	export class QueryList_response {
		public code: boolean; // tag 0
		public actorid: number; // tag 1
		public actorlist: actorlist[]; // tag 2
	}

	function _decode_QueryList_response(d: SprotoTypeDeserialize) {
		let o = new QueryList_response;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.code = d.rb ();
				break;
			case 1:
				o.actorid = d.ri ();
				break;
			case 2:
				o.actorlist = d.roa("actorlist");
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_QueryList_response(self: QueryList_response, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 3);

		if (self.code != undefined) {
			se.wb (self.code, 0);
		}

		if (self.actorid != undefined) {
			se.wi (self.actorid, 1);
		}

		if (self.actorlist != undefined) {
			se.woa ("actorlist", self.actorlist, 2);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["QueryList_response"] = {en: _encode_QueryList_response, de: _decode_QueryList_response}
	export class RandName_request {
		public sex: number; // tag 0
	}

	function _decode_RandName_request(d: SprotoTypeDeserialize) {
		let o = new RandName_request;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.sex = d.ri ();
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_RandName_request(self: RandName_request, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 1);

		if (self.sex != undefined) {
			se.wi (self.sex, 0);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["RandName_request"] = {en: _encode_RandName_request, de: _decode_RandName_request}
	export class RandName_response {
		public result: number; // tag 0
		public actorname: string; // tag 1
	}

	function _decode_RandName_response(d: SprotoTypeDeserialize) {
		let o = new RandName_response;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.result = d.ri ();
				break;
			case 1:
				o.actorname = d.rs ();
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_RandName_response(self: RandName_response, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 2);

		if (self.result != undefined) {
			se.wi (self.result, 0);
		}

		if (self.actorname != undefined) {
			se.ws (self.actorname, 1);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["RandName_response"] = {en: _encode_RandName_response, de: _decode_RandName_response}
	export class actorlist {
		public dbid: number; // tag 0
		public serverindex: number; // tag 1
		public actorname: string; // tag 2
		public job: number; // tag 3
		public sex: number; // tag 4
		public level: number; // tag 5
		public zhuansheng_lv: number; // tag 6
		public totalpower: number; // tag 7
	}

	function _decode_actorlist(d: SprotoTypeDeserialize) {
		let o = new actorlist;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.dbid = d.ri ();
				break;
			case 1:
				o.serverindex = d.ri ();
				break;
			case 2:
				o.actorname = d.rs ();
				break;
			case 3:
				o.job = d.ri ();
				break;
			case 4:
				o.sex = d.ri ();
				break;
			case 5:
				o.level = d.ri ();
				break;
			case 6:
				o.zhuansheng_lv = d.ri ();
				break;
			case 7:
				o.totalpower = d.ri ();
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_actorlist(self: actorlist, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 8);

		if (self.dbid != undefined) {
			se.wi (self.dbid, 0);
		}

		if (self.serverindex != undefined) {
			se.wi (self.serverindex, 1);
		}

		if (self.actorname != undefined) {
			se.ws (self.actorname, 2);
		}

		if (self.job != undefined) {
			se.wi (self.job, 3);
		}

		if (self.sex != undefined) {
			se.wi (self.sex, 4);
		}

		if (self.level != undefined) {
			se.wi (self.level, 5);
		}

		if (self.zhuansheng_lv != undefined) {
			se.wi (self.zhuansheng_lv, 6);
		}

		if (self.totalpower != undefined) {
			se.wi (self.totalpower, 7);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["actorlist"] = {en: _encode_actorlist, de: _decode_actorlist}
	export class checkAccount_request {
		public accountname: string; // tag 0
		public password: string; // tag 1
		public platformuid: string; // tag 2
		public token: string; // tag 3
		public serverid: number; // tag 4
		public lid: string; // tag 5
	}

	function _decode_checkAccount_request(d: SprotoTypeDeserialize) {
		let o = new checkAccount_request;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.accountname = d.rs ();
				break;
			case 1:
				o.password = d.rs ();
				break;
			case 2:
				o.platformuid = d.rs ();
				break;
			case 3:
				o.token = d.rs ();
				break;
			case 4:
				o.serverid = d.ri ();
				break;
			case 5:
				o.lid = d.rs ();
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_checkAccount_request(self: checkAccount_request, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 6);

		if (self.accountname != undefined) {
			se.ws (self.accountname, 0);
		}

		if (self.password != undefined) {
			se.ws (self.password, 1);
		}

		if (self.platformuid != undefined) {
			se.ws (self.platformuid, 2);
		}

		if (self.token != undefined) {
			se.ws (self.token, 3);
		}

		if (self.serverid != undefined) {
			se.wi (self.serverid, 4);
		}

		if (self.lid != undefined) {
			se.ws (self.lid, 5);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["checkAccount_request"] = {en: _encode_checkAccount_request, de: _decode_checkAccount_request}
	export class checkAccount_response {
		public result: number; // tag 0
	}

	function _decode_checkAccount_response(d: SprotoTypeDeserialize) {
		let o = new checkAccount_response;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.result = d.ri ();
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_checkAccount_response(self: checkAccount_response, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 1);

		if (self.result != undefined) {
			se.wi (self.result, 0);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["checkAccount_response"] = {en: _encode_checkAccount_response, de: _decode_checkAccount_response}
}

