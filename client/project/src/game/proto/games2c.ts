// Generated by sprotodump. DO NOT EDIT!

namespace Sproto { 
	export class sc_base_game_time_request {
		public time: number; // tag 0
		public serverRunDay: number; // tag 1
	}

	function _decode_sc_base_game_time_request(d: SprotoTypeDeserialize) {
		let o = new sc_base_game_time_request;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.time = d.ri ();
				break;
			case 1:
				o.serverRunDay = d.ri ();
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_sc_base_game_time_request(self: sc_base_game_time_request, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 2);

		if (self.time != undefined) {
			se.wi (self.time, 0);
		}

		if (self.serverRunDay != undefined) {
			se.wi (self.serverRunDay, 1);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["sc_base_game_time_request"] = {en: _encode_sc_base_game_time_request, de: _decode_sc_base_game_time_request}
	export class sc_base_open_day_request {
		public day: number; // tag 1
		public loginDay: number; // tag 2
		public mergeDay: number; // tag 3
	}

	function _decode_sc_base_open_day_request(d: SprotoTypeDeserialize) {
		let o = new sc_base_open_day_request;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 1:
				o.day = d.ri ();
				break;
			case 2:
				o.loginDay = d.ri ();
				break;
			case 3:
				o.mergeDay = d.ri ();
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_sc_base_open_day_request(self: sc_base_open_day_request, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 4);

		if (self.day != undefined) {
			se.wi (self.day, 1);
		}

		if (self.loginDay != undefined) {
			se.wi (self.loginDay, 2);
		}

		if (self.mergeDay != undefined) {
			se.wi (self.mergeDay, 3);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["sc_base_open_day_request"] = {en: _encode_sc_base_open_day_request, de: _decode_sc_base_open_day_request}
	export class sc_error_code_request {
		public code: number; // tag 0
		public msg: string; // tag 1
	}

	function _decode_sc_error_code_request(d: SprotoTypeDeserialize) {
		let o = new sc_error_code_request;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.code = d.ri ();
				break;
			case 1:
				o.msg = d.rs ();
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_sc_error_code_request(self: sc_error_code_request, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 2);

		if (self.code != undefined) {
			se.wi (self.code, 0);
		}

		if (self.msg != undefined) {
			se.ws (self.msg, 1);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["sc_error_code_request"] = {en: _encode_sc_error_code_request, de: _decode_sc_error_code_request}
}

