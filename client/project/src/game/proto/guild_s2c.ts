// Generated by sprotodump. DO NOT EDIT!

namespace Sproto { 
	export class guild_apply {
		public playerid: number; // tag 0
		public vip: number; // tag 1
		public job: number; // tag 2
		public sex: number; // tag 3
		public power: number; // tag 4
		public playername: string; // tag 5
		public level: number; // tag 6
		public logouttime: number; // tag 7
	}

	function _decode_guild_apply(d: SprotoTypeDeserialize) {
		let o = new guild_apply;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.playerid = d.ri ();
				break;
			case 1:
				o.vip = d.ri ();
				break;
			case 2:
				o.job = d.ri ();
				break;
			case 3:
				o.sex = d.ri ();
				break;
			case 4:
				o.power = d.ri ();
				break;
			case 5:
				o.playername = d.rs ();
				break;
			case 6:
				o.level = d.ri ();
				break;
			case 7:
				o.logouttime = d.ri ();
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_guild_apply(self: guild_apply, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 8);

		if (self.playerid != undefined) {
			se.wi (self.playerid, 0);
		}

		if (self.vip != undefined) {
			se.wi (self.vip, 1);
		}

		if (self.job != undefined) {
			se.wi (self.job, 2);
		}

		if (self.sex != undefined) {
			se.wi (self.sex, 3);
		}

		if (self.power != undefined) {
			se.wi (self.power, 4);
		}

		if (self.playername != undefined) {
			se.ws (self.playername, 5);
		}

		if (self.level != undefined) {
			se.wi (self.level, 6);
		}

		if (self.logouttime != undefined) {
			se.wi (self.logouttime, 7);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["guild_apply"] = {en: _encode_guild_apply, de: _decode_guild_apply}
	export class guild_chat {
		public type: number; // tag 0
		public content: string; // tag 1
		public playerid: number; // tag 2
		public name: string; // tag 3
		public job: number; // tag 4
		public sex: number; // tag 5
		public vip: number; // tag 6
		public office: number; // tag 7
		public time: number; // tag 8
		public share: share_date; // tag 9
		public headframe: number; // tag 10
	}

	function _decode_guild_chat(d: SprotoTypeDeserialize) {
		let o = new guild_chat;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.type = d.ri ();
				break;
			case 1:
				o.content = d.rs ();
				break;
			case 2:
				o.playerid = d.ri ();
				break;
			case 3:
				o.name = d.rs ();
				break;
			case 4:
				o.job = d.ri ();
				break;
			case 5:
				o.sex = d.ri ();
				break;
			case 6:
				o.vip = d.ri ();
				break;
			case 7:
				o.office = d.ri ();
				break;
			case 8:
				o.time = d.ri ();
				break;
			case 9:
				o.share = d.ro("share_date");
				break;
			case 10:
				o.headframe = d.ri ();
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_guild_chat(self: guild_chat, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 11);

		if (self.type != undefined) {
			se.wi (self.type, 0);
		}

		if (self.content != undefined) {
			se.ws (self.content, 1);
		}

		if (self.playerid != undefined) {
			se.wi (self.playerid, 2);
		}

		if (self.name != undefined) {
			se.ws (self.name, 3);
		}

		if (self.job != undefined) {
			se.wi (self.job, 4);
		}

		if (self.sex != undefined) {
			se.wi (self.sex, 5);
		}

		if (self.vip != undefined) {
			se.wi (self.vip, 6);
		}

		if (self.office != undefined) {
			se.wi (self.office, 7);
		}

		if (self.time != undefined) {
			se.wi (self.time, 8);
		}

		if (self.share != undefined) {
			se.wo ("share_date", self.share, 9);
		}

		if (self.headframe != undefined) {
			se.wi (self.headframe, 10);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["guild_chat"] = {en: _encode_guild_chat, de: _decode_guild_chat}
	export class guild_history {
		public time: number; // tag 0
		public type: number; // tag 1
		public param1: number; // tag 2
		public param2: number; // tag 3
		public param3: number; // tag 4
		public name1: string; // tag 5
		public name2: string; // tag 6
	}

	function _decode_guild_history(d: SprotoTypeDeserialize) {
		let o = new guild_history;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.time = d.ri ();
				break;
			case 1:
				o.type = d.ri ();
				break;
			case 2:
				o.param1 = d.ri ();
				break;
			case 3:
				o.param2 = d.ri ();
				break;
			case 4:
				o.param3 = d.ri ();
				break;
			case 5:
				o.name1 = d.rs ();
				break;
			case 6:
				o.name2 = d.rs ();
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_guild_history(self: guild_history, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 7);

		if (self.time != undefined) {
			se.wi (self.time, 0);
		}

		if (self.type != undefined) {
			se.wi (self.type, 1);
		}

		if (self.param1 != undefined) {
			se.wi (self.param1, 2);
		}

		if (self.param2 != undefined) {
			se.wi (self.param2, 3);
		}

		if (self.param3 != undefined) {
			se.wi (self.param3, 4);
		}

		if (self.name1 != undefined) {
			se.ws (self.name1, 5);
		}

		if (self.name2 != undefined) {
			se.ws (self.name2, 6);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["guild_history"] = {en: _encode_guild_history, de: _decode_guild_history}
	export class guild_map_shows {
		public shows: number[]; // tag 0
		public job: number; // tag 1
		public sex: number; // tag 2
		public id: number; // tag 3
		public name: string; // tag 4
		public serverid: number; // tag 5
		public guildid: number; // tag 6
		public guildname: string; // tag 7
		public level: number; // tag 8
	}

	function _decode_guild_map_shows(d: SprotoTypeDeserialize) {
		let o = new guild_map_shows;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.shows = d.ria ();
				break;
			case 1:
				o.job = d.ri ();
				break;
			case 2:
				o.sex = d.ri ();
				break;
			case 3:
				o.id = d.ri ();
				break;
			case 4:
				o.name = d.rs ();
				break;
			case 5:
				o.serverid = d.ri ();
				break;
			case 6:
				o.guildid = d.ri ();
				break;
			case 7:
				o.guildname = d.rs ();
				break;
			case 8:
				o.level = d.ri ();
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_guild_map_shows(self: guild_map_shows, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 9);

		if (self.shows != undefined) {
			se.wia (self.shows, 0);
		}

		if (self.job != undefined) {
			se.wi (self.job, 1);
		}

		if (self.sex != undefined) {
			se.wi (self.sex, 2);
		}

		if (self.id != undefined) {
			se.wi (self.id, 3);
		}

		if (self.name != undefined) {
			se.ws (self.name, 4);
		}

		if (self.serverid != undefined) {
			se.wi (self.serverid, 5);
		}

		if (self.guildid != undefined) {
			se.wi (self.guildid, 6);
		}

		if (self.guildname != undefined) {
			se.ws (self.guildname, 7);
		}

		if (self.level != undefined) {
			se.wi (self.level, 8);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["guild_map_shows"] = {en: _encode_guild_map_shows, de: _decode_guild_map_shows}
	export class guild_record {
		public type: number; // tag 0
		public historyRecord: guild_history; // tag 1
		public chatRecord: guild_chat; // tag 2
	}

	function _decode_guild_record(d: SprotoTypeDeserialize) {
		let o = new guild_record;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.type = d.ri ();
				break;
			case 1:
				o.historyRecord = d.ro("guild_history");
				break;
			case 2:
				o.chatRecord = d.ro("guild_chat");
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_guild_record(self: guild_record, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 3);

		if (self.type != undefined) {
			se.wi (self.type, 0);
		}

		if (self.historyRecord != undefined) {
			se.wo ("guild_history", self.historyRecord, 1);
		}

		if (self.chatRecord != undefined) {
			se.wo ("guild_chat", self.chatRecord, 2);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["guild_record"] = {en: _encode_guild_record, de: _decode_guild_record}
	export class guild_summary {
		public id: number; // tag 0
		public level: number; // tag 1
		public playercount: number; // tag 2
		public name: string; // tag 3
		public leaderinfo: member_info; // tag 4
		public needPower: number; // tag 5
		public totalpower: number; // tag 6
	}

	function _decode_guild_summary(d: SprotoTypeDeserialize) {
		let o = new guild_summary;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.id = d.ri ();
				break;
			case 1:
				o.level = d.ri ();
				break;
			case 2:
				o.playercount = d.ri ();
				break;
			case 3:
				o.name = d.rs ();
				break;
			case 4:
				o.leaderinfo = d.ro("member_info");
				break;
			case 5:
				o.needPower = d.ri ();
				break;
			case 6:
				o.totalpower = d.ri ();
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_guild_summary(self: guild_summary, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 7);

		if (self.id != undefined) {
			se.wi (self.id, 0);
		}

		if (self.level != undefined) {
			se.wi (self.level, 1);
		}

		if (self.playercount != undefined) {
			se.wi (self.playercount, 2);
		}

		if (self.name != undefined) {
			se.ws (self.name, 3);
		}

		if (self.leaderinfo != undefined) {
			se.wo ("member_info", self.leaderinfo, 4);
		}

		if (self.needPower != undefined) {
			se.wi (self.needPower, 5);
		}

		if (self.totalpower != undefined) {
			se.wi (self.totalpower, 6);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["guild_summary"] = {en: _encode_guild_summary, de: _decode_guild_summary}
	export class member_info {
		public playerid: number; // tag 0
		public playername: string; // tag 1
		public office: number; // tag 2
		public job: number; // tag 3
		public sex: number; // tag 4
		public vip: number; // tag 5
		public contribute: number; // tag 8
		public todayContri: number; // tag 9
		public curcontribute: number; // tag 10
		public power: number; // tag 11
		public logouttime: number; // tag 12
	}

	function _decode_member_info(d: SprotoTypeDeserialize) {
		let o = new member_info;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.playerid = d.ri ();
				break;
			case 1:
				o.playername = d.rs ();
				break;
			case 2:
				o.office = d.ri ();
				break;
			case 3:
				o.job = d.ri ();
				break;
			case 4:
				o.sex = d.ri ();
				break;
			case 5:
				o.vip = d.ri ();
				break;
			case 8:
				o.contribute = d.ri ();
				break;
			case 9:
				o.todayContri = d.ri ();
				break;
			case 10:
				o.curcontribute = d.ri ();
				break;
			case 11:
				o.power = d.ri ();
				break;
			case 12:
				o.logouttime = d.ri ();
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_member_info(self: member_info, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 12);

		if (self.playerid != undefined) {
			se.wi (self.playerid, 0);
		}

		if (self.playername != undefined) {
			se.ws (self.playername, 1);
		}

		if (self.office != undefined) {
			se.wi (self.office, 2);
		}

		if (self.job != undefined) {
			se.wi (self.job, 3);
		}

		if (self.sex != undefined) {
			se.wi (self.sex, 4);
		}

		if (self.vip != undefined) {
			se.wi (self.vip, 5);
		}

		if (self.contribute != undefined) {
			se.wi (self.contribute, 8);
		}

		if (self.todayContri != undefined) {
			se.wi (self.todayContri, 9);
		}

		if (self.curcontribute != undefined) {
			se.wi (self.curcontribute, 10);
		}

		if (self.power != undefined) {
			se.wi (self.power, 11);
		}

		if (self.logouttime != undefined) {
			se.wi (self.logouttime, 12);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["member_info"] = {en: _encode_member_info, de: _decode_member_info}
	export class other_guild_info {
		public level: number; // tag 0
		public fund: number; // tag 1
		public notice: string; // tag 2
		public autoJoin: number; // tag 3
		public needPower: number; // tag 4
	}

	function _decode_other_guild_info(d: SprotoTypeDeserialize) {
		let o = new other_guild_info;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.level = d.ri ();
				break;
			case 1:
				o.fund = d.ri ();
				break;
			case 2:
				o.notice = d.rs ();
				break;
			case 3:
				o.autoJoin = d.ri ();
				break;
			case 4:
				o.needPower = d.ri ();
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_other_guild_info(self: other_guild_info, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 5);

		if (self.level != undefined) {
			se.wi (self.level, 0);
		}

		if (self.fund != undefined) {
			se.wi (self.fund, 1);
		}

		if (self.notice != undefined) {
			se.ws (self.notice, 2);
		}

		if (self.autoJoin != undefined) {
			se.wi (self.autoJoin, 3);
		}

		if (self.needPower != undefined) {
			se.wi (self.needPower, 4);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["other_guild_info"] = {en: _encode_other_guild_info, de: _decode_other_guild_info}
	export class peach_record {
		public time: number; // tag 0
		public peachId: number; // tag 1
		public playerName: string; // tag 2
	}

	function _decode_peach_record(d: SprotoTypeDeserialize) {
		let o = new peach_record;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.time = d.ri ();
				break;
			case 1:
				o.peachId = d.ri ();
				break;
			case 2:
				o.playerName = d.rs ();
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_peach_record(self: peach_record, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 3);

		if (self.time != undefined) {
			se.wi (self.time, 0);
		}

		if (self.peachId != undefined) {
			se.wi (self.peachId, 1);
		}

		if (self.playerName != undefined) {
			se.ws (self.playerName, 2);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["peach_record"] = {en: _encode_peach_record, de: _decode_peach_record}
	export class protector_task_info {
		public taskId: number; // tag 0
		public count: number; // tag 1
	}

	function _decode_protector_task_info(d: SprotoTypeDeserialize) {
		let o = new protector_task_info;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.taskId = d.ri ();
				break;
			case 1:
				o.count = d.ri ();
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_protector_task_info(self: protector_task_info, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 2);

		if (self.taskId != undefined) {
			se.wi (self.taskId, 0);
		}

		if (self.count != undefined) {
			se.wi (self.count, 1);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["protector_task_info"] = {en: _encode_protector_task_info, de: _decode_protector_task_info}
	export class sc_guild_apply_request {
		public applyinfo: guild_apply[]; // tag 0
	}

	function _decode_sc_guild_apply_request(d: SprotoTypeDeserialize) {
		let o = new sc_guild_apply_request;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.applyinfo = d.roa("guild_apply");
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_sc_guild_apply_request(self: sc_guild_apply_request, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 1);

		if (self.applyinfo != undefined) {
			se.woa ("guild_apply", self.applyinfo, 0);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["sc_guild_apply_request"] = {en: _encode_sc_guild_apply_request, de: _decode_sc_guild_apply_request}
	export class sc_guild_apply_list_request {
		public guilds: guild_summary[]; // tag 0
	}

	function _decode_sc_guild_apply_list_request(d: SprotoTypeDeserialize) {
		let o = new sc_guild_apply_list_request;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.guilds = d.roa("guild_summary");
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_sc_guild_apply_list_request(self: sc_guild_apply_list_request, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 1);

		if (self.guilds != undefined) {
			se.woa ("guild_summary", self.guilds, 0);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["sc_guild_apply_list_request"] = {en: _encode_sc_guild_apply_list_request, de: _decode_sc_guild_apply_list_request}
	export class sc_guild_autoadd_ret_request {
		public autoJoin: number; // tag 0
		public needPower: number; // tag 1
	}

	function _decode_sc_guild_autoadd_ret_request(d: SprotoTypeDeserialize) {
		let o = new sc_guild_autoadd_ret_request;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.autoJoin = d.ri ();
				break;
			case 1:
				o.needPower = d.ri ();
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_sc_guild_autoadd_ret_request(self: sc_guild_autoadd_ret_request, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 2);

		if (self.autoJoin != undefined) {
			se.wi (self.autoJoin, 0);
		}

		if (self.needPower != undefined) {
			se.wi (self.needPower, 1);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["sc_guild_autoadd_ret_request"] = {en: _encode_sc_guild_autoadd_ret_request, de: _decode_sc_guild_autoadd_ret_request}
	export class sc_guild_boss_info_request {
		public event: number; // tag 0
		public status: number; // tag 1
		public countdown: number; // tag 2
		public maxhp: number; // tag 3
		public hp: number; // tag 4
		public canreward: boolean; // tag 5
	}

	function _decode_sc_guild_boss_info_request(d: SprotoTypeDeserialize) {
		let o = new sc_guild_boss_info_request;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.event = d.ri ();
				break;
			case 1:
				o.status = d.ri ();
				break;
			case 2:
				o.countdown = d.ri ();
				break;
			case 3:
				o.maxhp = d.ri ();
				break;
			case 4:
				o.hp = d.ri ();
				break;
			case 5:
				o.canreward = d.rb ();
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_sc_guild_boss_info_request(self: sc_guild_boss_info_request, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 6);

		if (self.event != undefined) {
			se.wi (self.event, 0);
		}

		if (self.status != undefined) {
			se.wi (self.status, 1);
		}

		if (self.countdown != undefined) {
			se.wi (self.countdown, 2);
		}

		if (self.maxhp != undefined) {
			se.wi (self.maxhp, 3);
		}

		if (self.hp != undefined) {
			se.wi (self.hp, 4);
		}

		if (self.canreward != undefined) {
			se.wb (self.canreward, 5);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["sc_guild_boss_info_request"] = {en: _encode_sc_guild_boss_info_request, de: _decode_sc_guild_boss_info_request}
	export class sc_guild_change_notice_ret_request {
		public result: number; // tag 0
		public text: string; // tag 1
	}

	function _decode_sc_guild_change_notice_ret_request(d: SprotoTypeDeserialize) {
		let o = new sc_guild_change_notice_ret_request;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.result = d.ri ();
				break;
			case 1:
				o.text = d.rs ();
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_sc_guild_change_notice_ret_request(self: sc_guild_change_notice_ret_request, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 2);

		if (self.result != undefined) {
			se.wi (self.result, 0);
		}

		if (self.text != undefined) {
			se.ws (self.text, 1);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["sc_guild_change_notice_ret_request"] = {en: _encode_sc_guild_change_notice_ret_request, de: _decode_sc_guild_change_notice_ret_request}
	export class sc_guild_change_office_ret_request {
		public playerid: number; // tag 0
		public office: number; // tag 1
	}

	function _decode_sc_guild_change_office_ret_request(d: SprotoTypeDeserialize) {
		let o = new sc_guild_change_office_ret_request;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.playerid = d.ri ();
				break;
			case 1:
				o.office = d.ri ();
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_sc_guild_change_office_ret_request(self: sc_guild_change_office_ret_request, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 2);

		if (self.playerid != undefined) {
			se.wi (self.playerid, 0);
		}

		if (self.office != undefined) {
			se.wi (self.office, 1);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["sc_guild_change_office_ret_request"] = {en: _encode_sc_guild_change_office_ret_request, de: _decode_sc_guild_change_office_ret_request}
	export class sc_guild_create_ret_request {
		public result: number; // tag 0
		public id: number; // tag 1
	}

	function _decode_sc_guild_create_ret_request(d: SprotoTypeDeserialize) {
		let o = new sc_guild_create_ret_request;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.result = d.ri ();
				break;
			case 1:
				o.id = d.ri ();
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_sc_guild_create_ret_request(self: sc_guild_create_ret_request, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 2);

		if (self.result != undefined) {
			se.wi (self.result, 0);
		}

		if (self.id != undefined) {
			se.wi (self.id, 1);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["sc_guild_create_ret_request"] = {en: _encode_sc_guild_create_ret_request, de: _decode_sc_guild_create_ret_request}
	export class sc_guild_donate_info_request {
		public totalNum: number; // tag 0
	}

	function _decode_sc_guild_donate_info_request(d: SprotoTypeDeserialize) {
		let o = new sc_guild_donate_info_request;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.totalNum = d.ri ();
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_sc_guild_donate_info_request(self: sc_guild_donate_info_request, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 1);

		if (self.totalNum != undefined) {
			se.wi (self.totalNum, 0);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["sc_guild_donate_info_request"] = {en: _encode_sc_guild_donate_info_request, de: _decode_sc_guild_donate_info_request}
	export class sc_guild_donate_ret_request {
		public result: boolean; // tag 0
		public id: number; // tag 1
		public totalNum: number; // tag 2
	}

	function _decode_sc_guild_donate_ret_request(d: SprotoTypeDeserialize) {
		let o = new sc_guild_donate_ret_request;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.result = d.rb ();
				break;
			case 1:
				o.id = d.ri ();
				break;
			case 2:
				o.totalNum = d.ri ();
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_sc_guild_donate_ret_request(self: sc_guild_donate_ret_request, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 3);

		if (self.result != undefined) {
			se.wb (self.result, 0);
		}

		if (self.id != undefined) {
			se.wi (self.id, 1);
		}

		if (self.totalNum != undefined) {
			se.wi (self.totalNum, 2);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["sc_guild_donate_ret_request"] = {en: _encode_sc_guild_donate_ret_request, de: _decode_sc_guild_donate_ret_request}
	export class sc_guild_fund_request {
		public fund: number; // tag 0
	}

	function _decode_sc_guild_fund_request(d: SprotoTypeDeserialize) {
		let o = new sc_guild_fund_request;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.fund = d.ri ();
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_sc_guild_fund_request(self: sc_guild_fund_request, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 1);

		if (self.fund != undefined) {
			se.wi (self.fund, 0);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["sc_guild_fund_request"] = {en: _encode_sc_guild_fund_request, de: _decode_sc_guild_fund_request}
	export class sc_guild_info_request {
		public id: number; // tag 0
		public name: string; // tag 1
		public variable: other_guild_info; // tag 2
		public summary: guild_summary; // tag 3
	}

	function _decode_sc_guild_info_request(d: SprotoTypeDeserialize) {
		let o = new sc_guild_info_request;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.id = d.ri ();
				break;
			case 1:
				o.name = d.rs ();
				break;
			case 2:
				o.variable = d.ro("other_guild_info");
				break;
			case 3:
				o.summary = d.ro("guild_summary");
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_sc_guild_info_request(self: sc_guild_info_request, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 4);

		if (self.id != undefined) {
			se.wi (self.id, 0);
		}

		if (self.name != undefined) {
			se.ws (self.name, 1);
		}

		if (self.variable != undefined) {
			se.wo ("other_guild_info", self.variable, 2);
		}

		if (self.summary != undefined) {
			se.wo ("guild_summary", self.summary, 3);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["sc_guild_info_request"] = {en: _encode_sc_guild_info_request, de: _decode_sc_guild_info_request}
	export class sc_guild_kick_ret_request {
		public playerid: number; // tag 0
	}

	function _decode_sc_guild_kick_ret_request(d: SprotoTypeDeserialize) {
		let o = new sc_guild_kick_ret_request;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.playerid = d.ri ();
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_sc_guild_kick_ret_request(self: sc_guild_kick_ret_request, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 1);

		if (self.playerid != undefined) {
			se.wi (self.playerid, 0);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["sc_guild_kick_ret_request"] = {en: _encode_sc_guild_kick_ret_request, de: _decode_sc_guild_kick_ret_request}
	export class sc_guild_list_request {
		public guilds: guild_summary[]; // tag 0
		public receiveCount: number; // tag 1
	}

	function _decode_sc_guild_list_request(d: SprotoTypeDeserialize) {
		let o = new sc_guild_list_request;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.guilds = d.roa("guild_summary");
				break;
			case 1:
				o.receiveCount = d.ri ();
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_sc_guild_list_request(self: sc_guild_list_request, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 2);

		if (self.guilds != undefined) {
			se.woa ("guild_summary", self.guilds, 0);
		}

		if (self.receiveCount != undefined) {
			se.wi (self.receiveCount, 1);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["sc_guild_list_request"] = {en: _encode_sc_guild_list_request, de: _decode_sc_guild_list_request}
	export class sc_guild_map_one_update_request {
		public id: number; // tag 0
		public count: number; // tag 1
		public recount: number; // tag 2
		public rewardStatus: boolean; // tag 3
	}

	function _decode_sc_guild_map_one_update_request(d: SprotoTypeDeserialize) {
		let o = new sc_guild_map_one_update_request;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.id = d.ri ();
				break;
			case 1:
				o.count = d.ri ();
				break;
			case 2:
				o.recount = d.ri ();
				break;
			case 3:
				o.rewardStatus = d.rb ();
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_sc_guild_map_one_update_request(self: sc_guild_map_one_update_request, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 4);

		if (self.id != undefined) {
			se.wi (self.id, 0);
		}

		if (self.count != undefined) {
			se.wi (self.count, 1);
		}

		if (self.recount != undefined) {
			se.wi (self.recount, 2);
		}

		if (self.rewardStatus != undefined) {
			se.wb (self.rewardStatus, 3);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["sc_guild_map_one_update_request"] = {en: _encode_sc_guild_map_one_update_request, de: _decode_sc_guild_map_one_update_request}
	export class sc_guild_map_reward_request {
		public reward: reward_data[]; // tag 0
	}

	function _decode_sc_guild_map_reward_request(d: SprotoTypeDeserialize) {
		let o = new sc_guild_map_reward_request;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.reward = d.roa("reward_data");
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_sc_guild_map_reward_request(self: sc_guild_map_reward_request, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 1);

		if (self.reward != undefined) {
			se.woa ("reward_data", self.reward, 0);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["sc_guild_map_reward_request"] = {en: _encode_sc_guild_map_reward_request, de: _decode_sc_guild_map_reward_request}
	export class sc_guild_members_request {
		public members: member_info[]; // tag 0
	}

	function _decode_sc_guild_members_request(d: SprotoTypeDeserialize) {
		let o = new sc_guild_members_request;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.members = d.roa("member_info");
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_sc_guild_members_request(self: sc_guild_members_request, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 1);

		if (self.members != undefined) {
			se.woa ("member_info", self.members, 0);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["sc_guild_members_request"] = {en: _encode_sc_guild_members_request, de: _decode_sc_guild_members_request}
	export class sc_guild_notice_apply_request {
		public id: number; // tag 0
		public result: number; // tag 1
	}

	function _decode_sc_guild_notice_apply_request(d: SprotoTypeDeserialize) {
		let o = new sc_guild_notice_apply_request;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.id = d.ri ();
				break;
			case 1:
				o.result = d.ri ();
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_sc_guild_notice_apply_request(self: sc_guild_notice_apply_request, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 2);

		if (self.id != undefined) {
			se.wi (self.id, 0);
		}

		if (self.result != undefined) {
			se.wi (self.result, 1);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["sc_guild_notice_apply_request"] = {en: _encode_sc_guild_notice_apply_request, de: _decode_sc_guild_notice_apply_request}
	export class sc_guild_peach_info_request {
		public rewardMark: number; // tag 0
		public eatStatus: boolean; // tag 2
	}

	function _decode_sc_guild_peach_info_request(d: SprotoTypeDeserialize) {
		let o = new sc_guild_peach_info_request;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.rewardMark = d.ri ();
				break;
			case 2:
				o.eatStatus = d.rb ();
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_sc_guild_peach_info_request(self: sc_guild_peach_info_request, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 3);

		if (self.rewardMark != undefined) {
			se.wi (self.rewardMark, 0);
		}

		if (self.eatStatus != undefined) {
			se.wb (self.eatStatus, 2);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["sc_guild_peach_info_request"] = {en: _encode_sc_guild_peach_info_request, de: _decode_sc_guild_peach_info_request}
	export class sc_guild_peach_record_request {
		public peachExp: number; // tag 0
		public eatRecord: peach_record[]; // tag 1
	}

	function _decode_sc_guild_peach_record_request(d: SprotoTypeDeserialize) {
		let o = new sc_guild_peach_record_request;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.peachExp = d.ri ();
				break;
			case 1:
				o.eatRecord = d.roa("peach_record");
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_sc_guild_peach_record_request(self: sc_guild_peach_record_request, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 2);

		if (self.peachExp != undefined) {
			se.wi (self.peachExp, 0);
		}

		if (self.eatRecord != undefined) {
			se.woa ("peach_record", self.eatRecord, 1);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["sc_guild_peach_record_request"] = {en: _encode_sc_guild_peach_record_request, de: _decode_sc_guild_peach_record_request}
	export class sc_guild_peach_record_add_request {
		public peachExp: number; // tag 0
		public eatRecord: peach_record; // tag 1
	}

	function _decode_sc_guild_peach_record_add_request(d: SprotoTypeDeserialize) {
		let o = new sc_guild_peach_record_add_request;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.peachExp = d.ri ();
				break;
			case 1:
				o.eatRecord = d.ro("peach_record");
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_sc_guild_peach_record_add_request(self: sc_guild_peach_record_add_request, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 2);

		if (self.peachExp != undefined) {
			se.wi (self.peachExp, 0);
		}

		if (self.eatRecord != undefined) {
			se.wo ("peach_record", self.eatRecord, 1);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["sc_guild_peach_record_add_request"] = {en: _encode_sc_guild_peach_record_add_request, de: _decode_sc_guild_peach_record_add_request}
	export class sc_guild_playerinfo_request {
		public contribute: number; // tag 0
		public curcontribute: number; // tag 1
		public office: number; // tag 2
	}

	function _decode_sc_guild_playerinfo_request(d: SprotoTypeDeserialize) {
		let o = new sc_guild_playerinfo_request;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.contribute = d.ri ();
				break;
			case 1:
				o.curcontribute = d.ri ();
				break;
			case 2:
				o.office = d.ri ();
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_sc_guild_playerinfo_request(self: sc_guild_playerinfo_request, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 3);

		if (self.contribute != undefined) {
			se.wi (self.contribute, 0);
		}

		if (self.curcontribute != undefined) {
			se.wi (self.curcontribute, 1);
		}

		if (self.office != undefined) {
			se.wi (self.office, 2);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["sc_guild_playerinfo_request"] = {en: _encode_sc_guild_playerinfo_request, de: _decode_sc_guild_playerinfo_request}
	export class sc_guild_protector_info_request {
		public todayActive: number; // tag 0
		public totalActive: number; // tag 1
		public protectorLv: number; // tag 2
		public rewardMark: number; // tag 3
	}

	function _decode_sc_guild_protector_info_request(d: SprotoTypeDeserialize) {
		let o = new sc_guild_protector_info_request;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.todayActive = d.ri ();
				break;
			case 1:
				o.totalActive = d.ri ();
				break;
			case 2:
				o.protectorLv = d.ri ();
				break;
			case 3:
				o.rewardMark = d.ri ();
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_sc_guild_protector_info_request(self: sc_guild_protector_info_request, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 4);

		if (self.todayActive != undefined) {
			se.wi (self.todayActive, 0);
		}

		if (self.totalActive != undefined) {
			se.wi (self.totalActive, 1);
		}

		if (self.protectorLv != undefined) {
			se.wi (self.protectorLv, 2);
		}

		if (self.rewardMark != undefined) {
			se.wi (self.rewardMark, 3);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["sc_guild_protector_info_request"] = {en: _encode_sc_guild_protector_info_request, de: _decode_sc_guild_protector_info_request}
	export class sc_guild_protector_task_info_request {
		public taskinfos: protector_task_info[]; // tag 0
	}

	function _decode_sc_guild_protector_task_info_request(d: SprotoTypeDeserialize) {
		let o = new sc_guild_protector_task_info_request;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.taskinfos = d.roa("protector_task_info");
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_sc_guild_protector_task_info_request(self: sc_guild_protector_task_info_request, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 1);

		if (self.taskinfos != undefined) {
			se.woa ("protector_task_info", self.taskinfos, 0);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["sc_guild_protector_task_info_request"] = {en: _encode_sc_guild_protector_task_info_request, de: _decode_sc_guild_protector_task_info_request}
	export class sc_guild_record_add_request {
		public record: guild_record; // tag 0
	}

	function _decode_sc_guild_record_add_request(d: SprotoTypeDeserialize) {
		let o = new sc_guild_record_add_request;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.record = d.ro("guild_record");
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_sc_guild_record_add_request(self: sc_guild_record_add_request, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 1);

		if (self.record != undefined) {
			se.wo ("guild_record", self.record, 0);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["sc_guild_record_add_request"] = {en: _encode_sc_guild_record_add_request, de: _decode_sc_guild_record_add_request}
	export class sc_guild_record_data_request {
		public records: guild_record[]; // tag 0
	}

	function _decode_sc_guild_record_data_request(d: SprotoTypeDeserialize) {
		let o = new sc_guild_record_data_request;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.records = d.roa("guild_record");
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_sc_guild_record_data_request(self: sc_guild_record_data_request, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 1);

		if (self.records != undefined) {
			se.woa ("guild_record", self.records, 0);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["sc_guild_record_data_request"] = {en: _encode_sc_guild_record_data_request, de: _decode_sc_guild_record_data_request}
	export class sc_guild_rename_request {
		public count: number; // tag 0
	}

	function _decode_sc_guild_rename_request(d: SprotoTypeDeserialize) {
		let o = new sc_guild_rename_request;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.count = d.ri ();
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_sc_guild_rename_request(self: sc_guild_rename_request, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 1);

		if (self.count != undefined) {
			se.wi (self.count, 0);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["sc_guild_rename_request"] = {en: _encode_sc_guild_rename_request, de: _decode_sc_guild_rename_request}
	export class sc_guild_rename_ret_request {
		public newGuildName: string; // tag 0
		public errorInfo: string; // tag 1
	}

	function _decode_sc_guild_rename_ret_request(d: SprotoTypeDeserialize) {
		let o = new sc_guild_rename_ret_request;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.newGuildName = d.rs ();
				break;
			case 1:
				o.errorInfo = d.rs ();
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_sc_guild_rename_ret_request(self: sc_guild_rename_ret_request, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 2);

		if (self.newGuildName != undefined) {
			se.ws (self.newGuildName, 0);
		}

		if (self.errorInfo != undefined) {
			se.ws (self.errorInfo, 1);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["sc_guild_rename_ret_request"] = {en: _encode_sc_guild_rename_ret_request, de: _decode_sc_guild_rename_ret_request}
	export class sc_guild_robot_datas_request {
		public robotlist: guild_map_shows[]; // tag 0
	}

	function _decode_sc_guild_robot_datas_request(d: SprotoTypeDeserialize) {
		let o = new sc_guild_robot_datas_request;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.robotlist = d.roa("guild_map_shows");
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_sc_guild_robot_datas_request(self: sc_guild_robot_datas_request, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 1);

		if (self.robotlist != undefined) {
			se.woa ("guild_map_shows", self.robotlist, 0);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["sc_guild_robot_datas_request"] = {en: _encode_sc_guild_robot_datas_request, de: _decode_sc_guild_robot_datas_request}
	export class sc_guild_skill_info_request {
		public skillInfos: skill_info[]; // tag 0
	}

	function _decode_sc_guild_skill_info_request(d: SprotoTypeDeserialize) {
		let o = new sc_guild_skill_info_request;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.skillInfos = d.roa("skill_info");
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_sc_guild_skill_info_request(self: sc_guild_skill_info_request, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 1);

		if (self.skillInfos != undefined) {
			se.woa ("skill_info", self.skillInfos, 0);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["sc_guild_skill_info_request"] = {en: _encode_sc_guild_skill_info_request, de: _decode_sc_guild_skill_info_request}
	export class sc_guild_skill_learn_ret_request {
		public skillInfo: skill_info; // tag 0
		public learnPos: number; // tag 1
	}

	function _decode_sc_guild_skill_learn_ret_request(d: SprotoTypeDeserialize) {
		let o = new sc_guild_skill_learn_ret_request;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.skillInfo = d.ro("skill_info");
				break;
			case 1:
				o.learnPos = d.ri ();
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_sc_guild_skill_learn_ret_request(self: sc_guild_skill_learn_ret_request, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 2);

		if (self.skillInfo != undefined) {
			se.wo ("skill_info", self.skillInfo, 0);
		}

		if (self.learnPos != undefined) {
			se.wi (self.learnPos, 1);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["sc_guild_skill_learn_ret_request"] = {en: _encode_sc_guild_skill_learn_ret_request, de: _decode_sc_guild_skill_learn_ret_request}
	export class skill_info {
		public posId: number; // tag 0
		public level: number; // tag 1
	}

	function _decode_skill_info(d: SprotoTypeDeserialize) {
		let o = new skill_info;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.posId = d.ri ();
				break;
			case 1:
				o.level = d.ri ();
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_skill_info(self: skill_info, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 2);

		if (self.posId != undefined) {
			se.wi (self.posId, 0);
		}

		if (self.level != undefined) {
			se.wi (self.level, 1);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["skill_info"] = {en: _encode_skill_info, de: _decode_skill_info}
}

