// Generated by sprotodump. DO NOT EDIT!

namespace Sproto { 
	export class guard_info {
		public name: string; // tag 0
		public level: number; // tag 1
		public power: number; // tag 2
		public hp: number; // tag 3
		public job: number; // tag 4
		public sex: number; // tag 5
	}

	function _decode_guard_info(d: SprotoTypeDeserialize) {
		let o = new guard_info;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.name = d.rs ();
				break;
			case 1:
				o.level = d.ri ();
				break;
			case 2:
				o.power = d.ri ();
				break;
			case 3:
				o.hp = d.ri ();
				break;
			case 4:
				o.job = d.ri ();
				break;
			case 5:
				o.sex = d.ri ();
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_guard_info(self: guard_info, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 6);

		if (self.name != undefined) {
			se.ws (self.name, 0);
		}

		if (self.level != undefined) {
			se.wi (self.level, 1);
		}

		if (self.power != undefined) {
			se.wi (self.power, 2);
		}

		if (self.hp != undefined) {
			se.wi (self.hp, 3);
		}

		if (self.job != undefined) {
			se.wi (self.job, 4);
		}

		if (self.sex != undefined) {
			se.wi (self.sex, 5);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["guard_info"] = {en: _encode_guard_info, de: _decode_guard_info}
	export class mine_info {
		public status: number; // tag 0
		public guard: guard_info[]; // tag 1
		public mineId: number; // tag 2
		public guildName: string; // tag 3
	}

	function _decode_mine_info(d: SprotoTypeDeserialize) {
		let o = new mine_info;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.status = d.ri ();
				break;
			case 1:
				o.guard = d.roa("guard_info");
				break;
			case 2:
				o.mineId = d.ri ();
				break;
			case 3:
				o.guildName = d.rs ();
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_mine_info(self: mine_info, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 4);

		if (self.status != undefined) {
			se.wi (self.status, 0);
		}

		if (self.guard != undefined) {
			se.woa ("guard_info", self.guard, 1);
		}

		if (self.mineId != undefined) {
			se.wi (self.mineId, 2);
		}

		if (self.guildName != undefined) {
			se.ws (self.guildName, 3);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["mine_info"] = {en: _encode_mine_info, de: _decode_mine_info}
	export class sc_guildmine_mine_info_request {
		public mineinfos: mine_info[]; // tag 0
	}

	function _decode_sc_guildmine_mine_info_request(d: SprotoTypeDeserialize) {
		let o = new sc_guildmine_mine_info_request;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.mineinfos = d.roa("mine_info");
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_sc_guildmine_mine_info_request(self: sc_guildmine_mine_info_request, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 1);

		if (self.mineinfos != undefined) {
			se.woa ("mine_info", self.mineinfos, 0);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["sc_guildmine_mine_info_request"] = {en: _encode_sc_guildmine_mine_info_request, de: _decode_sc_guildmine_mine_info_request}
	export class sc_guildmine_mine_mystatus_request {
		public status: number; // tag 0
		public mineId: number; // tag 1
		public gatherTime: number; // tag 2
		public chainrate: number; // tag 3
		public attackTime: number; // tag 4
		public guildRank: number; // tag 5
		public guildScore: number; // tag 6
	}

	function _decode_sc_guildmine_mine_mystatus_request(d: SprotoTypeDeserialize) {
		let o = new sc_guildmine_mine_mystatus_request;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.status = d.ri ();
				break;
			case 1:
				o.mineId = d.ri ();
				break;
			case 2:
				o.gatherTime = d.ri ();
				break;
			case 3:
				o.chainrate = d.ri ();
				break;
			case 4:
				o.attackTime = d.ri ();
				break;
			case 5:
				o.guildRank = d.ri ();
				break;
			case 6:
				o.guildScore = d.ri ();
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_sc_guildmine_mine_mystatus_request(self: sc_guildmine_mine_mystatus_request, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 7);

		if (self.status != undefined) {
			se.wi (self.status, 0);
		}

		if (self.mineId != undefined) {
			se.wi (self.mineId, 1);
		}

		if (self.gatherTime != undefined) {
			se.wi (self.gatherTime, 2);
		}

		if (self.chainrate != undefined) {
			se.wi (self.chainrate, 3);
		}

		if (self.attackTime != undefined) {
			se.wi (self.attackTime, 4);
		}

		if (self.guildRank != undefined) {
			se.wi (self.guildRank, 5);
		}

		if (self.guildScore != undefined) {
			se.wi (self.guildScore, 6);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["sc_guildmine_mine_mystatus_request"] = {en: _encode_sc_guildmine_mine_mystatus_request, de: _decode_sc_guildmine_mine_mystatus_request}
	export class sc_guildmine_mine_one_info_request {
		public mineinfo: mine_info; // tag 0
	}

	function _decode_sc_guildmine_mine_one_info_request(d: SprotoTypeDeserialize) {
		let o = new sc_guildmine_mine_one_info_request;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.mineinfo = d.ro("mine_info");
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_sc_guildmine_mine_one_info_request(self: sc_guildmine_mine_one_info_request, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 1);

		if (self.mineinfo != undefined) {
			se.wo ("mine_info", self.mineinfo, 0);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["sc_guildmine_mine_one_info_request"] = {en: _encode_sc_guildmine_mine_one_info_request, de: _decode_sc_guildmine_mine_one_info_request}
	export class sc_guildmine_rob_info_request {
		public name: string; // tag 0
		public level: number; // tag 1
		public serverId: number; // tag 2
	}

	function _decode_sc_guildmine_rob_info_request(d: SprotoTypeDeserialize) {
		let o = new sc_guildmine_rob_info_request;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.name = d.rs ();
				break;
			case 1:
				o.level = d.ri ();
				break;
			case 2:
				o.serverId = d.ri ();
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_sc_guildmine_rob_info_request(self: sc_guildmine_rob_info_request, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 3);

		if (self.name != undefined) {
			se.ws (self.name, 0);
		}

		if (self.level != undefined) {
			se.wi (self.level, 1);
		}

		if (self.serverId != undefined) {
			se.wi (self.serverId, 2);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["sc_guildmine_rob_info_request"] = {en: _encode_sc_guildmine_rob_info_request, de: _decode_sc_guildmine_rob_info_request}
	export class sc_guildmine_score_rank_day_request {
		public rankType: number; // tag 0
		public rankdatas: score_info[]; // tag 1
	}

	function _decode_sc_guildmine_score_rank_day_request(d: SprotoTypeDeserialize) {
		let o = new sc_guildmine_score_rank_day_request;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.rankType = d.ri ();
				break;
			case 1:
				o.rankdatas = d.roa("score_info");
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_sc_guildmine_score_rank_day_request(self: sc_guildmine_score_rank_day_request, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 2);

		if (self.rankType != undefined) {
			se.wi (self.rankType, 0);
		}

		if (self.rankdatas != undefined) {
			se.woa ("score_info", self.rankdatas, 1);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["sc_guildmine_score_rank_day_request"] = {en: _encode_sc_guildmine_score_rank_day_request, de: _decode_sc_guildmine_score_rank_day_request}
	export class score_info {
		public guildId: number; // tag 0
		public guildName: string; // tag 1
		public score: number; // tag 2
		public rank: number; // tag 3
		public serverId: number; // tag 4
	}

	function _decode_score_info(d: SprotoTypeDeserialize) {
		let o = new score_info;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.guildId = d.ri ();
				break;
			case 1:
				o.guildName = d.rs ();
				break;
			case 2:
				o.score = d.ri ();
				break;
			case 3:
				o.rank = d.ri ();
				break;
			case 4:
				o.serverId = d.ri ();
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_score_info(self: score_info, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 5);

		if (self.guildId != undefined) {
			se.wi (self.guildId, 0);
		}

		if (self.guildName != undefined) {
			se.ws (self.guildName, 1);
		}

		if (self.score != undefined) {
			se.wi (self.score, 2);
		}

		if (self.rank != undefined) {
			se.wi (self.rank, 3);
		}

		if (self.serverId != undefined) {
			se.wi (self.serverId, 4);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["score_info"] = {en: _encode_score_info, de: _decode_score_info}
}

