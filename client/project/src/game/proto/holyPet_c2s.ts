// Generated by sprotodump. DO NOT EDIT!

namespace Sproto { 
	export class cs_holy_pet_get_info_request {
	}

	function _decode_cs_holy_pet_get_info_request(d: SprotoTypeDeserialize) {
		let o = new cs_holy_pet_get_info_request;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_cs_holy_pet_get_info_request(self: cs_holy_pet_get_info_request, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 0);

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["cs_holy_pet_get_info_request"] = {en: _encode_cs_holy_pet_get_info_request, de: _decode_cs_holy_pet_get_info_request}
	export class cs_holy_pet_get_info_response {
		public data: holy_pet_msg[]; // tag 0
		public luckLog: number[]; // tag 1
	}

	function _decode_cs_holy_pet_get_info_response(d: SprotoTypeDeserialize) {
		let o = new cs_holy_pet_get_info_response;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.data = d.roa("holy_pet_msg");
				break;
			case 1:
				o.luckLog = d.ria ();
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_cs_holy_pet_get_info_response(self: cs_holy_pet_get_info_response, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 2);

		if (self.data != undefined) {
			se.woa ("holy_pet_msg", self.data, 0);
		}

		if (self.luckLog != undefined) {
			se.wia (self.luckLog, 1);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["cs_holy_pet_get_info_response"] = {en: _encode_cs_holy_pet_get_info_response, de: _decode_cs_holy_pet_get_info_response}
	export class cs_holy_pet_get_reward_request {
		public no: number; // tag 0
	}

	function _decode_cs_holy_pet_get_reward_request(d: SprotoTypeDeserialize) {
		let o = new cs_holy_pet_get_reward_request;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.no = d.ri ();
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_cs_holy_pet_get_reward_request(self: cs_holy_pet_get_reward_request, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 1);

		if (self.no != undefined) {
			se.wi (self.no, 0);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["cs_holy_pet_get_reward_request"] = {en: _encode_cs_holy_pet_get_reward_request, de: _decode_cs_holy_pet_get_reward_request}
	export class cs_holy_pet_luck_draw_request {
	}

	function _decode_cs_holy_pet_luck_draw_request(d: SprotoTypeDeserialize) {
		let o = new cs_holy_pet_luck_draw_request;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_cs_holy_pet_luck_draw_request(self: cs_holy_pet_luck_draw_request, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 0);

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["cs_holy_pet_luck_draw_request"] = {en: _encode_cs_holy_pet_luck_draw_request, de: _decode_cs_holy_pet_luck_draw_request}
	export class cs_holy_pet_luck_draw_response {
		public ret: boolean; // tag 0
		public no: number; // tag 1
		public data: holy_pet_msg[]; // tag 2
		public luckLog: number[]; // tag 3
	}

	function _decode_cs_holy_pet_luck_draw_response(d: SprotoTypeDeserialize) {
		let o = new cs_holy_pet_luck_draw_response;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.ret = d.rb ();
				break;
			case 1:
				o.no = d.ri ();
				break;
			case 2:
				o.data = d.roa("holy_pet_msg");
				break;
			case 3:
				o.luckLog = d.ria ();
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_cs_holy_pet_luck_draw_response(self: cs_holy_pet_luck_draw_response, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 4);

		if (self.ret != undefined) {
			se.wb (self.ret, 0);
		}

		if (self.no != undefined) {
			se.wi (self.no, 1);
		}

		if (self.data != undefined) {
			se.woa ("holy_pet_msg", self.data, 2);
		}

		if (self.luckLog != undefined) {
			se.wia (self.luckLog, 3);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["cs_holy_pet_luck_draw_response"] = {en: _encode_cs_holy_pet_luck_draw_response, de: _decode_cs_holy_pet_luck_draw_response}
	export class holy_pet_msg {
		public name: string; // tag 0
		public id: number; // tag 1
	}

	function _decode_holy_pet_msg(d: SprotoTypeDeserialize) {
		let o = new holy_pet_msg;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.name = d.rs ();
				break;
			case 1:
				o.id = d.ri ();
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_holy_pet_msg(self: holy_pet_msg, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 2);

		if (self.name != undefined) {
			se.ws (self.name, 0);
		}

		if (self.id != undefined) {
			se.wi (self.id, 1);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["holy_pet_msg"] = {en: _encode_holy_pet_msg, de: _decode_holy_pet_msg}
}

