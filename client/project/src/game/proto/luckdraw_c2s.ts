// Generated by sprotodump. DO NOT EDIT!

namespace Sproto { 
	export class cs_luck_draw_get_info_request {
	}

	function _decode_cs_luck_draw_get_info_request(d: SprotoTypeDeserialize) {
		let o = new cs_luck_draw_get_info_request;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_cs_luck_draw_get_info_request(self: cs_luck_draw_get_info_request, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 0);

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["cs_luck_draw_get_info_request"] = {en: _encode_cs_luck_draw_get_info_request, de: _decode_cs_luck_draw_get_info_request}
	export class cs_luck_draw_get_info_response {
		public data: luck_draw_tianshen[]; // tag 0
	}

	function _decode_cs_luck_draw_get_info_response(d: SprotoTypeDeserialize) {
		let o = new cs_luck_draw_get_info_response;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.data = d.roa("luck_draw_tianshen");
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_cs_luck_draw_get_info_response(self: cs_luck_draw_get_info_response, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 1);

		if (self.data != undefined) {
			se.woa ("luck_draw_tianshen", self.data, 0);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["cs_luck_draw_get_info_response"] = {en: _encode_cs_luck_draw_get_info_response, de: _decode_cs_luck_draw_get_info_response}
	export class cs_luck_draw_tianshen_request {
		public typ: number; // tag 0
	}

	function _decode_cs_luck_draw_tianshen_request(d: SprotoTypeDeserialize) {
		let o = new cs_luck_draw_tianshen_request;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.typ = d.ri ();
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_cs_luck_draw_tianshen_request(self: cs_luck_draw_tianshen_request, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 1);

		if (self.typ != undefined) {
			se.wi (self.typ, 0);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["cs_luck_draw_tianshen_request"] = {en: _encode_cs_luck_draw_tianshen_request, de: _decode_cs_luck_draw_tianshen_request}
	export class cs_luck_draw_tianshen_response {
		public ret: boolean; // tag 0
		public no: number; // tag 1
		public data: luck_draw_tianshen[]; // tag 2
	}

	function _decode_cs_luck_draw_tianshen_response(d: SprotoTypeDeserialize) {
		let o = new cs_luck_draw_tianshen_response;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.ret = d.rb ();
				break;
			case 1:
				o.no = d.ri ();
				break;
			case 2:
				o.data = d.roa("luck_draw_tianshen");
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_cs_luck_draw_tianshen_response(self: cs_luck_draw_tianshen_response, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 3);

		if (self.ret != undefined) {
			se.wb (self.ret, 0);
		}

		if (self.no != undefined) {
			se.wi (self.no, 1);
		}

		if (self.data != undefined) {
			se.woa ("luck_draw_tianshen", self.data, 2);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["cs_luck_draw_tianshen_response"] = {en: _encode_cs_luck_draw_tianshen_response, de: _decode_cs_luck_draw_tianshen_response}
	export class luck_draw_tianshen {
		public name: string; // tag 0
		public id: number; // tag 1
	}

	function _decode_luck_draw_tianshen(d: SprotoTypeDeserialize) {
		let o = new luck_draw_tianshen;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.name = d.rs ();
				break;
			case 1:
				o.id = d.ri ();
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_luck_draw_tianshen(self: luck_draw_tianshen, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 2);

		if (self.name != undefined) {
			se.ws (self.name, 0);
		}

		if (self.id != undefined) {
			se.wi (self.id, 1);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["luck_draw_tianshen"] = {en: _encode_luck_draw_tianshen, de: _decode_luck_draw_tianshen}
}

