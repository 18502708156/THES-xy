// Generated by sprotodump. DO NOT EDIT!

namespace Sproto { 
	export class mail_data {
		public handle: number; // tag 0
		public title: string; // tag 1
		public times: number; // tag 2
		public type: number; // tag 3
		public receive: number; // tag 4
	}

	function _decode_mail_data(d: SprotoTypeDeserialize) {
		let o = new mail_data;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.handle = d.ri ();
				break;
			case 1:
				o.title = d.rs ();
				break;
			case 2:
				o.times = d.ri ();
				break;
			case 3:
				o.type = d.ri ();
				break;
			case 4:
				o.receive = d.ri ();
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_mail_data(self: mail_data, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 5);

		if (self.handle != undefined) {
			se.wi (self.handle, 0);
		}

		if (self.title != undefined) {
			se.ws (self.title, 1);
		}

		if (self.times != undefined) {
			se.wi (self.times, 2);
		}

		if (self.type != undefined) {
			se.wi (self.type, 3);
		}

		if (self.receive != undefined) {
			se.wi (self.receive, 4);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["mail_data"] = {en: _encode_mail_data, de: _decode_mail_data}
	export class mail_update_data {
		public handle: number; // tag 0
		public type: number; // tag 1
		public receive: number; // tag 2
	}

	function _decode_mail_update_data(d: SprotoTypeDeserialize) {
		let o = new mail_update_data;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.handle = d.ri ();
				break;
			case 1:
				o.type = d.ri ();
				break;
			case 2:
				o.receive = d.ri ();
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_mail_update_data(self: mail_update_data, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 3);

		if (self.handle != undefined) {
			se.wi (self.handle, 0);
		}

		if (self.type != undefined) {
			se.wi (self.type, 1);
		}

		if (self.receive != undefined) {
			se.wi (self.receive, 2);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["mail_update_data"] = {en: _encode_mail_update_data, de: _decode_mail_update_data}
	export class sc_mail_add_info_request {
		public mailData: mail_data; // tag 0
	}

	function _decode_sc_mail_add_info_request(d: SprotoTypeDeserialize) {
		let o = new sc_mail_add_info_request;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.mailData = d.ro("mail_data");
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_sc_mail_add_info_request(self: sc_mail_add_info_request, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 1);

		if (self.mailData != undefined) {
			se.wo ("mail_data", self.mailData, 0);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["sc_mail_add_info_request"] = {en: _encode_sc_mail_add_info_request, de: _decode_sc_mail_add_info_request}
	export class sc_mail_delete_request {
		public handle: number; // tag 0
	}

	function _decode_sc_mail_delete_request(d: SprotoTypeDeserialize) {
		let o = new sc_mail_delete_request;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.handle = d.ri ();
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_sc_mail_delete_request(self: sc_mail_delete_request, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 1);

		if (self.handle != undefined) {
			se.wi (self.handle, 0);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["sc_mail_delete_request"] = {en: _encode_sc_mail_delete_request, de: _decode_sc_mail_delete_request}
	export class sc_mail_detailed_info_request {
		public mailData: mail_data; // tag 0
		public text: string; // tag 1
		public rewardData: reward_data[]; // tag 2
	}

	function _decode_sc_mail_detailed_info_request(d: SprotoTypeDeserialize) {
		let o = new sc_mail_detailed_info_request;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.mailData = d.ro("mail_data");
				break;
			case 1:
				o.text = d.rs ();
				break;
			case 2:
				o.rewardData = d.roa("reward_data");
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_sc_mail_detailed_info_request(self: sc_mail_detailed_info_request, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 3);

		if (self.mailData != undefined) {
			se.wo ("mail_data", self.mailData, 0);
		}

		if (self.text != undefined) {
			se.ws (self.text, 1);
		}

		if (self.rewardData != undefined) {
			se.woa ("reward_data", self.rewardData, 2);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["sc_mail_detailed_info_request"] = {en: _encode_sc_mail_detailed_info_request, de: _decode_sc_mail_detailed_info_request}
	export class sc_mail_init_info_request {
		public mailData: mail_data[]; // tag 0
	}

	function _decode_sc_mail_init_info_request(d: SprotoTypeDeserialize) {
		let o = new sc_mail_init_info_request;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.mailData = d.roa("mail_data");
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_sc_mail_init_info_request(self: sc_mail_init_info_request, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 1);

		if (self.mailData != undefined) {
			se.woa ("mail_data", self.mailData, 0);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["sc_mail_init_info_request"] = {en: _encode_sc_mail_init_info_request, de: _decode_sc_mail_init_info_request}
	export class sc_mail_update_info_request {
		public updateData: mail_update_data[]; // tag 0
		public showWarnBagSpace: boolean; // tag 1
	}

	function _decode_sc_mail_update_info_request(d: SprotoTypeDeserialize) {
		let o = new sc_mail_update_info_request;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.updateData = d.roa("mail_update_data");
				break;
			case 1:
				o.showWarnBagSpace = d.rb ();
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_sc_mail_update_info_request(self: sc_mail_update_info_request, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 2);

		if (self.updateData != undefined) {
			se.woa ("mail_update_data", self.updateData, 0);
		}

		if (self.showWarnBagSpace != undefined) {
			se.wb (self.showWarnBagSpace, 1);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["sc_mail_update_info_request"] = {en: _encode_sc_mail_update_info_request, de: _decode_sc_mail_update_info_request}
}

