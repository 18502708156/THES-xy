// Generated by sprotodump. DO NOT EDIT!

namespace Sproto { 
	export class cs_marry_answer_request {
		public agree: number; // tag 0
		public fromid: number; // tag 1
	}

	function _decode_cs_marry_answer_request(d: SprotoTypeDeserialize) {
		let o = new cs_marry_answer_request;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.agree = d.ri ();
				break;
			case 1:
				o.fromid = d.ri ();
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_cs_marry_answer_request(self: cs_marry_answer_request, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 2);

		if (self.agree != undefined) {
			se.wi (self.agree, 0);
		}

		if (self.fromid != undefined) {
			se.wi (self.fromid, 1);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["cs_marry_answer_request"] = {en: _encode_cs_marry_answer_request, de: _decode_cs_marry_answer_request}
	export class cs_marry_flower_request {
		public quantity: number; // tag 0
		public count: number; // tag 1
		public autobuy: number; // tag 2
	}

	function _decode_cs_marry_flower_request(d: SprotoTypeDeserialize) {
		let o = new cs_marry_flower_request;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.quantity = d.ri ();
				break;
			case 1:
				o.count = d.ri ();
				break;
			case 2:
				o.autobuy = d.ri ();
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_cs_marry_flower_request(self: cs_marry_flower_request, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 3);

		if (self.quantity != undefined) {
			se.wi (self.quantity, 0);
		}

		if (self.count != undefined) {
			se.wi (self.count, 1);
		}

		if (self.autobuy != undefined) {
			se.wi (self.autobuy, 2);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["cs_marry_flower_request"] = {en: _encode_cs_marry_flower_request, de: _decode_cs_marry_flower_request}
	export class cs_marry_flower_response {
		public ret: number; // tag 0
	}

	function _decode_cs_marry_flower_response(d: SprotoTypeDeserialize) {
		let o = new cs_marry_flower_response;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.ret = d.ri ();
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_cs_marry_flower_response(self: cs_marry_flower_response, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 1);

		if (self.ret != undefined) {
			se.wi (self.ret, 0);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["cs_marry_flower_response"] = {en: _encode_cs_marry_flower_response, de: _decode_cs_marry_flower_response}
	export class cs_marry_greeting_request {
		public dbid: number; // tag 0
		public quantity: number; // tag 1
	}

	function _decode_cs_marry_greeting_request(d: SprotoTypeDeserialize) {
		let o = new cs_marry_greeting_request;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.dbid = d.ri ();
				break;
			case 1:
				o.quantity = d.ri ();
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_cs_marry_greeting_request(self: cs_marry_greeting_request, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 2);

		if (self.dbid != undefined) {
			se.wi (self.dbid, 0);
		}

		if (self.quantity != undefined) {
			se.wi (self.quantity, 1);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["cs_marry_greeting_request"] = {en: _encode_cs_marry_greeting_request, de: _decode_cs_marry_greeting_request}
	export class cs_marry_greeting_response {
		public ret: number; // tag 0
	}

	function _decode_cs_marry_greeting_response(d: SprotoTypeDeserialize) {
		let o = new cs_marry_greeting_response;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.ret = d.ri ();
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_cs_marry_greeting_response(self: cs_marry_greeting_response, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 1);

		if (self.ret != undefined) {
			se.wi (self.ret, 0);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["cs_marry_greeting_response"] = {en: _encode_cs_marry_greeting_response, de: _decode_cs_marry_greeting_response}
	export class cs_marry_house_grade_request {
		public grade: number; // tag 0
	}

	function _decode_cs_marry_house_grade_request(d: SprotoTypeDeserialize) {
		let o = new cs_marry_house_grade_request;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.grade = d.ri ();
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_cs_marry_house_grade_request(self: cs_marry_house_grade_request, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 1);

		if (self.grade != undefined) {
			se.wi (self.grade, 0);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["cs_marry_house_grade_request"] = {en: _encode_cs_marry_house_grade_request, de: _decode_cs_marry_house_grade_request}
	export class cs_marry_house_grade_response {
		public ret: number; // tag 0
	}

	function _decode_cs_marry_house_grade_response(d: SprotoTypeDeserialize) {
		let o = new cs_marry_house_grade_response;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.ret = d.ri ();
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_cs_marry_house_grade_response(self: cs_marry_house_grade_response, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 1);

		if (self.ret != undefined) {
			se.wi (self.ret, 0);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["cs_marry_house_grade_response"] = {en: _encode_cs_marry_house_grade_response, de: _decode_cs_marry_house_grade_response}
	export class cs_marry_love_revert_request {
		public lovetype: number; // tag 0
	}

	function _decode_cs_marry_love_revert_request(d: SprotoTypeDeserialize) {
		let o = new cs_marry_love_revert_request;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.lovetype = d.ri ();
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_cs_marry_love_revert_request(self: cs_marry_love_revert_request, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 1);

		if (self.lovetype != undefined) {
			se.wi (self.lovetype, 0);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["cs_marry_love_revert_request"] = {en: _encode_cs_marry_love_revert_request, de: _decode_cs_marry_love_revert_request}
	export class cs_marry_love_revert_response {
		public ret: number; // tag 0
	}

	function _decode_cs_marry_love_revert_response(d: SprotoTypeDeserialize) {
		let o = new cs_marry_love_revert_response;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.ret = d.ri ();
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_cs_marry_love_revert_response(self: cs_marry_love_revert_response, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 1);

		if (self.ret != undefined) {
			se.wi (self.ret, 0);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["cs_marry_love_revert_response"] = {en: _encode_cs_marry_love_revert_response, de: _decode_cs_marry_love_revert_response}
	export class cs_marry_love_use_request {
		public lovetype: number; // tag 0
	}

	function _decode_cs_marry_love_use_request(d: SprotoTypeDeserialize) {
		let o = new cs_marry_love_use_request;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.lovetype = d.ri ();
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_cs_marry_love_use_request(self: cs_marry_love_use_request, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 1);

		if (self.lovetype != undefined) {
			se.wi (self.lovetype, 0);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["cs_marry_love_use_request"] = {en: _encode_cs_marry_love_use_request, de: _decode_cs_marry_love_use_request}
	export class cs_marry_love_use_response {
		public ret: number; // tag 0
	}

	function _decode_cs_marry_love_use_response(d: SprotoTypeDeserialize) {
		let o = new cs_marry_love_use_response;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.ret = d.ri ();
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_cs_marry_love_use_response(self: cs_marry_love_use_response, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 1);

		if (self.ret != undefined) {
			se.wi (self.ret, 0);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["cs_marry_love_use_response"] = {en: _encode_cs_marry_love_use_response, de: _decode_cs_marry_love_use_response}
	export class cs_marry_propose_request {
		public targetid: number; // tag 0
		public grade: number; // tag 1
		public spouse: number; // tag 2
	}

	function _decode_cs_marry_propose_request(d: SprotoTypeDeserialize) {
		let o = new cs_marry_propose_request;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.targetid = d.ri ();
				break;
			case 1:
				o.grade = d.ri ();
				break;
			case 2:
				o.spouse = d.ri ();
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_cs_marry_propose_request(self: cs_marry_propose_request, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 3);

		if (self.targetid != undefined) {
			se.wi (self.targetid, 0);
		}

		if (self.grade != undefined) {
			se.wi (self.grade, 1);
		}

		if (self.spouse != undefined) {
			se.wi (self.spouse, 2);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["cs_marry_propose_request"] = {en: _encode_cs_marry_propose_request, de: _decode_cs_marry_propose_request}
	export class cs_marry_propose_response {
		public ret: number; // tag 0
	}

	function _decode_cs_marry_propose_response(d: SprotoTypeDeserialize) {
		let o = new cs_marry_propose_response;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.ret = d.ri ();
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_cs_marry_propose_response(self: cs_marry_propose_response, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 1);

		if (self.ret != undefined) {
			se.wi (self.ret, 0);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["cs_marry_propose_response"] = {en: _encode_cs_marry_propose_response, de: _decode_cs_marry_propose_response}
	export class cs_use_gift_request {
		public quantity: number; // tag 0
		public count: number; // tag 1
	}

	function _decode_cs_use_gift_request(d: SprotoTypeDeserialize) {
		let o = new cs_use_gift_request;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.quantity = d.ri ();
				break;
			case 1:
				o.count = d.ri ();
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_cs_use_gift_request(self: cs_use_gift_request, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 2);

		if (self.quantity != undefined) {
			se.wi (self.quantity, 0);
		}

		if (self.count != undefined) {
			se.wi (self.count, 1);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["cs_use_gift_request"] = {en: _encode_cs_use_gift_request, de: _decode_cs_use_gift_request}
}

