// Generated by sprotodump. DO NOT EDIT!

namespace Sproto { 
	export class cs_pet_active_request {
		public id: number; // tag 0
	}

	function _decode_cs_pet_active_request(d: SprotoTypeDeserialize) {
		let o = new cs_pet_active_request;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.id = d.ri ();
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_cs_pet_active_request(self: cs_pet_active_request, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 1);

		if (self.id != undefined) {
			se.wi (self.id, 0);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["cs_pet_active_request"] = {en: _encode_cs_pet_active_request, de: _decode_cs_pet_active_request}
	export class cs_pet_active_response {
		public ret: boolean; // tag 0
	}

	function _decode_cs_pet_active_response(d: SprotoTypeDeserialize) {
		let o = new cs_pet_active_response;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.ret = d.rb ();
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_cs_pet_active_response(self: cs_pet_active_response, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 1);

		if (self.ret != undefined) {
			se.wb (self.ret, 0);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["cs_pet_active_response"] = {en: _encode_cs_pet_active_response, de: _decode_cs_pet_active_response}
	export class cs_pet_addexp_request {
		public id: number; // tag 0
		public autoBuy: number; // tag 1
	}

	function _decode_cs_pet_addexp_request(d: SprotoTypeDeserialize) {
		let o = new cs_pet_addexp_request;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.id = d.ri ();
				break;
			case 1:
				o.autoBuy = d.ri ();
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_cs_pet_addexp_request(self: cs_pet_addexp_request, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 2);

		if (self.id != undefined) {
			se.wi (self.id, 0);
		}

		if (self.autoBuy != undefined) {
			se.wi (self.autoBuy, 1);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["cs_pet_addexp_request"] = {en: _encode_cs_pet_addexp_request, de: _decode_cs_pet_addexp_request}
	export class cs_pet_addexp_response {
		public ret: boolean; // tag 0
		public exp: number; // tag 1
		public level: number; // tag 2
	}

	function _decode_cs_pet_addexp_response(d: SprotoTypeDeserialize) {
		let o = new cs_pet_addexp_response;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.ret = d.rb ();
				break;
			case 1:
				o.exp = d.ri ();
				break;
			case 2:
				o.level = d.ri ();
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_cs_pet_addexp_response(self: cs_pet_addexp_response, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 3);

		if (self.ret != undefined) {
			se.wb (self.ret, 0);
		}

		if (self.exp != undefined) {
			se.wi (self.exp, 1);
		}

		if (self.level != undefined) {
			se.wi (self.level, 2);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["cs_pet_addexp_response"] = {en: _encode_cs_pet_addexp_response, de: _decode_cs_pet_addexp_response}
	export class cs_pet_addgift_request {
		public id: number; // tag 0
	}

	function _decode_cs_pet_addgift_request(d: SprotoTypeDeserialize) {
		let o = new cs_pet_addgift_request;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.id = d.ri ();
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_cs_pet_addgift_request(self: cs_pet_addgift_request, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 1);

		if (self.id != undefined) {
			se.wi (self.id, 0);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["cs_pet_addgift_request"] = {en: _encode_cs_pet_addgift_request, de: _decode_cs_pet_addgift_request}
	export class cs_pet_addgift_response {
		public ret: boolean; // tag 0
		public exp: number; // tag 1
		public level: number; // tag 2
	}

	function _decode_cs_pet_addgift_response(d: SprotoTypeDeserialize) {
		let o = new cs_pet_addgift_response;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.ret = d.rb ();
				break;
			case 1:
				o.exp = d.ri ();
				break;
			case 2:
				o.level = d.ri ();
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_cs_pet_addgift_response(self: cs_pet_addgift_response, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 3);

		if (self.ret != undefined) {
			se.wb (self.ret, 0);
		}

		if (self.exp != undefined) {
			se.wi (self.exp, 1);
		}

		if (self.level != undefined) {
			se.wi (self.level, 2);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["cs_pet_addgift_response"] = {en: _encode_cs_pet_addgift_response, de: _decode_cs_pet_addgift_response}
	export class cs_pet_fly_addexp_request {
		public id: number; // tag 0
		public autoBuy: number; // tag 1
	}

	function _decode_cs_pet_fly_addexp_request(d: SprotoTypeDeserialize) {
		let o = new cs_pet_fly_addexp_request;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.id = d.ri ();
				break;
			case 1:
				o.autoBuy = d.ri ();
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_cs_pet_fly_addexp_request(self: cs_pet_fly_addexp_request, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 2);

		if (self.id != undefined) {
			se.wi (self.id, 0);
		}

		if (self.autoBuy != undefined) {
			se.wi (self.autoBuy, 1);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["cs_pet_fly_addexp_request"] = {en: _encode_cs_pet_fly_addexp_request, de: _decode_cs_pet_fly_addexp_request}
	export class cs_pet_fly_addexp_response {
		public ret: boolean; // tag 0
		public flyexp: number; // tag 1
		public flylevel: number; // tag 2
	}

	function _decode_cs_pet_fly_addexp_response(d: SprotoTypeDeserialize) {
		let o = new cs_pet_fly_addexp_response;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.ret = d.rb ();
				break;
			case 1:
				o.flyexp = d.ri ();
				break;
			case 2:
				o.flylevel = d.ri ();
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_cs_pet_fly_addexp_response(self: cs_pet_fly_addexp_response, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 3);

		if (self.ret != undefined) {
			se.wb (self.ret, 0);
		}

		if (self.flyexp != undefined) {
			se.wi (self.flyexp, 1);
		}

		if (self.flylevel != undefined) {
			se.wi (self.flylevel, 2);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["cs_pet_fly_addexp_response"] = {en: _encode_cs_pet_fly_addexp_response, de: _decode_cs_pet_fly_addexp_response}
	export class cs_pet_fly_restore_request {
		public id: number; // tag 0
	}

	function _decode_cs_pet_fly_restore_request(d: SprotoTypeDeserialize) {
		let o = new cs_pet_fly_restore_request;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.id = d.ri ();
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_cs_pet_fly_restore_request(self: cs_pet_fly_restore_request, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 1);

		if (self.id != undefined) {
			se.wi (self.id, 0);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["cs_pet_fly_restore_request"] = {en: _encode_cs_pet_fly_restore_request, de: _decode_cs_pet_fly_restore_request}
	export class cs_pet_outbound_request {
		public first: number; // tag 0
		public second: number; // tag 1
		public third: number; // tag 2
		public four: number; // tag 3
	}

	function _decode_cs_pet_outbound_request(d: SprotoTypeDeserialize) {
		let o = new cs_pet_outbound_request;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.first = d.ri ();
				break;
			case 1:
				o.second = d.ri ();
				break;
			case 2:
				o.third = d.ri ();
				break;
			case 3:
				o.four = d.ri ();
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_cs_pet_outbound_request(self: cs_pet_outbound_request, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 4);

		if (self.first != undefined) {
			se.wi (self.first, 0);
		}

		if (self.second != undefined) {
			se.wi (self.second, 1);
		}

		if (self.third != undefined) {
			se.wi (self.third, 2);
		}

		if (self.four != undefined) {
			se.wi (self.four, 3);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["cs_pet_outbound_request"] = {en: _encode_cs_pet_outbound_request, de: _decode_cs_pet_outbound_request}
	export class cs_pet_refreshskill_request {
		public id: number; // tag 0
		public locklist: number[]; // tag 1
		public type: number; // tag 2
		public autoBuy: number; // tag 3
	}

	function _decode_cs_pet_refreshskill_request(d: SprotoTypeDeserialize) {
		let o = new cs_pet_refreshskill_request;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.id = d.ri ();
				break;
			case 1:
				o.locklist = d.ria ();
				break;
			case 2:
				o.type = d.ri ();
				break;
			case 3:
				o.autoBuy = d.ri ();
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_cs_pet_refreshskill_request(self: cs_pet_refreshskill_request, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 4);

		if (self.id != undefined) {
			se.wi (self.id, 0);
		}

		if (self.locklist != undefined) {
			se.wia (self.locklist, 1);
		}

		if (self.type != undefined) {
			se.wi (self.type, 2);
		}

		if (self.autoBuy != undefined) {
			se.wi (self.autoBuy, 3);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["cs_pet_refreshskill_request"] = {en: _encode_cs_pet_refreshskill_request, de: _decode_cs_pet_refreshskill_request}
	export class cs_pet_refreshskill_response {
		public ret: boolean; // tag 0
		public xilian: number; // tag 1
		public xilianSkills: number[]; // tag 2
	}

	function _decode_cs_pet_refreshskill_response(d: SprotoTypeDeserialize) {
		let o = new cs_pet_refreshskill_response;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.ret = d.rb ();
				break;
			case 1:
				o.xilian = d.ri ();
				break;
			case 2:
				o.xilianSkills = d.ria ();
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_cs_pet_refreshskill_response(self: cs_pet_refreshskill_response, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 3);

		if (self.ret != undefined) {
			se.wb (self.ret, 0);
		}

		if (self.xilian != undefined) {
			se.wi (self.xilian, 1);
		}

		if (self.xilianSkills != undefined) {
			se.wia (self.xilianSkills, 2);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["cs_pet_refreshskill_response"] = {en: _encode_cs_pet_refreshskill_response, de: _decode_cs_pet_refreshskill_response}
	export class cs_pet_rename_request {
		public id: number; // tag 0
		public name: string; // tag 1
	}

	function _decode_cs_pet_rename_request(d: SprotoTypeDeserialize) {
		let o = new cs_pet_rename_request;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.id = d.ri ();
				break;
			case 1:
				o.name = d.rs ();
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_cs_pet_rename_request(self: cs_pet_rename_request, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 2);

		if (self.id != undefined) {
			se.wi (self.id, 0);
		}

		if (self.name != undefined) {
			se.ws (self.name, 1);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["cs_pet_rename_request"] = {en: _encode_cs_pet_rename_request, de: _decode_cs_pet_rename_request}
	export class cs_pet_rename_response {
		public ret: boolean; // tag 0
		public name: string; // tag 1
	}

	function _decode_cs_pet_rename_response(d: SprotoTypeDeserialize) {
		let o = new cs_pet_rename_response;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.ret = d.rb ();
				break;
			case 1:
				o.name = d.rs ();
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_cs_pet_rename_response(self: cs_pet_rename_response, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 2);

		if (self.ret != undefined) {
			se.wb (self.ret, 0);
		}

		if (self.name != undefined) {
			se.ws (self.name, 1);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["cs_pet_rename_response"] = {en: _encode_cs_pet_rename_response, de: _decode_cs_pet_rename_response}
	export class cs_pet_setshow_request {
		public id: number; // tag 0
	}

	function _decode_cs_pet_setshow_request(d: SprotoTypeDeserialize) {
		let o = new cs_pet_setshow_request;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.id = d.ri ();
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_cs_pet_setshow_request(self: cs_pet_setshow_request, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 1);

		if (self.id != undefined) {
			se.wi (self.id, 0);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["cs_pet_setshow_request"] = {en: _encode_cs_pet_setshow_request, de: _decode_cs_pet_setshow_request}
	export class cs_pet_setskillin_request {
		public id: number; // tag 0
	}

	function _decode_cs_pet_setskillin_request(d: SprotoTypeDeserialize) {
		let o = new cs_pet_setskillin_request;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.id = d.ri ();
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_cs_pet_setskillin_request(self: cs_pet_setskillin_request, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 1);

		if (self.id != undefined) {
			se.wi (self.id, 0);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["cs_pet_setskillin_request"] = {en: _encode_cs_pet_setskillin_request, de: _decode_cs_pet_setskillin_request}
	export class cs_pet_setskillin_response {
		public ret: boolean; // tag 0
		public buffs: number[]; // tag 1
	}

	function _decode_cs_pet_setskillin_response(d: SprotoTypeDeserialize) {
		let o = new cs_pet_setskillin_response;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.ret = d.rb ();
				break;
			case 1:
				o.buffs = d.ria ();
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_cs_pet_setskillin_response(self: cs_pet_setskillin_response, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 2);

		if (self.ret != undefined) {
			se.wb (self.ret, 0);
		}

		if (self.buffs != undefined) {
			se.wia (self.buffs, 1);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["cs_pet_setskillin_response"] = {en: _encode_cs_pet_setskillin_response, de: _decode_cs_pet_setskillin_response}
}

