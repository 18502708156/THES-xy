// Generated by sprotodump. DO NOT EDIT!

namespace Sproto { 
	export class pet_fly_data {
		public level: number; // tag 0
		public exp: number; // tag 1
	}

	function _decode_pet_fly_data(d: SprotoTypeDeserialize) {
		let o = new pet_fly_data;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.level = d.ri ();
				break;
			case 1:
				o.exp = d.ri ();
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_pet_fly_data(self: pet_fly_data, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 2);

		if (self.level != undefined) {
			se.wi (self.level, 0);
		}

		if (self.exp != undefined) {
			se.wi (self.exp, 1);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["pet_fly_data"] = {en: _encode_pet_fly_data, de: _decode_pet_fly_data}
	export class pet_info {
		public petid: number; // tag 0
		public exp: number; // tag 1
		public level: number; // tag 2
		public name: string; // tag 3
		public buffs: number[]; // tag 4
		public giftexp: number; // tag 5
		public giftlv: number; // tag 6
		public xilian: number; // tag 7
		public xilianSkills: number[]; // tag 8
		public flydata: pet_fly_data; // tag 9
	}

	function _decode_pet_info(d: SprotoTypeDeserialize) {
		let o = new pet_info;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.petid = d.ri ();
				break;
			case 1:
				o.exp = d.ri ();
				break;
			case 2:
				o.level = d.ri ();
				break;
			case 3:
				o.name = d.rs ();
				break;
			case 4:
				o.buffs = d.ria ();
				break;
			case 5:
				o.giftexp = d.ri ();
				break;
			case 6:
				o.giftlv = d.ri ();
				break;
			case 7:
				o.xilian = d.ri ();
				break;
			case 8:
				o.xilianSkills = d.ria ();
				break;
			case 9:
				o.flydata = d.ro("pet_fly_data");
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_pet_info(self: pet_info, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 10);

		if (self.petid != undefined) {
			se.wi (self.petid, 0);
		}

		if (self.exp != undefined) {
			se.wi (self.exp, 1);
		}

		if (self.level != undefined) {
			se.wi (self.level, 2);
		}

		if (self.name != undefined) {
			se.ws (self.name, 3);
		}

		if (self.buffs != undefined) {
			se.wia (self.buffs, 4);
		}

		if (self.giftexp != undefined) {
			se.wi (self.giftexp, 5);
		}

		if (self.giftlv != undefined) {
			se.wi (self.giftlv, 6);
		}

		if (self.xilian != undefined) {
			se.wi (self.xilian, 7);
		}

		if (self.xilianSkills != undefined) {
			se.wia (self.xilianSkills, 8);
		}

		if (self.flydata != undefined) {
			se.wo ("pet_fly_data", self.flydata, 9);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["pet_info"] = {en: _encode_pet_info, de: _decode_pet_info}
	export class sc_pet_catch_request {
		public monsterid: number; // tag 0
		public catchtime: number; // tag 1
	}

	function _decode_sc_pet_catch_request(d: SprotoTypeDeserialize) {
		let o = new sc_pet_catch_request;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.monsterid = d.ri ();
				break;
			case 1:
				o.catchtime = d.ri ();
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_sc_pet_catch_request(self: sc_pet_catch_request, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 2);

		if (self.monsterid != undefined) {
			se.wi (self.monsterid, 0);
		}

		if (self.catchtime != undefined) {
			se.wi (self.catchtime, 1);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["sc_pet_catch_request"] = {en: _encode_sc_pet_catch_request, de: _decode_sc_pet_catch_request}
	export class sc_pet_catch_result_request {
		public result: boolean; // tag 0
	}

	function _decode_sc_pet_catch_result_request(d: SprotoTypeDeserialize) {
		let o = new sc_pet_catch_result_request;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.result = d.rb ();
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_sc_pet_catch_result_request(self: sc_pet_catch_result_request, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 1);

		if (self.result != undefined) {
			se.wb (self.result, 0);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["sc_pet_catch_result_request"] = {en: _encode_sc_pet_catch_result_request, de: _decode_sc_pet_catch_result_request}
	export class sc_pet_init_request {
		public list: pet_info[]; // tag 0
		public outbound: number[]; // tag 1
		public showid: number; // tag 2
	}

	function _decode_sc_pet_init_request(d: SprotoTypeDeserialize) {
		let o = new sc_pet_init_request;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.list = d.roa("pet_info");
				break;
			case 1:
				o.outbound = d.ria ();
				break;
			case 2:
				o.showid = d.ri ();
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_sc_pet_init_request(self: sc_pet_init_request, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 3);

		if (self.list != undefined) {
			se.woa ("pet_info", self.list, 0);
		}

		if (self.outbound != undefined) {
			se.wia (self.outbound, 1);
		}

		if (self.showid != undefined) {
			se.wi (self.showid, 2);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["sc_pet_init_request"] = {en: _encode_sc_pet_init_request, de: _decode_sc_pet_init_request}
	export class sc_pet_update_request {
		public petinfo: pet_info; // tag 0
	}

	function _decode_sc_pet_update_request(d: SprotoTypeDeserialize) {
		let o = new sc_pet_update_request;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.petinfo = d.ro("pet_info");
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_sc_pet_update_request(self: sc_pet_update_request, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 1);

		if (self.petinfo != undefined) {
			se.wo ("pet_info", self.petinfo, 0);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["sc_pet_update_request"] = {en: _encode_sc_pet_update_request, de: _decode_sc_pet_update_request}
}

