// Generated by sprotodump. DO NOT EDIT!

namespace Sproto { 
	export class cs_qualifyingMgr_gamble_request {
		public field: number; // tag 0
		public no: number; // tag 1
		public typ: number; // tag 2
	}

	function _decode_cs_qualifyingMgr_gamble_request(d: SprotoTypeDeserialize) {
		let o = new cs_qualifyingMgr_gamble_request;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.field = d.ri ();
				break;
			case 1:
				o.no = d.ri ();
				break;
			case 2:
				o.typ = d.ri ();
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_cs_qualifyingMgr_gamble_request(self: cs_qualifyingMgr_gamble_request, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 3);

		if (self.field != undefined) {
			se.wi (self.field, 0);
		}

		if (self.no != undefined) {
			se.wi (self.no, 1);
		}

		if (self.typ != undefined) {
			se.wi (self.typ, 2);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["cs_qualifyingMgr_gamble_request"] = {en: _encode_cs_qualifyingMgr_gamble_request, de: _decode_cs_qualifyingMgr_gamble_request}
	export class cs_qualifyingMgr_gamble_response {
		public ret: boolean; // tag 0
	}

	function _decode_cs_qualifyingMgr_gamble_response(d: SprotoTypeDeserialize) {
		let o = new cs_qualifyingMgr_gamble_response;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.ret = d.rb ();
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_cs_qualifyingMgr_gamble_response(self: cs_qualifyingMgr_gamble_response, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 1);

		if (self.ret != undefined) {
			se.wb (self.ret, 0);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["cs_qualifyingMgr_gamble_response"] = {en: _encode_cs_qualifyingMgr_gamble_response, de: _decode_cs_qualifyingMgr_gamble_response}
	export class cs_qualifyingMgr_info_request {
	}

	function _decode_cs_qualifyingMgr_info_request(d: SprotoTypeDeserialize) {
		let o = new cs_qualifyingMgr_info_request;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_cs_qualifyingMgr_info_request(self: cs_qualifyingMgr_info_request, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 0);

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["cs_qualifyingMgr_info_request"] = {en: _encode_cs_qualifyingMgr_info_request, de: _decode_cs_qualifyingMgr_info_request}
	export class cs_qualifyingMgr_map_info_request {
	}

	function _decode_cs_qualifyingMgr_map_info_request(d: SprotoTypeDeserialize) {
		let o = new cs_qualifyingMgr_map_info_request;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_cs_qualifyingMgr_map_info_request(self: cs_qualifyingMgr_map_info_request, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 0);

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["cs_qualifyingMgr_map_info_request"] = {en: _encode_cs_qualifyingMgr_map_info_request, de: _decode_cs_qualifyingMgr_map_info_request}
	export class cs_qualifyingMgr_rank_request {
	}

	function _decode_cs_qualifyingMgr_rank_request(d: SprotoTypeDeserialize) {
		let o = new cs_qualifyingMgr_rank_request;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_cs_qualifyingMgr_rank_request(self: cs_qualifyingMgr_rank_request, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 0);

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["cs_qualifyingMgr_rank_request"] = {en: _encode_cs_qualifyingMgr_rank_request, de: _decode_cs_qualifyingMgr_rank_request}
	export class cs_qualifyingMgr_rank_response {
		public rank_data: qualifyingMgr_rank_data[]; // tag 0
		public fightRecord: qualifyingMgr_fight_data[]; // tag 1
		public rankNo: number; // tag 2
		public point: number; // tag 3
	}

	function _decode_cs_qualifyingMgr_rank_response(d: SprotoTypeDeserialize) {
		let o = new cs_qualifyingMgr_rank_response;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.rank_data = d.roa("qualifyingMgr_rank_data");
				break;
			case 1:
				o.fightRecord = d.roa("qualifyingMgr_fight_data");
				break;
			case 2:
				o.rankNo = d.ri ();
				break;
			case 3:
				o.point = d.ri ();
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_cs_qualifyingMgr_rank_response(self: cs_qualifyingMgr_rank_response, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 4);

		if (self.rank_data != undefined) {
			se.woa ("qualifyingMgr_rank_data", self.rank_data, 0);
		}

		if (self.fightRecord != undefined) {
			se.woa ("qualifyingMgr_fight_data", self.fightRecord, 1);
		}

		if (self.rankNo != undefined) {
			se.wi (self.rankNo, 2);
		}

		if (self.point != undefined) {
			se.wi (self.point, 3);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["cs_qualifyingMgr_rank_response"] = {en: _encode_cs_qualifyingMgr_rank_response, de: _decode_cs_qualifyingMgr_rank_response}
	export class cs_qualifyingMgr_sign_up_request {
	}

	function _decode_cs_qualifyingMgr_sign_up_request(d: SprotoTypeDeserialize) {
		let o = new cs_qualifyingMgr_sign_up_request;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_cs_qualifyingMgr_sign_up_request(self: cs_qualifyingMgr_sign_up_request, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 0);

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["cs_qualifyingMgr_sign_up_request"] = {en: _encode_cs_qualifyingMgr_sign_up_request, de: _decode_cs_qualifyingMgr_sign_up_request}
	export class cs_qualifyingMgr_sign_up_response {
		public ret: boolean; // tag 0
	}

	function _decode_cs_qualifyingMgr_sign_up_response(d: SprotoTypeDeserialize) {
		let o = new cs_qualifyingMgr_sign_up_response;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.ret = d.rb ();
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_cs_qualifyingMgr_sign_up_response(self: cs_qualifyingMgr_sign_up_response, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 1);

		if (self.ret != undefined) {
			se.wb (self.ret, 0);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["cs_qualifyingMgr_sign_up_response"] = {en: _encode_cs_qualifyingMgr_sign_up_response, de: _decode_cs_qualifyingMgr_sign_up_response}
	export class cs_qualifyingMgr_timeout_request {
	}

	function _decode_cs_qualifyingMgr_timeout_request(d: SprotoTypeDeserialize) {
		let o = new cs_qualifyingMgr_timeout_request;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_cs_qualifyingMgr_timeout_request(self: cs_qualifyingMgr_timeout_request, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 0);

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["cs_qualifyingMgr_timeout_request"] = {en: _encode_cs_qualifyingMgr_timeout_request, de: _decode_cs_qualifyingMgr_timeout_request}
	export class cs_qualifyingMgr_timeout_response {
		public ret: boolean; // tag 0
		public timeout: number; // tag 1
	}

	function _decode_cs_qualifyingMgr_timeout_response(d: SprotoTypeDeserialize) {
		let o = new cs_qualifyingMgr_timeout_response;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.ret = d.rb ();
				break;
			case 1:
				o.timeout = d.ri ();
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_cs_qualifyingMgr_timeout_response(self: cs_qualifyingMgr_timeout_response, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 2);

		if (self.ret != undefined) {
			se.wb (self.ret, 0);
		}

		if (self.timeout != undefined) {
			se.wi (self.timeout, 1);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["cs_qualifyingMgr_timeout_response"] = {en: _encode_cs_qualifyingMgr_timeout_response, de: _decode_cs_qualifyingMgr_timeout_response}
	export class cs_qualifyingMgr_video_request {
		public the: number; // tag 0
		public field: number; // tag 1
		public round: number; // tag 2
	}

	function _decode_cs_qualifyingMgr_video_request(d: SprotoTypeDeserialize) {
		let o = new cs_qualifyingMgr_video_request;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.the = d.ri ();
				break;
			case 1:
				o.field = d.ri ();
				break;
			case 2:
				o.round = d.ri ();
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_cs_qualifyingMgr_video_request(self: cs_qualifyingMgr_video_request, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 3);

		if (self.the != undefined) {
			se.wi (self.the, 0);
		}

		if (self.field != undefined) {
			se.wi (self.field, 1);
		}

		if (self.round != undefined) {
			se.wi (self.round, 2);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["cs_qualifyingMgr_video_request"] = {en: _encode_cs_qualifyingMgr_video_request, de: _decode_cs_qualifyingMgr_video_request}
	export class qualifyingMgr_fight_data {
		public win: boolean; // tag 0
		public name1: string; // tag 1
		public server1: number; // tag 2
		public name2: string; // tag 3
		public server2: number; // tag 4
	}

	function _decode_qualifyingMgr_fight_data(d: SprotoTypeDeserialize) {
		let o = new qualifyingMgr_fight_data;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.win = d.rb ();
				break;
			case 1:
				o.name1 = d.rs ();
				break;
			case 2:
				o.server1 = d.ri ();
				break;
			case 3:
				o.name2 = d.rs ();
				break;
			case 4:
				o.server2 = d.ri ();
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_qualifyingMgr_fight_data(self: qualifyingMgr_fight_data, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 5);

		if (self.win != undefined) {
			se.wb (self.win, 0);
		}

		if (self.name1 != undefined) {
			se.ws (self.name1, 1);
		}

		if (self.server1 != undefined) {
			se.wi (self.server1, 2);
		}

		if (self.name2 != undefined) {
			se.ws (self.name2, 3);
		}

		if (self.server2 != undefined) {
			se.wi (self.server2, 4);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["qualifyingMgr_fight_data"] = {en: _encode_qualifyingMgr_fight_data, de: _decode_qualifyingMgr_fight_data}
}

