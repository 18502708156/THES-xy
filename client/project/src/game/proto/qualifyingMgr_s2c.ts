// Generated by sprotodump. DO NOT EDIT!

namespace Sproto { 
	export class qualifyingMgr_gamble_data {
		public field: number; // tag 0
		public no: number; // tag 1
		public typ: number; // tag 2
	}

	function _decode_qualifyingMgr_gamble_data(d: SprotoTypeDeserialize) {
		let o = new qualifyingMgr_gamble_data;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.field = d.ri ();
				break;
			case 1:
				o.no = d.ri ();
				break;
			case 2:
				o.typ = d.ri ();
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_qualifyingMgr_gamble_data(self: qualifyingMgr_gamble_data, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 3);

		if (self.field != undefined) {
			se.wi (self.field, 0);
		}

		if (self.no != undefined) {
			se.wi (self.no, 1);
		}

		if (self.typ != undefined) {
			se.wi (self.typ, 2);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["qualifyingMgr_gamble_data"] = {en: _encode_qualifyingMgr_gamble_data, de: _decode_qualifyingMgr_gamble_data}
	export class qualifyingMgr_role_data {
		public win: boolean; // tag 0
		public name: string; // tag 1
		public serverid: number; // tag 2
		public level: number; // tag 3
		public power: number; // tag 4
		public addpoint: number; // tag 5
	}

	function _decode_qualifyingMgr_role_data(d: SprotoTypeDeserialize) {
		let o = new qualifyingMgr_role_data;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.win = d.rb ();
				break;
			case 1:
				o.name = d.rs ();
				break;
			case 2:
				o.serverid = d.ri ();
				break;
			case 3:
				o.level = d.ri ();
				break;
			case 4:
				o.power = d.ri ();
				break;
			case 5:
				o.addpoint = d.ri ();
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_qualifyingMgr_role_data(self: qualifyingMgr_role_data, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 6);

		if (self.win != undefined) {
			se.wb (self.win, 0);
		}

		if (self.name != undefined) {
			se.ws (self.name, 1);
		}

		if (self.serverid != undefined) {
			se.wi (self.serverid, 2);
		}

		if (self.level != undefined) {
			se.wi (self.level, 3);
		}

		if (self.power != undefined) {
			se.wi (self.power, 4);
		}

		if (self.addpoint != undefined) {
			se.wi (self.addpoint, 5);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["qualifyingMgr_role_data"] = {en: _encode_qualifyingMgr_role_data, de: _decode_qualifyingMgr_role_data}
	export class qualifying_player_data {
		public no: number; // tag 0
		public name: string; // tag 1
		public server: number; // tag 2
		public lv: number; // tag 3
		public power: number; // tag 4
		public shows: entity_shows; // tag 5
		public job: number; // tag 6
		public sex: number; // tag 7
	}

	function _decode_qualifying_player_data(d: SprotoTypeDeserialize) {
		let o = new qualifying_player_data;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.no = d.ri ();
				break;
			case 1:
				o.name = d.rs ();
				break;
			case 2:
				o.server = d.ri ();
				break;
			case 3:
				o.lv = d.ri ();
				break;
			case 4:
				o.power = d.ri ();
				break;
			case 5:
				o.shows = d.ro("entity_shows");
				break;
			case 6:
				o.job = d.ri ();
				break;
			case 7:
				o.sex = d.ri ();
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_qualifying_player_data(self: qualifying_player_data, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 8);

		if (self.no != undefined) {
			se.wi (self.no, 0);
		}

		if (self.name != undefined) {
			se.ws (self.name, 1);
		}

		if (self.server != undefined) {
			se.wi (self.server, 2);
		}

		if (self.lv != undefined) {
			se.wi (self.lv, 3);
		}

		if (self.power != undefined) {
			se.wi (self.power, 4);
		}

		if (self.shows != undefined) {
			se.wo ("entity_shows", self.shows, 5);
		}

		if (self.job != undefined) {
			se.wi (self.job, 6);
		}

		if (self.sex != undefined) {
			se.wi (self.sex, 7);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["qualifying_player_data"] = {en: _encode_qualifying_player_data, de: _decode_qualifying_player_data}
	export class qualifying_rank_data {
		public field: number; // tag 0
		public noA: number; // tag 1
		public noB: number; // tag 2
		public winNo: number; // tag 3
		public fightRecord: number[]; // tag 4
	}

	function _decode_qualifying_rank_data(d: SprotoTypeDeserialize) {
		let o = new qualifying_rank_data;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.field = d.ri ();
				break;
			case 1:
				o.noA = d.ri ();
				break;
			case 2:
				o.noB = d.ri ();
				break;
			case 3:
				o.winNo = d.ri ();
				break;
			case 4:
				o.fightRecord = d.ria ();
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_qualifying_rank_data(self: qualifying_rank_data, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 5);

		if (self.field != undefined) {
			se.wi (self.field, 0);
		}

		if (self.noA != undefined) {
			se.wi (self.noA, 1);
		}

		if (self.noB != undefined) {
			se.wi (self.noB, 2);
		}

		if (self.winNo != undefined) {
			se.wi (self.winNo, 3);
		}

		if (self.fightRecord != undefined) {
			se.wia (self.fightRecord, 4);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["qualifying_rank_data"] = {en: _encode_qualifying_rank_data, de: _decode_qualifying_rank_data}
	export class sc_qualifyingMgr_info_res_request {
		public sign: boolean; // tag 0
		public type: number; // tag 1
		public rank: number; // tag 2
		public ret: boolean; // tag 3
		public player_data: qualifying_player_data[]; // tag 4
		public knockouttime16: qualifying_rank_data[]; // tag 5
		public knockouttime8: qualifying_rank_data[]; // tag 6
		public knockouttime4: qualifying_rank_data[]; // tag 7
		public knockouttime2: qualifying_rank_data[]; // tag 8
		public champion: number; // tag 9
		public gamble: qualifyingMgr_gamble_data[]; // tag 10
	}

	function _decode_sc_qualifyingMgr_info_res_request(d: SprotoTypeDeserialize) {
		let o = new sc_qualifyingMgr_info_res_request;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.sign = d.rb ();
				break;
			case 1:
				o.type = d.ri ();
				break;
			case 2:
				o.rank = d.ri ();
				break;
			case 3:
				o.ret = d.rb ();
				break;
			case 4:
				o.player_data = d.roa("qualifying_player_data");
				break;
			case 5:
				o.knockouttime16 = d.roa("qualifying_rank_data");
				break;
			case 6:
				o.knockouttime8 = d.roa("qualifying_rank_data");
				break;
			case 7:
				o.knockouttime4 = d.roa("qualifying_rank_data");
				break;
			case 8:
				o.knockouttime2 = d.roa("qualifying_rank_data");
				break;
			case 9:
				o.champion = d.ri ();
				break;
			case 10:
				o.gamble = d.roa("qualifyingMgr_gamble_data");
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_sc_qualifyingMgr_info_res_request(self: sc_qualifyingMgr_info_res_request, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 11);

		if (self.sign != undefined) {
			se.wb (self.sign, 0);
		}

		if (self.type != undefined) {
			se.wi (self.type, 1);
		}

		if (self.rank != undefined) {
			se.wi (self.rank, 2);
		}

		if (self.ret != undefined) {
			se.wb (self.ret, 3);
		}

		if (self.player_data != undefined) {
			se.woa ("qualifying_player_data", self.player_data, 4);
		}

		if (self.knockouttime16 != undefined) {
			se.woa ("qualifying_rank_data", self.knockouttime16, 5);
		}

		if (self.knockouttime8 != undefined) {
			se.woa ("qualifying_rank_data", self.knockouttime8, 6);
		}

		if (self.knockouttime4 != undefined) {
			se.woa ("qualifying_rank_data", self.knockouttime4, 7);
		}

		if (self.knockouttime2 != undefined) {
			se.woa ("qualifying_rank_data", self.knockouttime2, 8);
		}

		if (self.champion != undefined) {
			se.wi (self.champion, 9);
		}

		if (self.gamble != undefined) {
			se.woa ("qualifyingMgr_gamble_data", self.gamble, 10);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["sc_qualifyingMgr_info_res_request"] = {en: _encode_sc_qualifyingMgr_info_res_request, de: _decode_sc_qualifyingMgr_info_res_request}
	export class sc_qualifyingMgr_map_info_res_request {
		public ret: number; // tag 0
		public rank_data: qualifyingMgr_rank_data[]; // tag 1
		public timeout: number; // tag 2
		public rankNo: number; // tag 3
		public point: number; // tag 4
	}

	function _decode_sc_qualifyingMgr_map_info_res_request(d: SprotoTypeDeserialize) {
		let o = new sc_qualifyingMgr_map_info_res_request;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.ret = d.ri ();
				break;
			case 1:
				o.rank_data = d.roa("qualifyingMgr_rank_data");
				break;
			case 2:
				o.timeout = d.ri ();
				break;
			case 3:
				o.rankNo = d.ri ();
				break;
			case 4:
				o.point = d.ri ();
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_sc_qualifyingMgr_map_info_res_request(self: sc_qualifyingMgr_map_info_res_request, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 5);

		if (self.ret != undefined) {
			se.wi (self.ret, 0);
		}

		if (self.rank_data != undefined) {
			se.woa ("qualifyingMgr_rank_data", self.rank_data, 1);
		}

		if (self.timeout != undefined) {
			se.wi (self.timeout, 2);
		}

		if (self.rankNo != undefined) {
			se.wi (self.rankNo, 3);
		}

		if (self.point != undefined) {
			se.wi (self.point, 4);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["sc_qualifyingMgr_map_info_res_request"] = {en: _encode_sc_qualifyingMgr_map_info_res_request, de: _decode_sc_qualifyingMgr_map_info_res_request}
	export class sc_qualifyingMgr_war_info_request {
		public win: boolean; // tag 0
		public roleData: qualifyingMgr_role_data[]; // tag 1
	}

	function _decode_sc_qualifyingMgr_war_info_request(d: SprotoTypeDeserialize) {
		let o = new sc_qualifyingMgr_war_info_request;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.win = d.rb ();
				break;
			case 1:
				o.roleData = d.roa("qualifyingMgr_role_data");
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_sc_qualifyingMgr_war_info_request(self: sc_qualifyingMgr_war_info_request, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 2);

		if (self.win != undefined) {
			se.wb (self.win, 0);
		}

		if (self.roleData != undefined) {
			se.woa ("qualifyingMgr_role_data", self.roleData, 1);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["sc_qualifyingMgr_war_info_request"] = {en: _encode_sc_qualifyingMgr_war_info_request, de: _decode_sc_qualifyingMgr_war_info_request}
}

