// Generated by sprotodump. DO NOT EDIT!

namespace Sproto { 
	export class cs_raid_add_count_request {
		public fbID: number; // tag 0
	}

	function _decode_cs_raid_add_count_request(d: SprotoTypeDeserialize) {
		let o = new cs_raid_add_count_request;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.fbID = d.ri ();
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_cs_raid_add_count_request(self: cs_raid_add_count_request, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 1);

		if (self.fbID != undefined) {
			se.wi (self.fbID, 0);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["cs_raid_add_count_request"] = {en: _encode_cs_raid_add_count_request, de: _decode_cs_raid_add_count_request}
	export class cs_raid_assist_pkboss_request {
		public playerid: number; // tag 0
		public chapterlevel: number; // tag 1
	}

	function _decode_cs_raid_assist_pkboss_request(d: SprotoTypeDeserialize) {
		let o = new cs_raid_assist_pkboss_request;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.playerid = d.ri ();
				break;
			case 1:
				o.chapterlevel = d.ri ();
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_cs_raid_assist_pkboss_request(self: cs_raid_assist_pkboss_request, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 2);

		if (self.playerid != undefined) {
			se.wi (self.playerid, 0);
		}

		if (self.chapterlevel != undefined) {
			se.wi (self.chapterlevel, 1);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["cs_raid_assist_pkboss_request"] = {en: _encode_cs_raid_assist_pkboss_request, de: _decode_cs_raid_assist_pkboss_request}
	export class cs_raid_assist_pkboss_response {
		public ret: number; // tag 0
	}

	function _decode_cs_raid_assist_pkboss_response(d: SprotoTypeDeserialize) {
		let o = new cs_raid_assist_pkboss_response;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.ret = d.ri ();
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_cs_raid_assist_pkboss_response(self: cs_raid_assist_pkboss_response, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 1);

		if (self.ret != undefined) {
			se.wi (self.ret, 0);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["cs_raid_assist_pkboss_response"] = {en: _encode_cs_raid_assist_pkboss_response, de: _decode_cs_raid_assist_pkboss_response}
	export class cs_raid_call_boss_play_request {
		public id: number; // tag 0
	}

	function _decode_cs_raid_call_boss_play_request(d: SprotoTypeDeserialize) {
		let o = new cs_raid_call_boss_play_request;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.id = d.ri ();
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_cs_raid_call_boss_play_request(self: cs_raid_call_boss_play_request, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 1);

		if (self.id != undefined) {
			se.wi (self.id, 0);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["cs_raid_call_boss_play_request"] = {en: _encode_cs_raid_call_boss_play_request, de: _decode_cs_raid_call_boss_play_request}
	export class cs_raid_challenget_request {
		public fbID: number; // tag 0
	}

	function _decode_cs_raid_challenget_request(d: SprotoTypeDeserialize) {
		let o = new cs_raid_challenget_request;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.fbID = d.ri ();
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_cs_raid_challenget_request(self: cs_raid_challenget_request, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 1);

		if (self.fbID != undefined) {
			se.wi (self.fbID, 0);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["cs_raid_challenget_request"] = {en: _encode_cs_raid_challenget_request, de: _decode_cs_raid_challenget_request}
	export class cs_raid_chapter_config_request {
		public fbid: number; // tag 0
	}

	function _decode_cs_raid_chapter_config_request(d: SprotoTypeDeserialize) {
		let o = new cs_raid_chapter_config_request;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.fbid = d.ri ();
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_cs_raid_chapter_config_request(self: cs_raid_chapter_config_request, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 1);

		if (self.fbid != undefined) {
			se.wi (self.fbid, 0);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["cs_raid_chapter_config_request"] = {en: _encode_cs_raid_chapter_config_request, de: _decode_cs_raid_chapter_config_request}
	export class cs_raid_chapter_config_response {
		public fbid: number; // tag 0
		public manuallymode: number; // tag 1
		public jbutton: number; // tag 2
		public type: number; // tag 3
		public totalTime: number; // tag 4
		public closeTime: number; // tag 5
		public scenes: number[]; // tag 6
		public name: string; // tag 7
		public desc: string; // tag 8
	}

	function _decode_cs_raid_chapter_config_response(d: SprotoTypeDeserialize) {
		let o = new cs_raid_chapter_config_response;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.fbid = d.ri ();
				break;
			case 1:
				o.manuallymode = d.ri ();
				break;
			case 2:
				o.jbutton = d.ri ();
				break;
			case 3:
				o.type = d.ri ();
				break;
			case 4:
				o.totalTime = d.ri ();
				break;
			case 5:
				o.closeTime = d.ri ();
				break;
			case 6:
				o.scenes = d.ria ();
				break;
			case 7:
				o.name = d.rs ();
				break;
			case 8:
				o.desc = d.rs ();
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_cs_raid_chapter_config_response(self: cs_raid_chapter_config_response, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 9);

		if (self.fbid != undefined) {
			se.wi (self.fbid, 0);
		}

		if (self.manuallymode != undefined) {
			se.wi (self.manuallymode, 1);
		}

		if (self.jbutton != undefined) {
			se.wi (self.jbutton, 2);
		}

		if (self.type != undefined) {
			se.wi (self.type, 3);
		}

		if (self.totalTime != undefined) {
			se.wi (self.totalTime, 4);
		}

		if (self.closeTime != undefined) {
			se.wi (self.closeTime, 5);
		}

		if (self.scenes != undefined) {
			se.wia (self.scenes, 6);
		}

		if (self.name != undefined) {
			se.ws (self.name, 7);
		}

		if (self.desc != undefined) {
			se.ws (self.desc, 8);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["cs_raid_chapter_config_response"] = {en: _encode_cs_raid_chapter_config_response, de: _decode_cs_raid_chapter_config_response}
	export class cs_raid_exit_raid_request {
	}

	function _decode_cs_raid_exit_raid_request(d: SprotoTypeDeserialize) {
		let o = new cs_raid_exit_raid_request;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_cs_raid_exit_raid_request(self: cs_raid_exit_raid_request, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 0);

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["cs_raid_exit_raid_request"] = {en: _encode_cs_raid_exit_raid_request, de: _decode_cs_raid_exit_raid_request}
	export class cs_raid_get_award_request {
	}

	function _decode_cs_raid_get_award_request(d: SprotoTypeDeserialize) {
		let o = new cs_raid_get_award_request;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_cs_raid_get_award_request(self: cs_raid_get_award_request, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 0);

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["cs_raid_get_award_request"] = {en: _encode_cs_raid_get_award_request, de: _decode_cs_raid_get_award_request}
	export class cs_raid_get_boss_reward_request {
	}

	function _decode_cs_raid_get_boss_reward_request(d: SprotoTypeDeserialize) {
		let o = new cs_raid_get_boss_reward_request;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_cs_raid_get_boss_reward_request(self: cs_raid_get_boss_reward_request, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 0);

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["cs_raid_get_boss_reward_request"] = {en: _encode_cs_raid_get_boss_reward_request, de: _decode_cs_raid_get_boss_reward_request}
	export class cs_raid_get_chapter_reward_request {
		public id: number; // tag 0
	}

	function _decode_cs_raid_get_chapter_reward_request(d: SprotoTypeDeserialize) {
		let o = new cs_raid_get_chapter_reward_request;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.id = d.ri ();
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_cs_raid_get_chapter_reward_request(self: cs_raid_get_chapter_reward_request, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 1);

		if (self.id != undefined) {
			se.wi (self.id, 0);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["cs_raid_get_chapter_reward_request"] = {en: _encode_cs_raid_get_chapter_reward_request, de: _decode_cs_raid_get_chapter_reward_request}
	export class cs_raid_get_chapter_reward_response {
		public ret: boolean; // tag 0
	}

	function _decode_cs_raid_get_chapter_reward_response(d: SprotoTypeDeserialize) {
		let o = new cs_raid_get_chapter_reward_response;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.ret = d.rb ();
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_cs_raid_get_chapter_reward_response(self: cs_raid_get_chapter_reward_response, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 1);

		if (self.ret != undefined) {
			se.wb (self.ret, 0);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["cs_raid_get_chapter_reward_response"] = {en: _encode_cs_raid_get_chapter_reward_response, de: _decode_cs_raid_get_chapter_reward_response}
	export class cs_raid_get_world_award_request {
		public pass: number; // tag 0
	}

	function _decode_cs_raid_get_world_award_request(d: SprotoTypeDeserialize) {
		let o = new cs_raid_get_world_award_request;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.pass = d.ri ();
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_cs_raid_get_world_award_request(self: cs_raid_get_world_award_request, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 1);

		if (self.pass != undefined) {
			se.wi (self.pass, 0);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["cs_raid_get_world_award_request"] = {en: _encode_cs_raid_get_world_award_request, de: _decode_cs_raid_get_world_award_request}
	export class cs_raid_open_auto_request {
		public auto: boolean; // tag 0
	}

	function _decode_cs_raid_open_auto_request(d: SprotoTypeDeserialize) {
		let o = new cs_raid_open_auto_request;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.auto = d.rb ();
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_cs_raid_open_auto_request(self: cs_raid_open_auto_request, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 1);

		if (self.auto != undefined) {
			se.wb (self.auto, 0);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["cs_raid_open_auto_request"] = {en: _encode_cs_raid_open_auto_request, de: _decode_cs_raid_open_auto_request}
	export class cs_raid_pk_boss_request {
	}

	function _decode_cs_raid_pk_boss_request(d: SprotoTypeDeserialize) {
		let o = new cs_raid_pk_boss_request;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_cs_raid_pk_boss_request(self: cs_raid_pk_boss_request, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 0);

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["cs_raid_pk_boss_request"] = {en: _encode_cs_raid_pk_boss_request, de: _decode_cs_raid_pk_boss_request}
	export class cs_raid_wave_complete_request {
		public killCount: number; // tag 0
	}

	function _decode_cs_raid_wave_complete_request(d: SprotoTypeDeserialize) {
		let o = new cs_raid_wave_complete_request;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.killCount = d.ri ();
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_cs_raid_wave_complete_request(self: cs_raid_wave_complete_request, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 1);

		if (self.killCount != undefined) {
			se.wi (self.killCount, 0);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["cs_raid_wave_complete_request"] = {en: _encode_cs_raid_wave_complete_request, de: _decode_cs_raid_wave_complete_request}
	export class sc_raid_clear_cd_request {
		public index: number; // tag 0
	}

	function _decode_sc_raid_clear_cd_request(d: SprotoTypeDeserialize) {
		let o = new sc_raid_clear_cd_request;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.index = d.ri ();
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_sc_raid_clear_cd_request(self: sc_raid_clear_cd_request, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 1);

		if (self.index != undefined) {
			se.wi (self.index, 0);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["sc_raid_clear_cd_request"] = {en: _encode_sc_raid_clear_cd_request, de: _decode_sc_raid_clear_cd_request}
}

