// Generated by sprotodump. DO NOT EDIT!

namespace Sproto { 
	export class sc_recharge_dailyrechare_request {
		public dailyrechare: number; // tag 0
		public rewardmark: number; // tag 1
		public dailyid: number; // tag 2
	}

	function _decode_sc_recharge_dailyrechare_request(d: SprotoTypeDeserialize) {
		let o = new sc_recharge_dailyrechare_request;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.dailyrechare = d.ri ();
				break;
			case 1:
				o.rewardmark = d.ri ();
				break;
			case 2:
				o.dailyid = d.ri ();
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_sc_recharge_dailyrechare_request(self: sc_recharge_dailyrechare_request, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 3);

		if (self.dailyrechare != undefined) {
			se.wi (self.dailyrechare, 0);
		}

		if (self.rewardmark != undefined) {
			se.wi (self.rewardmark, 1);
		}

		if (self.dailyid != undefined) {
			se.wi (self.dailyid, 2);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["sc_recharge_dailyrechare_request"] = {en: _encode_sc_recharge_dailyrechare_request, de: _decode_sc_recharge_dailyrechare_request}
	export class sc_recharge_double_request {
		public reward: number[]; // tag 0
		public choicerechare: number; // tag 1
		public finish: number[]; // tag 2
	}

	function _decode_sc_recharge_double_request(d: SprotoTypeDeserialize) {
		let o = new sc_recharge_double_request;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.reward = d.ria ();
				break;
			case 1:
				o.choicerechare = d.ri ();
				break;
			case 2:
				o.finish = d.ria ();
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_sc_recharge_double_request(self: sc_recharge_double_request, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 3);

		if (self.reward != undefined) {
			se.wia (self.reward, 0);
		}

		if (self.choicerechare != undefined) {
			se.wi (self.choicerechare, 1);
		}

		if (self.finish != undefined) {
			se.wia (self.finish, 2);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["sc_recharge_double_request"] = {en: _encode_sc_recharge_double_request, de: _decode_sc_recharge_double_request}
	export class sc_recharge_first_info_request {
		public rechargeNum: number; // tag 0
		public reward: number[]; // tag 1
		public firsttime: number; // tag 2
	}

	function _decode_sc_recharge_first_info_request(d: SprotoTypeDeserialize) {
		let o = new sc_recharge_first_info_request;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.rechargeNum = d.ri ();
				break;
			case 1:
				o.reward = d.ria ();
				break;
			case 2:
				o.firsttime = d.ri ();
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_sc_recharge_first_info_request(self: sc_recharge_first_info_request, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 3);

		if (self.rechargeNum != undefined) {
			se.wi (self.rechargeNum, 0);
		}

		if (self.reward != undefined) {
			se.wia (self.reward, 1);
		}

		if (self.firsttime != undefined) {
			se.wi (self.firsttime, 2);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["sc_recharge_first_info_request"] = {en: _encode_sc_recharge_first_info_request, de: _decode_sc_recharge_first_info_request}
}

