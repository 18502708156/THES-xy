// Generated by sprotodump. DO NOT EDIT!

namespace Sproto { 
	export class award_item {
		public type: number; // tag 0
		public id: number; // tag 1
		public count: number; // tag 2
	}

	function _decode_award_item(d: SprotoTypeDeserialize) {
		let o = new award_item;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.type = d.ri ();
				break;
			case 1:
				o.id = d.ri ();
				break;
			case 2:
				o.count = d.ri ();
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_award_item(self: award_item, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 3);

		if (self.type != undefined) {
			se.wi (self.type, 0);
		}

		if (self.id != undefined) {
			se.wi (self.id, 1);
		}

		if (self.count != undefined) {
			se.wi (self.count, 2);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["award_item"] = {en: _encode_award_item, de: _decode_award_item}
	export class award_one {
		public items: award_item[]; // tag 0
		public buycount: number; // tag 1
	}

	function _decode_award_one(d: SprotoTypeDeserialize) {
		let o = new award_one;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.items = d.roa("award_item");
				break;
			case 1:
				o.buycount = d.ri ();
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_award_one(self: award_one, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 2);

		if (self.items != undefined) {
			se.woa ("award_item", self.items, 0);
		}

		if (self.buycount != undefined) {
			se.wi (self.buycount, 1);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["award_one"] = {en: _encode_award_one, de: _decode_award_one}
	export class rechargew_initinfo {
		public config: rechargew_shit_info; // tag 0
		public info: rechargew_my_info; // tag 1
	}

	function _decode_rechargew_initinfo(d: SprotoTypeDeserialize) {
		let o = new rechargew_initinfo;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.config = d.ro("rechargew_shit_info");
				break;
			case 1:
				o.info = d.ro("rechargew_my_info");
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_rechargew_initinfo(self: rechargew_initinfo, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 2);

		if (self.config != undefined) {
			se.wo ("rechargew_shit_info", self.config, 0);
		}

		if (self.info != undefined) {
			se.wo ("rechargew_my_info", self.info, 1);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["rechargew_initinfo"] = {en: _encode_rechargew_initinfo, de: _decode_rechargew_initinfo}
	export class rechargew_my_info {
		public nopop: boolean; // tag 0
		public step: number; // tag 1
		public getnum: number[]; // tag 2
		public steps: number[]; // tag 3
	}

	function _decode_rechargew_my_info(d: SprotoTypeDeserialize) {
		let o = new rechargew_my_info;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.nopop = d.rb ();
				break;
			case 1:
				o.step = d.ri ();
				break;
			case 2:
				o.getnum = d.ria ();
				break;
			case 3:
				o.steps = d.ria ();
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_rechargew_my_info(self: rechargew_my_info, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 4);

		if (self.nopop != undefined) {
			se.wb (self.nopop, 0);
		}

		if (self.step != undefined) {
			se.wi (self.step, 1);
		}

		if (self.getnum != undefined) {
			se.wia (self.getnum, 2);
		}

		if (self.steps != undefined) {
			se.wia (self.steps, 3);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["rechargew_my_info"] = {en: _encode_rechargew_my_info, de: _decode_rechargew_my_info}
	export class rechargew_shit_info {
		public payType: number; // tag 0
		public gid: number; // tag 1
		public gtype: number; // tag 2
		public startTime: number; // tag 3
		public endTime: number; // tag 4
		public headtext: string; // tag 5
		public content: string; // tag 6
		public awards: award_one[]; // tag 7
		public condType: number; // tag 8
		public targets: number[]; // tag 9
		public prices: number[]; // tag 10
		public dayRefresh: number; // tag 11
		public showType: number; // tag 12
	}

	function _decode_rechargew_shit_info(d: SprotoTypeDeserialize) {
		let o = new rechargew_shit_info;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.payType = d.ri ();
				break;
			case 1:
				o.gid = d.ri ();
				break;
			case 2:
				o.gtype = d.ri ();
				break;
			case 3:
				o.startTime = d.ri ();
				break;
			case 4:
				o.endTime = d.ri ();
				break;
			case 5:
				o.headtext = d.rs ();
				break;
			case 6:
				o.content = d.rs ();
				break;
			case 7:
				o.awards = d.roa("award_one");
				break;
			case 8:
				o.condType = d.ri ();
				break;
			case 9:
				o.targets = d.ria ();
				break;
			case 10:
				o.prices = d.ria ();
				break;
			case 11:
				o.dayRefresh = d.ri ();
				break;
			case 12:
				o.showType = d.ri ();
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_rechargew_shit_info(self: rechargew_shit_info, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 13);

		if (self.payType != undefined) {
			se.wi (self.payType, 0);
		}

		if (self.gid != undefined) {
			se.wi (self.gid, 1);
		}

		if (self.gtype != undefined) {
			se.wi (self.gtype, 2);
		}

		if (self.startTime != undefined) {
			se.wi (self.startTime, 3);
		}

		if (self.endTime != undefined) {
			se.wi (self.endTime, 4);
		}

		if (self.headtext != undefined) {
			se.ws (self.headtext, 5);
		}

		if (self.content != undefined) {
			se.ws (self.content, 6);
		}

		if (self.awards != undefined) {
			se.woa ("award_one", self.awards, 7);
		}

		if (self.condType != undefined) {
			se.wi (self.condType, 8);
		}

		if (self.targets != undefined) {
			se.wia (self.targets, 9);
		}

		if (self.prices != undefined) {
			se.wia (self.prices, 10);
		}

		if (self.dayRefresh != undefined) {
			se.wi (self.dayRefresh, 11);
		}

		if (self.showType != undefined) {
			se.wi (self.showType, 12);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["rechargew_shit_info"] = {en: _encode_rechargew_shit_info, de: _decode_rechargew_shit_info}
	export class sc_rechargew_shit_request {
		public config: rechargew_shit_info; // tag 0
		public info: rechargew_my_info; // tag 1
	}

	function _decode_sc_rechargew_shit_request(d: SprotoTypeDeserialize) {
		let o = new sc_rechargew_shit_request;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.config = d.ro("rechargew_shit_info");
				break;
			case 1:
				o.info = d.ro("rechargew_my_info");
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_sc_rechargew_shit_request(self: sc_rechargew_shit_request, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 2);

		if (self.config != undefined) {
			se.wo ("rechargew_shit_info", self.config, 0);
		}

		if (self.info != undefined) {
			se.wo ("rechargew_my_info", self.info, 1);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["sc_rechargew_shit_request"] = {en: _encode_sc_rechargew_shit_request, de: _decode_sc_rechargew_shit_request}
	export class sc_rechargew_shitclose_request {
		public payType: number; // tag 0
		public gid: number; // tag 1
	}

	function _decode_sc_rechargew_shitclose_request(d: SprotoTypeDeserialize) {
		let o = new sc_rechargew_shitclose_request;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.payType = d.ri ();
				break;
			case 1:
				o.gid = d.ri ();
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_sc_rechargew_shitclose_request(self: sc_rechargew_shitclose_request, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 2);

		if (self.payType != undefined) {
			se.wi (self.payType, 0);
		}

		if (self.gid != undefined) {
			se.wi (self.gid, 1);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["sc_rechargew_shitclose_request"] = {en: _encode_sc_rechargew_shitclose_request, de: _decode_sc_rechargew_shitclose_request}
	export class sc_rechargew_shitindex_request {
		public payType: number; // tag 0
		public gid: number; // tag 1
		public index: number; // tag 2
		public price: number; // tag 3
	}

	function _decode_sc_rechargew_shitindex_request(d: SprotoTypeDeserialize) {
		let o = new sc_rechargew_shitindex_request;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.payType = d.ri ();
				break;
			case 1:
				o.gid = d.ri ();
				break;
			case 2:
				o.index = d.ri ();
				break;
			case 3:
				o.price = d.ri ();
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_sc_rechargew_shitindex_request(self: sc_rechargew_shitindex_request, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 4);

		if (self.payType != undefined) {
			se.wi (self.payType, 0);
		}

		if (self.gid != undefined) {
			se.wi (self.gid, 1);
		}

		if (self.index != undefined) {
			se.wi (self.index, 2);
		}

		if (self.price != undefined) {
			se.wi (self.price, 3);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["sc_rechargew_shitindex_request"] = {en: _encode_sc_rechargew_shitindex_request, de: _decode_sc_rechargew_shitindex_request}
	export class sc_rechargew_shitinit_request {
		public initinfo: rechargew_initinfo[]; // tag 0
	}

	function _decode_sc_rechargew_shitinit_request(d: SprotoTypeDeserialize) {
		let o = new sc_rechargew_shitinit_request;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.initinfo = d.roa("rechargew_initinfo");
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_sc_rechargew_shitinit_request(self: sc_rechargew_shitinit_request, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 1);

		if (self.initinfo != undefined) {
			se.woa ("rechargew_initinfo", self.initinfo, 0);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["sc_rechargew_shitinit_request"] = {en: _encode_sc_rechargew_shitinit_request, de: _decode_sc_rechargew_shitinit_request}
	export class sc_rechargew_shitstep_request {
		public payType: number; // tag 0
		public gid: number; // tag 1
		public step: number; // tag 2
		public getnum: number[]; // tag 3
		public steps: number[]; // tag 4
	}

	function _decode_sc_rechargew_shitstep_request(d: SprotoTypeDeserialize) {
		let o = new sc_rechargew_shitstep_request;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.payType = d.ri ();
				break;
			case 1:
				o.gid = d.ri ();
				break;
			case 2:
				o.step = d.ri ();
				break;
			case 3:
				o.getnum = d.ria ();
				break;
			case 4:
				o.steps = d.ria ();
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_sc_rechargew_shitstep_request(self: sc_rechargew_shitstep_request, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 5);

		if (self.payType != undefined) {
			se.wi (self.payType, 0);
		}

		if (self.gid != undefined) {
			se.wi (self.gid, 1);
		}

		if (self.step != undefined) {
			se.wi (self.step, 2);
		}

		if (self.getnum != undefined) {
			se.wia (self.getnum, 3);
		}

		if (self.steps != undefined) {
			se.wia (self.steps, 4);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["sc_rechargew_shitstep_request"] = {en: _encode_sc_rechargew_shitstep_request, de: _decode_sc_rechargew_shitstep_request}
}

