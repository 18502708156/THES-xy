// Generated by sprotodump. DO NOT EDIT!

namespace Sproto { 
	export class sc_spellsRes_info_request {
		public useSpells: spellsAttr[]; // tag 0
		public spellsList: spellsData[]; // tag 1
		public num: number; // tag 2
		public perfectNum: number; // tag 3
	}

	function _decode_sc_spellsRes_info_request(d: SprotoTypeDeserialize) {
		let o = new sc_spellsRes_info_request;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.useSpells = d.roa("spellsAttr");
				break;
			case 1:
				o.spellsList = d.roa("spellsData");
				break;
			case 2:
				o.num = d.ri ();
				break;
			case 3:
				o.perfectNum = d.ri ();
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_sc_spellsRes_info_request(self: sc_spellsRes_info_request, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 4);

		if (self.useSpells != undefined) {
			se.woa ("spellsAttr", self.useSpells, 0);
		}

		if (self.spellsList != undefined) {
			se.woa ("spellsData", self.spellsList, 1);
		}

		if (self.num != undefined) {
			se.wi (self.num, 2);
		}

		if (self.perfectNum != undefined) {
			se.wi (self.perfectNum, 3);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["sc_spellsRes_info_request"] = {en: _encode_sc_spellsRes_info_request, de: _decode_sc_spellsRes_info_request}
	export class spellsAttr {
		public spellsNo: number; // tag 0
		public lv: number; // tag 1
		public skillList: number[]; // tag 2
	}

	function _decode_spellsAttr(d: SprotoTypeDeserialize) {
		let o = new spellsAttr;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.spellsNo = d.ri ();
				break;
			case 1:
				o.lv = d.ri ();
				break;
			case 2:
				o.skillList = d.ria ();
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_spellsAttr(self: spellsAttr, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 3);

		if (self.spellsNo != undefined) {
			se.wi (self.spellsNo, 0);
		}

		if (self.lv != undefined) {
			se.wi (self.lv, 1);
		}

		if (self.skillList != undefined) {
			se.wia (self.skillList, 2);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["spellsAttr"] = {en: _encode_spellsAttr, de: _decode_spellsAttr}
	export class spellsData {
		public spellsId: number; // tag 0
		public spellsNo: number; // tag 1
		public lock: number; // tag 2
		public skillList: number[]; // tag 3
	}

	function _decode_spellsData(d: SprotoTypeDeserialize) {
		let o = new spellsData;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.spellsId = d.ri ();
				break;
			case 1:
				o.spellsNo = d.ri ();
				break;
			case 2:
				o.lock = d.ri ();
				break;
			case 3:
				o.skillList = d.ria ();
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_spellsData(self: spellsData, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 4);

		if (self.spellsId != undefined) {
			se.wi (self.spellsId, 0);
		}

		if (self.spellsNo != undefined) {
			se.wi (self.spellsNo, 1);
		}

		if (self.lock != undefined) {
			se.wi (self.lock, 2);
		}

		if (self.skillList != undefined) {
			se.wia (self.skillList, 3);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["spellsData"] = {en: _encode_spellsData, de: _decode_spellsData}
}

