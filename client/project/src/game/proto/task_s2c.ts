// Generated by sprotodump. DO NOT EDIT!

namespace Sproto { 
	export class sc_task_info_request {
		public type: number; // tag 0
		public tasks: task_data[]; // tag 1
	}

	function _decode_sc_task_info_request(d: SprotoTypeDeserialize) {
		let o = new sc_task_info_request;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.type = d.ri ();
				break;
			case 1:
				o.tasks = d.roa("task_data");
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_sc_task_info_request(self: sc_task_info_request, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 2);

		if (self.type != undefined) {
			se.wi (self.type, 0);
		}

		if (self.tasks != undefined) {
			se.woa ("task_data", self.tasks, 1);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["sc_task_info_request"] = {en: _encode_sc_task_info_request, de: _decode_sc_task_info_request}
	export class sc_task_update_request {
		public type: number; // tag 0
		public data: task_data; // tag 1
	}

	function _decode_sc_task_update_request(d: SprotoTypeDeserialize) {
		let o = new sc_task_update_request;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.type = d.ri ();
				break;
			case 1:
				o.data = d.ro("task_data");
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_sc_task_update_request(self: sc_task_update_request, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 2);

		if (self.type != undefined) {
			se.wi (self.type, 0);
		}

		if (self.data != undefined) {
			se.wo ("task_data", self.data, 1);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["sc_task_update_request"] = {en: _encode_sc_task_update_request, de: _decode_sc_task_update_request}
	export class task_data {
		public id: number; // tag 0
		public status: number; // tag 1
		public progress: task_progress_data; // tag 2
	}

	function _decode_task_data(d: SprotoTypeDeserialize) {
		let o = new task_data;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.id = d.ri ();
				break;
			case 1:
				o.status = d.ri ();
				break;
			case 2:
				o.progress = d.ro("task_progress_data");
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_task_data(self: task_data, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 3);

		if (self.id != undefined) {
			se.wi (self.id, 0);
		}

		if (self.status != undefined) {
			se.wi (self.status, 1);
		}

		if (self.progress != undefined) {
			se.wo ("task_progress_data", self.progress, 2);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["task_data"] = {en: _encode_task_data, de: _decode_task_data}
	export class task_progress_data {
		public value: number; // tag 0
	}

	function _decode_task_progress_data(d: SprotoTypeDeserialize) {
		let o = new task_progress_data;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.value = d.ri ();
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_task_progress_data(self: task_progress_data, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 1);

		if (self.value != undefined) {
			se.wi (self.value, 0);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["task_progress_data"] = {en: _encode_task_progress_data, de: _decode_task_progress_data}
}

