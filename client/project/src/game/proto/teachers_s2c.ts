// Generated by sprotodump. DO NOT EDIT!

namespace Sproto { 
	export class sc_teachers_graduation_request {
		public no: number; // tag 0
	}

	function _decode_sc_teachers_graduation_request(d: SprotoTypeDeserialize) {
		let o = new sc_teachers_graduation_request;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.no = d.ri ();
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_sc_teachers_graduation_request(self: sc_teachers_graduation_request, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 1);

		if (self.no != undefined) {
			se.wi (self.no, 0);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["sc_teachers_graduation_request"] = {en: _encode_sc_teachers_graduation_request, de: _decode_sc_teachers_graduation_request}
	export class sc_teachers_info_request {
		public teacherData: teachers_data; // tag 0
		public studentData: teachers_data[]; // tag 1
		public messageData: teachers_info[]; // tag 2
	}

	function _decode_sc_teachers_info_request(d: SprotoTypeDeserialize) {
		let o = new sc_teachers_info_request;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.teacherData = d.ro("teachers_data");
				break;
			case 1:
				o.studentData = d.roa("teachers_data");
				break;
			case 2:
				o.messageData = d.roa("teachers_info");
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_sc_teachers_info_request(self: sc_teachers_info_request, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 3);

		if (self.teacherData != undefined) {
			se.wo ("teachers_data", self.teacherData, 0);
		}

		if (self.studentData != undefined) {
			se.woa ("teachers_data", self.studentData, 1);
		}

		if (self.messageData != undefined) {
			se.woa ("teachers_info", self.messageData, 2);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["sc_teachers_info_request"] = {en: _encode_sc_teachers_info_request, de: _decode_sc_teachers_info_request}
	export class sc_teachers_message_add_request {
		public dbid: number; // tag 0
		public name: string; // tag 1
		public lv: number; // tag 2
	}

	function _decode_sc_teachers_message_add_request(d: SprotoTypeDeserialize) {
		let o = new sc_teachers_message_add_request;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.dbid = d.ri ();
				break;
			case 1:
				o.name = d.rs ();
				break;
			case 2:
				o.lv = d.ri ();
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_sc_teachers_message_add_request(self: sc_teachers_message_add_request, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 3);

		if (self.dbid != undefined) {
			se.wi (self.dbid, 0);
		}

		if (self.name != undefined) {
			se.ws (self.name, 1);
		}

		if (self.lv != undefined) {
			se.wi (self.lv, 2);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["sc_teachers_message_add_request"] = {en: _encode_sc_teachers_message_add_request, de: _decode_sc_teachers_message_add_request}
	export class sc_teachers_update_request {
		public teacherData: teachers_data; // tag 0
		public studentData: teachers_data; // tag 1
	}

	function _decode_sc_teachers_update_request(d: SprotoTypeDeserialize) {
		let o = new sc_teachers_update_request;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.teacherData = d.ro("teachers_data");
				break;
			case 1:
				o.studentData = d.ro("teachers_data");
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_sc_teachers_update_request(self: sc_teachers_update_request, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 2);

		if (self.teacherData != undefined) {
			se.wo ("teachers_data", self.teacherData, 0);
		}

		if (self.studentData != undefined) {
			se.wo ("teachers_data", self.studentData, 1);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["sc_teachers_update_request"] = {en: _encode_sc_teachers_update_request, de: _decode_sc_teachers_update_request}
	export class teachers_act_data {
		public actNo: number; // tag 0
		public num: number; // tag 1
	}

	function _decode_teachers_act_data(d: SprotoTypeDeserialize) {
		let o = new teachers_act_data;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.actNo = d.ri ();
				break;
			case 1:
				o.num = d.ri ();
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_teachers_act_data(self: teachers_act_data, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 2);

		if (self.actNo != undefined) {
			se.wi (self.actNo, 0);
		}

		if (self.num != undefined) {
			se.wi (self.num, 1);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["teachers_act_data"] = {en: _encode_teachers_act_data, de: _decode_teachers_act_data}
	export class teachers_data {
		public no: number; // tag 0
		public teacher: number; // tag 1
		public tName: string; // tag 2
		public tLv: number; // tag 3
		public tShows: entity_shows; // tag 4
		public student: number; // tag 5
		public sName: string; // tag 6
		public sLv: number; // tag 7
		public sShows: entity_shows; // tag 8
		public exp: number; // tag 9
		public data: teachers_act_data[]; // tag 10
		public rewards: number; // tag 11
		public tLogin: boolean; // tag 12
		public sLogin: boolean; // tag 13
		public day: number; // tag 14
	}

	function _decode_teachers_data(d: SprotoTypeDeserialize) {
		let o = new teachers_data;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.no = d.ri ();
				break;
			case 1:
				o.teacher = d.ri ();
				break;
			case 2:
				o.tName = d.rs ();
				break;
			case 3:
				o.tLv = d.ri ();
				break;
			case 4:
				o.tShows = d.ro("entity_shows");
				break;
			case 5:
				o.student = d.ri ();
				break;
			case 6:
				o.sName = d.rs ();
				break;
			case 7:
				o.sLv = d.ri ();
				break;
			case 8:
				o.sShows = d.ro("entity_shows");
				break;
			case 9:
				o.exp = d.ri ();
				break;
			case 10:
				o.data = d.roa("teachers_act_data");
				break;
			case 11:
				o.rewards = d.ri ();
				break;
			case 12:
				o.tLogin = d.rb ();
				break;
			case 13:
				o.sLogin = d.rb ();
				break;
			case 14:
				o.day = d.ri ();
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_teachers_data(self: teachers_data, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 15);

		if (self.no != undefined) {
			se.wi (self.no, 0);
		}

		if (self.teacher != undefined) {
			se.wi (self.teacher, 1);
		}

		if (self.tName != undefined) {
			se.ws (self.tName, 2);
		}

		if (self.tLv != undefined) {
			se.wi (self.tLv, 3);
		}

		if (self.tShows != undefined) {
			se.wo ("entity_shows", self.tShows, 4);
		}

		if (self.student != undefined) {
			se.wi (self.student, 5);
		}

		if (self.sName != undefined) {
			se.ws (self.sName, 6);
		}

		if (self.sLv != undefined) {
			se.wi (self.sLv, 7);
		}

		if (self.sShows != undefined) {
			se.wo ("entity_shows", self.sShows, 8);
		}

		if (self.exp != undefined) {
			se.wi (self.exp, 9);
		}

		if (self.data != undefined) {
			se.woa ("teachers_act_data", self.data, 10);
		}

		if (self.rewards != undefined) {
			se.wi (self.rewards, 11);
		}

		if (self.tLogin != undefined) {
			se.wb (self.tLogin, 12);
		}

		if (self.sLogin != undefined) {
			se.wb (self.sLogin, 13);
		}

		if (self.day != undefined) {
			se.wi (self.day, 14);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["teachers_data"] = {en: _encode_teachers_data, de: _decode_teachers_data}
	export class teachers_info {
		public dbid: number; // tag 0
		public name: string; // tag 1
		public lv: number; // tag 2
	}

	function _decode_teachers_info(d: SprotoTypeDeserialize) {
		let o = new teachers_info;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.dbid = d.ri ();
				break;
			case 1:
				o.name = d.rs ();
				break;
			case 2:
				o.lv = d.ri ();
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_teachers_info(self: teachers_info, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 3);

		if (self.dbid != undefined) {
			se.wi (self.dbid, 0);
		}

		if (self.name != undefined) {
			se.ws (self.name, 1);
		}

		if (self.lv != undefined) {
			se.wi (self.lv, 2);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["teachers_info"] = {en: _encode_teachers_info, de: _decode_teachers_info}
}

