// Generated by sprotodump. DO NOT EDIT!

namespace Sproto { 
	export class sc_tianshen_info_request {
		public use: number; // tag 0
		public infoList: tianshen_data[]; // tag 1
		public drugNum: number; // tag 2
	}

	function _decode_sc_tianshen_info_request(d: SprotoTypeDeserialize) {
		let o = new sc_tianshen_info_request;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.use = d.ri ();
				break;
			case 1:
				o.infoList = d.roa("tianshen_data");
				break;
			case 2:
				o.drugNum = d.ri ();
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_sc_tianshen_info_request(self: sc_tianshen_info_request, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 3);

		if (self.use != undefined) {
			se.wi (self.use, 0);
		}

		if (self.infoList != undefined) {
			se.woa ("tianshen_data", self.infoList, 1);
		}

		if (self.drugNum != undefined) {
			se.wi (self.drugNum, 2);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["sc_tianshen_info_request"] = {en: _encode_sc_tianshen_info_request, de: _decode_sc_tianshen_info_request}
	export class sc_tianshen_spells_info_request {
		public data: tianshen_spells[]; // tag 0
	}

	function _decode_sc_tianshen_spells_info_request(d: SprotoTypeDeserialize) {
		let o = new sc_tianshen_spells_info_request;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.data = d.roa("tianshen_spells");
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_sc_tianshen_spells_info_request(self: sc_tianshen_spells_info_request, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 1);

		if (self.data != undefined) {
			se.woa ("tianshen_spells", self.data, 0);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["sc_tianshen_spells_info_request"] = {en: _encode_sc_tianshen_spells_info_request, de: _decode_sc_tianshen_spells_info_request}
	export class tianshen_data {
		public no: number; // tag 0
		public lv: number; // tag 1
		public upNum: number; // tag 2
		public promotion: number; // tag 3
	}

	function _decode_tianshen_data(d: SprotoTypeDeserialize) {
		let o = new tianshen_data;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.no = d.ri ();
				break;
			case 1:
				o.lv = d.ri ();
				break;
			case 2:
				o.upNum = d.ri ();
				break;
			case 3:
				o.promotion = d.ri ();
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_tianshen_data(self: tianshen_data, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 4);

		if (self.no != undefined) {
			se.wi (self.no, 0);
		}

		if (self.lv != undefined) {
			se.wi (self.lv, 1);
		}

		if (self.upNum != undefined) {
			se.wi (self.upNum, 2);
		}

		if (self.promotion != undefined) {
			se.wi (self.promotion, 3);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["tianshen_data"] = {en: _encode_tianshen_data, de: _decode_tianshen_data}
	export class tianshen_spells {
		public upNum: number; // tag 0
		public lv: number; // tag 1
	}

	function _decode_tianshen_spells(d: SprotoTypeDeserialize) {
		let o = new tianshen_spells;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.upNum = d.ri ();
				break;
			case 1:
				o.lv = d.ri ();
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_tianshen_spells(self: tianshen_spells, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 2);

		if (self.upNum != undefined) {
			se.wi (self.upNum, 0);
		}

		if (self.lv != undefined) {
			se.wi (self.lv, 1);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["tianshen_spells"] = {en: _encode_tianshen_spells, de: _decode_tianshen_spells}
}

