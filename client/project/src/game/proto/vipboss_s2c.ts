// Generated by sprotodump. DO NOT EDIT!

namespace Sproto { 
	export class sc_vipboss_base_list_request {
		public bossInfos: vipboss_info[]; // tag 0
	}

	function _decode_sc_vipboss_base_list_request(d: SprotoTypeDeserialize) {
		let o = new sc_vipboss_base_list_request;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.bossInfos = d.roa("vipboss_info");
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_sc_vipboss_base_list_request(self: sc_vipboss_base_list_request, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 1);

		if (self.bossInfos != undefined) {
			se.woa ("vipboss_info", self.bossInfos, 0);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["sc_vipboss_base_list_request"] = {en: _encode_sc_vipboss_base_list_request, de: _decode_sc_vipboss_base_list_request}
	export class sc_vipboss_update_one_request {
		public bossInfo: vipboss_info; // tag 0
	}

	function _decode_sc_vipboss_update_one_request(d: SprotoTypeDeserialize) {
		let o = new sc_vipboss_update_one_request;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.bossInfo = d.ro("vipboss_info");
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_sc_vipboss_update_one_request(self: sc_vipboss_update_one_request, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 1);

		if (self.bossInfo != undefined) {
			se.wo ("vipboss_info", self.bossInfo, 0);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["sc_vipboss_update_one_request"] = {en: _encode_sc_vipboss_update_one_request, de: _decode_sc_vipboss_update_one_request}
	export class vipboss_info {
		public id: number; // tag 0
		public count: number; // tag 1
		public daycount: number; // tag 2
	}

	function _decode_vipboss_info(d: SprotoTypeDeserialize) {
		let o = new vipboss_info;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.id = d.ri ();
				break;
			case 1:
				o.count = d.ri ();
				break;
			case 2:
				o.daycount = d.ri ();
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_vipboss_info(self: vipboss_info, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 3);

		if (self.id != undefined) {
			se.wi (self.id, 0);
		}

		if (self.count != undefined) {
			se.wi (self.count, 1);
		}

		if (self.daycount != undefined) {
			se.wi (self.daycount, 2);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["vipboss_info"] = {en: _encode_vipboss_info, de: _decode_vipboss_info}
}

