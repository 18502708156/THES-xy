// Generated by sprotodump. DO NOT EDIT!

namespace Sproto { 
	export class activity_base_config {
		public Id: number; // tag 0
		public timeType: number; // tag 1
		public startTime: string; // tag 2
		public endTime: string; // tag 3
		public closetime: number; // tag 4
		public activityType: number; // tag 5
		public openLV: number; // tag 6
		public tabicon: string; // tag 7
		public desc: string; // tag 8
		public openType: number; // tag 9
		public source1: string; // tag 10
		public source2: string; // tag 11
		public notice: string; // tag 12
	}

	function _decode_activity_base_config(d: SprotoTypeDeserialize) {
		let o = new activity_base_config;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.Id = d.ri ();
				break;
			case 1:
				o.timeType = d.ri ();
				break;
			case 2:
				o.startTime = d.rs ();
				break;
			case 3:
				o.endTime = d.rs ();
				break;
			case 4:
				o.closetime = d.ri ();
				break;
			case 5:
				o.activityType = d.ri ();
				break;
			case 6:
				o.openLV = d.ri ();
				break;
			case 7:
				o.tabicon = d.rs ();
				break;
			case 8:
				o.desc = d.rs ();
				break;
			case 9:
				o.openType = d.ri ();
				break;
			case 10:
				o.source1 = d.rs ();
				break;
			case 11:
				o.source2 = d.rs ();
				break;
			case 12:
				o.notice = d.rs ();
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_activity_base_config(self: activity_base_config, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 13);

		if (self.Id != undefined) {
			se.wi (self.Id, 0);
		}

		if (self.timeType != undefined) {
			se.wi (self.timeType, 1);
		}

		if (self.startTime != undefined) {
			se.ws (self.startTime, 2);
		}

		if (self.endTime != undefined) {
			se.ws (self.endTime, 3);
		}

		if (self.closetime != undefined) {
			se.wi (self.closetime, 4);
		}

		if (self.activityType != undefined) {
			se.wi (self.activityType, 5);
		}

		if (self.openLV != undefined) {
			se.wi (self.openLV, 6);
		}

		if (self.tabicon != undefined) {
			se.ws (self.tabicon, 7);
		}

		if (self.desc != undefined) {
			se.ws (self.desc, 8);
		}

		if (self.openType != undefined) {
			se.wi (self.openType, 9);
		}

		if (self.source1 != undefined) {
			se.ws (self.source1, 10);
		}

		if (self.source2 != undefined) {
			se.ws (self.source2, 11);
		}

		if (self.notice != undefined) {
			se.ws (self.notice, 12);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["activity_base_config"] = {en: _encode_activity_base_config, de: _decode_activity_base_config}
	export class activity_base_type {
		public id: number; // tag 0
		public startTime: number; // tag 1
		public endTime: number; // tag 2
		public type: number; // tag 3
		public openState: number; // tag 4
	}

	function _decode_activity_base_type(d: SprotoTypeDeserialize) {
		let o = new activity_base_type;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.id = d.ri ();
				break;
			case 1:
				o.startTime = d.ri ();
				break;
			case 2:
				o.endTime = d.ri ();
				break;
			case 3:
				o.type = d.ri ();
				break;
			case 4:
				o.openState = d.ri ();
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_activity_base_type(self: activity_base_type, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 5);

		if (self.id != undefined) {
			se.wi (self.id, 0);
		}

		if (self.startTime != undefined) {
			se.wi (self.startTime, 1);
		}

		if (self.endTime != undefined) {
			se.wi (self.endTime, 2);
		}

		if (self.type != undefined) {
			se.wi (self.type, 3);
		}

		if (self.openState != undefined) {
			se.wi (self.openState, 4);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["activity_base_type"] = {en: _encode_activity_base_type, de: _decode_activity_base_type}
	export class activity_dabiao_data {
		public name: string; // tag 0
		public value: number; // tag 1
	}

	function _decode_activity_dabiao_data(d: SprotoTypeDeserialize) {
		let o = new activity_dabiao_data;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.name = d.rs ();
				break;
			case 1:
				o.value = d.ri ();
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_activity_dabiao_data(self: activity_dabiao_data, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 2);

		if (self.name != undefined) {
			se.ws (self.name, 0);
		}

		if (self.value != undefined) {
			se.wi (self.value, 1);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["activity_dabiao_data"] = {en: _encode_activity_dabiao_data, de: _decode_activity_dabiao_data}
	export class activity_data_collection {
		public type01: activity_type01; // tag 0
		public type02: activity_type02; // tag 1
		public type03: activity_type03; // tag 2
		public type04: activity_type04; // tag 3
		public type05: activity_type05; // tag 4
		public type06: activity_type06; // tag 5
		public type07: activity_type07; // tag 6
		public type08: activity_type08; // tag 7
		public type09: activity_type09; // tag 8
		public type10: activity_type10; // tag 9
		public type11: activity_type11; // tag 10
		public type12: activity_type12; // tag 11
		public type13: activity_type13; // tag 12
		public type14: activity_type14; // tag 13
		public type15: activity_type15; // tag 14
		public type16: activity_type16; // tag 15
		public type17: activity_type17; // tag 16
		public type18: activity_type18; // tag 17
		public type19: activity_type19; // tag 19
		public type20: activity_type20; // tag 20
		public type21: activity_type21; // tag 21
		public type22: activity_type22; // tag 22
		public type23: activity_type23; // tag 23
		public type24: activity_type24; // tag 24
		public type25: activity_type25; // tag 25
		public type26: activity_type26; // tag 26
		public type27: activity_type27; // tag 27
		public basecfg: activity_base_config; // tag 28
		public btncfg: string; // tag 29
		public config: string; // tag 30
		public type28: activity_type28; // tag 31
	}

	function _decode_activity_data_collection(d: SprotoTypeDeserialize) {
		let o = new activity_data_collection;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.type01 = d.ro("activity_type01");
				break;
			case 1:
				o.type02 = d.ro("activity_type02");
				break;
			case 2:
				o.type03 = d.ro("activity_type03");
				break;
			case 3:
				o.type04 = d.ro("activity_type04");
				break;
			case 4:
				o.type05 = d.ro("activity_type05");
				break;
			case 5:
				o.type06 = d.ro("activity_type06");
				break;
			case 6:
				o.type07 = d.ro("activity_type07");
				break;
			case 7:
				o.type08 = d.ro("activity_type08");
				break;
			case 8:
				o.type09 = d.ro("activity_type09");
				break;
			case 9:
				o.type10 = d.ro("activity_type10");
				break;
			case 10:
				o.type11 = d.ro("activity_type11");
				break;
			case 11:
				o.type12 = d.ro("activity_type12");
				break;
			case 12:
				o.type13 = d.ro("activity_type13");
				break;
			case 13:
				o.type14 = d.ro("activity_type14");
				break;
			case 14:
				o.type15 = d.ro("activity_type15");
				break;
			case 15:
				o.type16 = d.ro("activity_type16");
				break;
			case 16:
				o.type17 = d.ro("activity_type17");
				break;
			case 17:
				o.type18 = d.ro("activity_type18");
				break;
			case 19:
				o.type19 = d.ro("activity_type19");
				break;
			case 20:
				o.type20 = d.ro("activity_type20");
				break;
			case 21:
				o.type21 = d.ro("activity_type21");
				break;
			case 22:
				o.type22 = d.ro("activity_type22");
				break;
			case 23:
				o.type23 = d.ro("activity_type23");
				break;
			case 24:
				o.type24 = d.ro("activity_type24");
				break;
			case 25:
				o.type25 = d.ro("activity_type25");
				break;
			case 26:
				o.type26 = d.ro("activity_type26");
				break;
			case 27:
				o.type27 = d.ro("activity_type27");
				break;
			case 28:
				o.basecfg = d.ro("activity_base_config");
				break;
			case 29:
				o.btncfg = d.rs ();
				break;
			case 30:
				o.config = d.rs ();
				break;
			case 31:
				o.type28 = d.ro("activity_type28");
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_activity_data_collection(self: activity_data_collection, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 32);

		if (self.type01 != undefined) {
			se.wo ("activity_type01", self.type01, 0);
		}

		if (self.type02 != undefined) {
			se.wo ("activity_type02", self.type02, 1);
		}

		if (self.type03 != undefined) {
			se.wo ("activity_type03", self.type03, 2);
		}

		if (self.type04 != undefined) {
			se.wo ("activity_type04", self.type04, 3);
		}

		if (self.type05 != undefined) {
			se.wo ("activity_type05", self.type05, 4);
		}

		if (self.type06 != undefined) {
			se.wo ("activity_type06", self.type06, 5);
		}

		if (self.type07 != undefined) {
			se.wo ("activity_type07", self.type07, 6);
		}

		if (self.type08 != undefined) {
			se.wo ("activity_type08", self.type08, 7);
		}

		if (self.type09 != undefined) {
			se.wo ("activity_type09", self.type09, 8);
		}

		if (self.type10 != undefined) {
			se.wo ("activity_type10", self.type10, 9);
		}

		if (self.type11 != undefined) {
			se.wo ("activity_type11", self.type11, 10);
		}

		if (self.type12 != undefined) {
			se.wo ("activity_type12", self.type12, 11);
		}

		if (self.type13 != undefined) {
			se.wo ("activity_type13", self.type13, 12);
		}

		if (self.type14 != undefined) {
			se.wo ("activity_type14", self.type14, 13);
		}

		if (self.type15 != undefined) {
			se.wo ("activity_type15", self.type15, 14);
		}

		if (self.type16 != undefined) {
			se.wo ("activity_type16", self.type16, 15);
		}

		if (self.type17 != undefined) {
			se.wo ("activity_type17", self.type17, 16);
		}

		if (self.type18 != undefined) {
			se.wo ("activity_type18", self.type18, 17);
		}

		if (self.type19 != undefined) {
			se.wo ("activity_type19", self.type19, 19);
		}

		if (self.type20 != undefined) {
			se.wo ("activity_type20", self.type20, 20);
		}

		if (self.type21 != undefined) {
			se.wo ("activity_type21", self.type21, 21);
		}

		if (self.type22 != undefined) {
			se.wo ("activity_type22", self.type22, 22);
		}

		if (self.type23 != undefined) {
			se.wo ("activity_type23", self.type23, 23);
		}

		if (self.type24 != undefined) {
			se.wo ("activity_type24", self.type24, 24);
		}

		if (self.type25 != undefined) {
			se.wo ("activity_type25", self.type25, 25);
		}

		if (self.type26 != undefined) {
			se.wo ("activity_type26", self.type26, 26);
		}

		if (self.type27 != undefined) {
			se.wo ("activity_type27", self.type27, 27);
		}

		if (self.basecfg != undefined) {
			se.wo ("activity_base_config", self.basecfg, 28);
		}

		if (self.btncfg != undefined) {
			se.ws (self.btncfg, 29);
		}

		if (self.config != undefined) {
			se.ws (self.config, 30);
		}

		if (self.type28 != undefined) {
			se.wo ("activity_type28", self.type28, 31);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["activity_data_collection"] = {en: _encode_activity_data_collection, de: _decode_activity_data_collection}
	export class activity_rebate {
		public no: number; // tag 0
		public num: number; // tag 1
	}

	function _decode_activity_rebate(d: SprotoTypeDeserialize) {
		let o = new activity_rebate;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.no = d.ri ();
				break;
			case 1:
				o.num = d.ri ();
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_activity_rebate(self: activity_rebate, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 2);

		if (self.no != undefined) {
			se.wi (self.no, 0);
		}

		if (self.num != undefined) {
			se.wi (self.num, 1);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["activity_rebate"] = {en: _encode_activity_rebate, de: _decode_activity_rebate}
	export class activity_type01 {
		public baseData: activity_base_type; // tag 0
		public record: number[]; // tag 1
	}

	function _decode_activity_type01(d: SprotoTypeDeserialize) {
		let o = new activity_type01;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.baseData = d.ro("activity_base_type");
				break;
			case 1:
				o.record = d.ria ();
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_activity_type01(self: activity_type01, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 2);

		if (self.baseData != undefined) {
			se.wo ("activity_base_type", self.baseData, 0);
		}

		if (self.record != undefined) {
			se.wia (self.record, 1);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["activity_type01"] = {en: _encode_activity_type01, de: _decode_activity_type01}
	export class activity_type02 {
		public baseData: activity_base_type; // tag 0
		public buyData: number[]; // tag 1
	}

	function _decode_activity_type02(d: SprotoTypeDeserialize) {
		let o = new activity_type02;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.baseData = d.ro("activity_base_type");
				break;
			case 1:
				o.buyData = d.ria ();
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_activity_type02(self: activity_type02, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 2);

		if (self.baseData != undefined) {
			se.wo ("activity_base_type", self.baseData, 0);
		}

		if (self.buyData != undefined) {
			se.wia (self.buyData, 1);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["activity_type02"] = {en: _encode_activity_type02, de: _decode_activity_type02}
	export class activity_type03 {
		public baseData: activity_base_type; // tag 0
		public record: number[]; // tag 1
		public day: number; // tag 2
		public rechargeCount: number; // tag 4
	}

	function _decode_activity_type03(d: SprotoTypeDeserialize) {
		let o = new activity_type03;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.baseData = d.ro("activity_base_type");
				break;
			case 1:
				o.record = d.ria ();
				break;
			case 2:
				o.day = d.ri ();
				break;
			case 4:
				o.rechargeCount = d.ri ();
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_activity_type03(self: activity_type03, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 5);

		if (self.baseData != undefined) {
			se.wo ("activity_base_type", self.baseData, 0);
		}

		if (self.record != undefined) {
			se.wia (self.record, 1);
		}

		if (self.day != undefined) {
			se.wi (self.day, 2);
		}

		if (self.rechargeCount != undefined) {
			se.wi (self.rechargeCount, 4);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["activity_type03"] = {en: _encode_activity_type03, de: _decode_activity_type03}
	export class activity_type04 {
		public baseData: activity_base_type; // tag 0
	}

	function _decode_activity_type04(d: SprotoTypeDeserialize) {
		let o = new activity_type04;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.baseData = d.ro("activity_base_type");
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_activity_type04(self: activity_type04, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 1);

		if (self.baseData != undefined) {
			se.wo ("activity_base_type", self.baseData, 0);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["activity_type04"] = {en: _encode_activity_type04, de: _decode_activity_type04}
	export class activity_type05 {
		public baseData: activity_base_type; // tag 0
		public record: number; // tag 1
		public logTime: number; // tag 2
	}

	function _decode_activity_type05(d: SprotoTypeDeserialize) {
		let o = new activity_type05;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.baseData = d.ro("activity_base_type");
				break;
			case 1:
				o.record = d.ri ();
				break;
			case 2:
				o.logTime = d.ri ();
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_activity_type05(self: activity_type05, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 3);

		if (self.baseData != undefined) {
			se.wo ("activity_base_type", self.baseData, 0);
		}

		if (self.record != undefined) {
			se.wi (self.record, 1);
		}

		if (self.logTime != undefined) {
			se.wi (self.logTime, 2);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["activity_type05"] = {en: _encode_activity_type05, de: _decode_activity_type05}
	export class activity_type06 {
		public baseData: activity_base_type; // tag 0
		public reachindex: number; // tag 1
		public value: number; // tag 2
		public drawrecord: number; // tag 3
		public drawtime: number; // tag 4
	}

	function _decode_activity_type06(d: SprotoTypeDeserialize) {
		let o = new activity_type06;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.baseData = d.ro("activity_base_type");
				break;
			case 1:
				o.reachindex = d.ri ();
				break;
			case 2:
				o.value = d.ri ();
				break;
			case 3:
				o.drawrecord = d.ri ();
				break;
			case 4:
				o.drawtime = d.ri ();
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_activity_type06(self: activity_type06, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 5);

		if (self.baseData != undefined) {
			se.wo ("activity_base_type", self.baseData, 0);
		}

		if (self.reachindex != undefined) {
			se.wi (self.reachindex, 1);
		}

		if (self.value != undefined) {
			se.wi (self.value, 2);
		}

		if (self.drawrecord != undefined) {
			se.wi (self.drawrecord, 3);
		}

		if (self.drawtime != undefined) {
			se.wi (self.drawtime, 4);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["activity_type06"] = {en: _encode_activity_type06, de: _decode_activity_type06}
	export class activity_type07 {
		public baseData: activity_base_type; // tag 0
		public record: number[]; // tag 1
		public recharge: number; // tag 2
	}

	function _decode_activity_type07(d: SprotoTypeDeserialize) {
		let o = new activity_type07;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.baseData = d.ro("activity_base_type");
				break;
			case 1:
				o.record = d.ria ();
				break;
			case 2:
				o.recharge = d.ri ();
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_activity_type07(self: activity_type07, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 3);

		if (self.baseData != undefined) {
			se.wo ("activity_base_type", self.baseData, 0);
		}

		if (self.record != undefined) {
			se.wia (self.record, 1);
		}

		if (self.recharge != undefined) {
			se.wi (self.recharge, 2);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["activity_type07"] = {en: _encode_activity_type07, de: _decode_activity_type07}
	export class activity_type08 {
		public baseData: activity_base_type; // tag 0
		public status: number; // tag 1
		public day: number; // tag 2
	}

	function _decode_activity_type08(d: SprotoTypeDeserialize) {
		let o = new activity_type08;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.baseData = d.ro("activity_base_type");
				break;
			case 1:
				o.status = d.ri ();
				break;
			case 2:
				o.day = d.ri ();
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_activity_type08(self: activity_type08, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 3);

		if (self.baseData != undefined) {
			se.wo ("activity_base_type", self.baseData, 0);
		}

		if (self.status != undefined) {
			se.wi (self.status, 1);
		}

		if (self.day != undefined) {
			se.wi (self.day, 2);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["activity_type08"] = {en: _encode_activity_type08, de: _decode_activity_type08}
	export class activity_type09 {
		public baseData: activity_base_type; // tag 0
		public buyData: number[]; // tag 1
		public day: number; // tag 2
	}

	function _decode_activity_type09(d: SprotoTypeDeserialize) {
		let o = new activity_type09;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.baseData = d.ro("activity_base_type");
				break;
			case 1:
				o.buyData = d.ria ();
				break;
			case 2:
				o.day = d.ri ();
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_activity_type09(self: activity_type09, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 3);

		if (self.baseData != undefined) {
			se.wo ("activity_base_type", self.baseData, 0);
		}

		if (self.buyData != undefined) {
			se.wia (self.buyData, 1);
		}

		if (self.day != undefined) {
			se.wi (self.day, 2);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["activity_type09"] = {en: _encode_activity_type09, de: _decode_activity_type09}
	export class activity_type10 {
		public baseData: activity_base_type; // tag 0
	}

	function _decode_activity_type10(d: SprotoTypeDeserialize) {
		let o = new activity_type10;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.baseData = d.ro("activity_base_type");
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_activity_type10(self: activity_type10, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 1);

		if (self.baseData != undefined) {
			se.wo ("activity_base_type", self.baseData, 0);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["activity_type10"] = {en: _encode_activity_type10, de: _decode_activity_type10}
	export class activity_type11 {
		public baseData: activity_base_type; // tag 0
		public reachBin: number; // tag 1
		public drawBin: number; // tag 2
	}

	function _decode_activity_type11(d: SprotoTypeDeserialize) {
		let o = new activity_type11;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.baseData = d.ro("activity_base_type");
				break;
			case 1:
				o.reachBin = d.ri ();
				break;
			case 2:
				o.drawBin = d.ri ();
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_activity_type11(self: activity_type11, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 3);

		if (self.baseData != undefined) {
			se.wo ("activity_base_type", self.baseData, 0);
		}

		if (self.reachBin != undefined) {
			se.wi (self.reachBin, 1);
		}

		if (self.drawBin != undefined) {
			se.wi (self.drawBin, 2);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["activity_type11"] = {en: _encode_activity_type11, de: _decode_activity_type11}
	export class activity_type12 {
		public baseData: activity_base_type; // tag 0
		public recharge: number; // tag 1
		public drawBin: number; // tag 2
	}

	function _decode_activity_type12(d: SprotoTypeDeserialize) {
		let o = new activity_type12;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.baseData = d.ro("activity_base_type");
				break;
			case 1:
				o.recharge = d.ri ();
				break;
			case 2:
				o.drawBin = d.ri ();
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_activity_type12(self: activity_type12, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 3);

		if (self.baseData != undefined) {
			se.wo ("activity_base_type", self.baseData, 0);
		}

		if (self.recharge != undefined) {
			se.wi (self.recharge, 1);
		}

		if (self.drawBin != undefined) {
			se.wi (self.drawBin, 2);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["activity_type12"] = {en: _encode_activity_type12, de: _decode_activity_type12}
	export class activity_type13 {
		public baseData: activity_base_type; // tag 0
		public recharge: number; // tag 1
		public drawBin: number; // tag 2
	}

	function _decode_activity_type13(d: SprotoTypeDeserialize) {
		let o = new activity_type13;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.baseData = d.ro("activity_base_type");
				break;
			case 1:
				o.recharge = d.ri ();
				break;
			case 2:
				o.drawBin = d.ri ();
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_activity_type13(self: activity_type13, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 3);

		if (self.baseData != undefined) {
			se.wo ("activity_base_type", self.baseData, 0);
		}

		if (self.recharge != undefined) {
			se.wi (self.recharge, 1);
		}

		if (self.drawBin != undefined) {
			se.wi (self.drawBin, 2);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["activity_type13"] = {en: _encode_activity_type13, de: _decode_activity_type13}
	export class activity_type14 {
		public baseData: activity_base_type; // tag 0
	}

	function _decode_activity_type14(d: SprotoTypeDeserialize) {
		let o = new activity_type14;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.baseData = d.ro("activity_base_type");
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_activity_type14(self: activity_type14, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 1);

		if (self.baseData != undefined) {
			se.wo ("activity_base_type", self.baseData, 0);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["activity_type14"] = {en: _encode_activity_type14, de: _decode_activity_type14}
	export class activity_type15 {
		public baseData: activity_base_type; // tag 0
		public datas: activity_type15_item[]; // tag 1
	}

	function _decode_activity_type15(d: SprotoTypeDeserialize) {
		let o = new activity_type15;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.baseData = d.ro("activity_base_type");
				break;
			case 1:
				o.datas = d.roa("activity_type15_item");
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_activity_type15(self: activity_type15, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 2);

		if (self.baseData != undefined) {
			se.wo ("activity_base_type", self.baseData, 0);
		}

		if (self.datas != undefined) {
			se.woa ("activity_type15_item", self.datas, 1);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["activity_type15"] = {en: _encode_activity_type15, de: _decode_activity_type15}
	export class activity_type15_item {
		public times: number; // tag 0
		public rewardTimes: number; // tag 1
	}

	function _decode_activity_type15_item(d: SprotoTypeDeserialize) {
		let o = new activity_type15_item;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.times = d.ri ();
				break;
			case 1:
				o.rewardTimes = d.ri ();
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_activity_type15_item(self: activity_type15_item, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 2);

		if (self.times != undefined) {
			se.wi (self.times, 0);
		}

		if (self.rewardTimes != undefined) {
			se.wi (self.rewardTimes, 1);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["activity_type15_item"] = {en: _encode_activity_type15_item, de: _decode_activity_type15_item}
	export class activity_type16 {
		public baseData: activity_base_type; // tag 0
		public record: number; // tag 1
		public logrecord: number; // tag 2
	}

	function _decode_activity_type16(d: SprotoTypeDeserialize) {
		let o = new activity_type16;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.baseData = d.ro("activity_base_type");
				break;
			case 1:
				o.record = d.ri ();
				break;
			case 2:
				o.logrecord = d.ri ();
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_activity_type16(self: activity_type16, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 3);

		if (self.baseData != undefined) {
			se.wo ("activity_base_type", self.baseData, 0);
		}

		if (self.record != undefined) {
			se.wi (self.record, 1);
		}

		if (self.logrecord != undefined) {
			se.wi (self.logrecord, 2);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["activity_type16"] = {en: _encode_activity_type16, de: _decode_activity_type16}
	export class activity_type17 {
		public baseData: activity_base_type; // tag 0
		public record: number[]; // tag 1
		public target: number[]; // tag 2
	}

	function _decode_activity_type17(d: SprotoTypeDeserialize) {
		let o = new activity_type17;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.baseData = d.ro("activity_base_type");
				break;
			case 1:
				o.record = d.ria ();
				break;
			case 2:
				o.target = d.ria ();
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_activity_type17(self: activity_type17, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 3);

		if (self.baseData != undefined) {
			se.wo ("activity_base_type", self.baseData, 0);
		}

		if (self.record != undefined) {
			se.wia (self.record, 1);
		}

		if (self.target != undefined) {
			se.wia (self.target, 2);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["activity_type17"] = {en: _encode_activity_type17, de: _decode_activity_type17}
	export class activity_type18 {
		public baseData: activity_base_type; // tag 0
		public record: number[]; // tag 1
		public dayrecharge: number; // tag 2
	}

	function _decode_activity_type18(d: SprotoTypeDeserialize) {
		let o = new activity_type18;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.baseData = d.ro("activity_base_type");
				break;
			case 1:
				o.record = d.ria ();
				break;
			case 2:
				o.dayrecharge = d.ri ();
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_activity_type18(self: activity_type18, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 3);

		if (self.baseData != undefined) {
			se.wo ("activity_base_type", self.baseData, 0);
		}

		if (self.record != undefined) {
			se.wia (self.record, 1);
		}

		if (self.dayrecharge != undefined) {
			se.wi (self.dayrecharge, 2);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["activity_type18"] = {en: _encode_activity_type18, de: _decode_activity_type18}
	export class activity_type19 {
		public baseData: activity_base_type; // tag 0
		public runday: number; // tag 1
		public reachday: number; // tag 2
		public record: number[]; // tag 3
	}

	function _decode_activity_type19(d: SprotoTypeDeserialize) {
		let o = new activity_type19;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.baseData = d.ro("activity_base_type");
				break;
			case 1:
				o.runday = d.ri ();
				break;
			case 2:
				o.reachday = d.ri ();
				break;
			case 3:
				o.record = d.ria ();
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_activity_type19(self: activity_type19, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 4);

		if (self.baseData != undefined) {
			se.wo ("activity_base_type", self.baseData, 0);
		}

		if (self.runday != undefined) {
			se.wi (self.runday, 1);
		}

		if (self.reachday != undefined) {
			se.wi (self.reachday, 2);
		}

		if (self.record != undefined) {
			se.wia (self.record, 3);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["activity_type19"] = {en: _encode_activity_type19, de: _decode_activity_type19}
	export class activity_type20 {
		public baseData: activity_base_type; // tag 0
		public record: number[]; // tag 1
	}

	function _decode_activity_type20(d: SprotoTypeDeserialize) {
		let o = new activity_type20;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.baseData = d.ro("activity_base_type");
				break;
			case 1:
				o.record = d.ria ();
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_activity_type20(self: activity_type20, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 2);

		if (self.baseData != undefined) {
			se.wo ("activity_base_type", self.baseData, 0);
		}

		if (self.record != undefined) {
			se.wia (self.record, 1);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["activity_type20"] = {en: _encode_activity_type20, de: _decode_activity_type20}
	export class activity_type21 {
		public baseData: activity_base_type; // tag 0
		public record: number[]; // tag 1
		public people: number; // tag 2
		public rechargeNum: number; // tag 3
	}

	function _decode_activity_type21(d: SprotoTypeDeserialize) {
		let o = new activity_type21;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.baseData = d.ro("activity_base_type");
				break;
			case 1:
				o.record = d.ria ();
				break;
			case 2:
				o.people = d.ri ();
				break;
			case 3:
				o.rechargeNum = d.ri ();
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_activity_type21(self: activity_type21, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 4);

		if (self.baseData != undefined) {
			se.wo ("activity_base_type", self.baseData, 0);
		}

		if (self.record != undefined) {
			se.wia (self.record, 1);
		}

		if (self.people != undefined) {
			se.wi (self.people, 2);
		}

		if (self.rechargeNum != undefined) {
			se.wi (self.rechargeNum, 3);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["activity_type21"] = {en: _encode_activity_type21, de: _decode_activity_type21}
	export class activity_type22 {
		public baseData: activity_base_type; // tag 0
		public gid: number; // tag 1
		public record: number[]; // tag 2
	}

	function _decode_activity_type22(d: SprotoTypeDeserialize) {
		let o = new activity_type22;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.baseData = d.ro("activity_base_type");
				break;
			case 1:
				o.gid = d.ri ();
				break;
			case 2:
				o.record = d.ria ();
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_activity_type22(self: activity_type22, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 3);

		if (self.baseData != undefined) {
			se.wo ("activity_base_type", self.baseData, 0);
		}

		if (self.gid != undefined) {
			se.wi (self.gid, 1);
		}

		if (self.record != undefined) {
			se.wia (self.record, 2);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["activity_type22"] = {en: _encode_activity_type22, de: _decode_activity_type22}
	export class activity_type23 {
		public baseData: activity_base_type; // tag 0
		public record: number; // tag 1
		public runday: number; // tag 2
		public rechargeNumber: number; // tag 3
	}

	function _decode_activity_type23(d: SprotoTypeDeserialize) {
		let o = new activity_type23;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.baseData = d.ro("activity_base_type");
				break;
			case 1:
				o.record = d.ri ();
				break;
			case 2:
				o.runday = d.ri ();
				break;
			case 3:
				o.rechargeNumber = d.ri ();
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_activity_type23(self: activity_type23, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 4);

		if (self.baseData != undefined) {
			se.wo ("activity_base_type", self.baseData, 0);
		}

		if (self.record != undefined) {
			se.wi (self.record, 1);
		}

		if (self.runday != undefined) {
			se.wi (self.runday, 2);
		}

		if (self.rechargeNumber != undefined) {
			se.wi (self.rechargeNumber, 3);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["activity_type23"] = {en: _encode_activity_type23, de: _decode_activity_type23}
	export class activity_type24 {
		public baseData: activity_base_type; // tag 0
		public status: number; // tag 1
		public reward: number[]; // tag 2
	}

	function _decode_activity_type24(d: SprotoTypeDeserialize) {
		let o = new activity_type24;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.baseData = d.ro("activity_base_type");
				break;
			case 1:
				o.status = d.ri ();
				break;
			case 2:
				o.reward = d.ria ();
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_activity_type24(self: activity_type24, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 3);

		if (self.baseData != undefined) {
			se.wo ("activity_base_type", self.baseData, 0);
		}

		if (self.status != undefined) {
			se.wi (self.status, 1);
		}

		if (self.reward != undefined) {
			se.wia (self.reward, 2);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["activity_type24"] = {en: _encode_activity_type24, de: _decode_activity_type24}
	export class activity_type25 {
		public baseData: activity_base_type; // tag 0
		public RechargeNum: number; // tag 1
		public reward: number; // tag 2
	}

	function _decode_activity_type25(d: SprotoTypeDeserialize) {
		let o = new activity_type25;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.baseData = d.ro("activity_base_type");
				break;
			case 1:
				o.RechargeNum = d.ri ();
				break;
			case 2:
				o.reward = d.ri ();
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_activity_type25(self: activity_type25, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 3);

		if (self.baseData != undefined) {
			se.wo ("activity_base_type", self.baseData, 0);
		}

		if (self.RechargeNum != undefined) {
			se.wi (self.RechargeNum, 1);
		}

		if (self.reward != undefined) {
			se.wi (self.reward, 2);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["activity_type25"] = {en: _encode_activity_type25, de: _decode_activity_type25}
	export class activity_type26 {
		public baseData: activity_base_type; // tag 0
		public buynums: number[]; // tag 1
	}

	function _decode_activity_type26(d: SprotoTypeDeserialize) {
		let o = new activity_type26;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.baseData = d.ro("activity_base_type");
				break;
			case 1:
				o.buynums = d.ria ();
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_activity_type26(self: activity_type26, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 2);

		if (self.baseData != undefined) {
			se.wo ("activity_base_type", self.baseData, 0);
		}

		if (self.buynums != undefined) {
			se.wia (self.buynums, 1);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["activity_type26"] = {en: _encode_activity_type26, de: _decode_activity_type26}
	export class activity_type27 {
		public baseData: activity_base_type; // tag 0
		public data: activity_rebate[]; // tag 1
	}

	function _decode_activity_type27(d: SprotoTypeDeserialize) {
		let o = new activity_type27;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.baseData = d.ro("activity_base_type");
				break;
			case 1:
				o.data = d.roa("activity_rebate");
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_activity_type27(self: activity_type27, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 2);

		if (self.baseData != undefined) {
			se.wo ("activity_base_type", self.baseData, 0);
		}

		if (self.data != undefined) {
			se.woa ("activity_rebate", self.data, 1);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["activity_type27"] = {en: _encode_activity_type27, de: _decode_activity_type27}
	export class activity_type28 {
		public baseData: activity_base_type; // tag 0
		public runday: number; // tag 1
		public record: number[]; // tag 2
		public recharge: number; // tag 3
	}

	function _decode_activity_type28(d: SprotoTypeDeserialize) {
		let o = new activity_type28;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.baseData = d.ro("activity_base_type");
				break;
			case 1:
				o.runday = d.ri ();
				break;
			case 2:
				o.record = d.ria ();
				break;
			case 3:
				o.recharge = d.ri ();
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_activity_type28(self: activity_type28, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 4);

		if (self.baseData != undefined) {
			se.wo ("activity_base_type", self.baseData, 0);
		}

		if (self.runday != undefined) {
			se.wi (self.runday, 1);
		}

		if (self.record != undefined) {
			se.wia (self.record, 2);
		}

		if (self.recharge != undefined) {
			se.wi (self.recharge, 3);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["activity_type28"] = {en: _encode_activity_type28, de: _decode_activity_type28}
	export class race_history {
		public id: number; // tag 0
		public name: string; // tag 1
		public value: number; // tag 2
		public vip: number; // tag 3
		public monthCard: number; // tag 4
		public monthcard_super: number; // tag 5
		public headId: number; // tag 6
	}

	function _decode_race_history(d: SprotoTypeDeserialize) {
		let o = new race_history;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.id = d.ri ();
				break;
			case 1:
				o.name = d.rs ();
				break;
			case 2:
				o.value = d.ri ();
				break;
			case 3:
				o.vip = d.ri ();
				break;
			case 4:
				o.monthCard = d.ri ();
				break;
			case 5:
				o.monthcard_super = d.ri ();
				break;
			case 6:
				o.headId = d.ri ();
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_race_history(self: race_history, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 7);

		if (self.id != undefined) {
			se.wi (self.id, 0);
		}

		if (self.name != undefined) {
			se.ws (self.name, 1);
		}

		if (self.value != undefined) {
			se.wi (self.value, 2);
		}

		if (self.vip != undefined) {
			se.wi (self.vip, 3);
		}

		if (self.monthCard != undefined) {
			se.wi (self.monthCard, 4);
		}

		if (self.monthcard_super != undefined) {
			se.wi (self.monthcard_super, 5);
		}

		if (self.headId != undefined) {
			se.wi (self.headId, 6);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["race_history"] = {en: _encode_race_history, de: _decode_race_history}
	export class sc_activity_dabiao_info_request {
		public acId: number; // tag 1
		public index: number; // tag 2
		public draw: number; // tag 3
		public value: number; // tag 4
		public rankInfo: activity_dabiao_data[]; // tag 5
	}

	function _decode_sc_activity_dabiao_info_request(d: SprotoTypeDeserialize) {
		let o = new sc_activity_dabiao_info_request;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 1:
				o.acId = d.ri ();
				break;
			case 2:
				o.index = d.ri ();
				break;
			case 3:
				o.draw = d.ri ();
				break;
			case 4:
				o.value = d.ri ();
				break;
			case 5:
				o.rankInfo = d.roa("activity_dabiao_data");
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_sc_activity_dabiao_info_request(self: sc_activity_dabiao_info_request, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 6);

		if (self.acId != undefined) {
			se.wi (self.acId, 1);
		}

		if (self.index != undefined) {
			se.wi (self.index, 2);
		}

		if (self.draw != undefined) {
			se.wi (self.draw, 3);
		}

		if (self.value != undefined) {
			se.wi (self.value, 4);
		}

		if (self.rankInfo != undefined) {
			se.woa ("activity_dabiao_data", self.rankInfo, 5);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["sc_activity_dabiao_info_request"] = {en: _encode_sc_activity_dabiao_info_request, de: _decode_sc_activity_dabiao_info_request}
	export class sc_activity_dabiao_reward_request {
		public draw: number; // tag 0
	}

	function _decode_sc_activity_dabiao_reward_request(d: SprotoTypeDeserialize) {
		let o = new sc_activity_dabiao_reward_request;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.draw = d.ri ();
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_sc_activity_dabiao_reward_request(self: sc_activity_dabiao_reward_request, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 1);

		if (self.draw != undefined) {
			se.wi (self.draw, 0);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["sc_activity_dabiao_reward_request"] = {en: _encode_sc_activity_dabiao_reward_request, de: _decode_sc_activity_dabiao_reward_request}
	export class sc_activity_init_info_request {
		public datas: activity_data_collection[]; // tag 0
	}

	function _decode_sc_activity_init_info_request(d: SprotoTypeDeserialize) {
		let o = new sc_activity_init_info_request;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.datas = d.roa("activity_data_collection");
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_sc_activity_init_info_request(self: sc_activity_init_info_request, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 1);

		if (self.datas != undefined) {
			se.woa ("activity_data_collection", self.datas, 0);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["sc_activity_init_info_request"] = {en: _encode_sc_activity_init_info_request, de: _decode_sc_activity_init_info_request}
	export class sc_activity_luckwheel_ret_request {
		public activityid: number; // tag 0
		public rewards: reward_data[]; // tag 1
	}

	function _decode_sc_activity_luckwheel_ret_request(d: SprotoTypeDeserialize) {
		let o = new sc_activity_luckwheel_ret_request;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.activityid = d.ri ();
				break;
			case 1:
				o.rewards = d.roa("reward_data");
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_sc_activity_luckwheel_ret_request(self: sc_activity_luckwheel_ret_request, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 2);

		if (self.activityid != undefined) {
			se.wi (self.activityid, 0);
		}

		if (self.rewards != undefined) {
			se.woa ("reward_data", self.rewards, 1);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["sc_activity_luckwheel_ret_request"] = {en: _encode_sc_activity_luckwheel_ret_request, de: _decode_sc_activity_luckwheel_ret_request}
	export class sc_activity_race_history_request {
		public data: race_history[]; // tag 0
	}

	function _decode_sc_activity_race_history_request(d: SprotoTypeDeserialize) {
		let o = new sc_activity_race_history_request;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.data = d.roa("race_history");
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_sc_activity_race_history_request(self: sc_activity_race_history_request, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 1);

		if (self.data != undefined) {
			se.woa ("race_history", self.data, 0);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["sc_activity_race_history_request"] = {en: _encode_sc_activity_race_history_request, de: _decode_sc_activity_race_history_request}
	export class sc_activity_reward_result_request {
		public id: number; // tag 0
		public data: activity_data_collection; // tag 1
	}

	function _decode_sc_activity_reward_result_request(d: SprotoTypeDeserialize) {
		let o = new sc_activity_reward_result_request;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.id = d.ri ();
				break;
			case 1:
				o.data = d.ro("activity_data_collection");
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_sc_activity_reward_result_request(self: sc_activity_reward_result_request, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 2);

		if (self.id != undefined) {
			se.wi (self.id, 0);
		}

		if (self.data != undefined) {
			se.wo ("activity_data_collection", self.data, 1);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["sc_activity_reward_result_request"] = {en: _encode_sc_activity_reward_result_request, de: _decode_sc_activity_reward_result_request}
	export class sc_activity_update_info_request {
		public index: number; // tag 0
		public data: activity_data_collection; // tag 1
	}

	function _decode_sc_activity_update_info_request(d: SprotoTypeDeserialize) {
		let o = new sc_activity_update_info_request;
		let t = -1;
		while (-1 != (t = d.rt())) {
			switch (t) {
			case 0:
				o.index = d.ri ();
				break;
			case 1:
				o.data = d.ro("activity_data_collection");
				break;
			default:
				d.nod ();
				break;
			}
		}
		return o
	}

	function _encode_sc_activity_update_info_request(self: sc_activity_update_info_request, st: Sproto.SprotoStream) {
		let se = SprotoCore.GetSerialize(st, 2);

		if (self.index != undefined) {
			se.wi (self.index, 0);
		}

		if (self.data != undefined) {
			se.wo ("activity_data_collection", self.data, 1);
		}

		return SprotoCore.CloseSerialize(se);
	}

	ALL_DICT["sc_activity_update_info_request"] = {en: _encode_sc_activity_update_info_request, de: _decode_sc_activity_update_info_request}
}

